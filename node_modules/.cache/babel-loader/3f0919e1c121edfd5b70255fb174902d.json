{"ast":null,"code":"var _jsxFileName = \"C:\\\\SourceTree\\\\capstone-project\\\\src\\\\NetworkTopology.js\";\nimport \"antd/dist/antd.css\";\nimport React from \"react\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport DeviceDrawer from \"./Components/DrawerDevice\";\nimport * as THREE from \"three\"; // import testingData from \"./Components/Data/testdata.json\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class AppNetworkTopology extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      deviceDetailsObject: {},\n      drawerStatus: false\n    };\n\n    this.handleRightClick = node => {\n      this.setState({\n        deviceDetailsObject: node,\n        drawerStatus: true\n      });\n    };\n\n    this.closeDeviceDrawer = () => {\n      this.setState({\n        drawerStatus: false\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"primary\",\n        children: \"Show Network Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DeviceDrawer, {\n        deviceDetails: this.state.deviceDetailsObject,\n        drawerStatus: this.state.drawerStatus,\n        closeDrawerFunction: this.closeDeviceDrawer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ForceGraph3D, {\n        graphData: {\n          nodes: [{\n            id: \"192.168.1.100\",\n            name: \"DB-01\",\n            type: \"DB\",\n            value: \"1\",\n            os: \"Linux\",\n            mac_addr: \"aa:aa:aa:aa:aa:aa\",\n            subnet: \"255.255.255.0\",\n            gateway: \"192.168.1.1\"\n          }, {\n            id: \"192.168.1.101\",\n            name: \"PC-01\",\n            type: \"PC\",\n            value: \"1\",\n            os: \"Windows 10\",\n            mac_addr: \"bb:bb:bb:bb:bb:bb\",\n            subnet: \"255.255.255.0\",\n            gateway: \"192.168.1.1\"\n          }, {\n            id: \"192.168.1.102\",\n            name: \"PC-02\",\n            type: \"PC\",\n            value: \"1\",\n            os: \"Windows 10\",\n            mac_addr: \"cc:cc:cc:cc:cc:cc\",\n            subnet: \"255.255.255.0\",\n            gateway: \"192.168.1.1\"\n          }],\n          links: [{\n            source: \"192.168.1.100\",\n            target: \"192.168.1.101\"\n          }, {\n            source: \"192.168.1.101\",\n            target: \"192.168.1.102\"\n          }, {\n            source: \"192.168.1.100\",\n            target: \"192.168.1.102\"\n          }]\n        },\n        onNodeRightClick: this.handleRightClick,\n        linkDirectionalParticles: 1,\n        linkDirectionalParticleSpeed: 0.01,\n        onNodeDragEnd: node => {\n          node.fx = node.x;\n          node.fy = node.y;\n          node.fz = node.z;\n        },\n        nodeThreeObject: _ref => {\n          let {\n            type\n          } = _ref;\n          let imgTexture = null;\n\n          if (type === \"DB\") {\n            imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\n          } else if (type === \"PC\") {\n            imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\n          }\n\n          const material = new THREE.SpriteMaterial({\n            map: imgTexture\n          });\n          const sprite = new THREE.Sprite(material);\n          sprite.scale.set(12, 12);\n          return sprite;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this);\n  }\n\n} // handleClick = (node) => {\n//   const getHostName = testingData.filter((thisDevice) =>\n//     thisDevice.id.includes(node.id)\n//   );\n//   getHostName.map((deviceDetails) => {\n//     // alert(deviceDetails.os);\n//     this.setState({ deviceDetailsObject: deviceDetails });\n//   });\n// };\n// import NetworkDrawer from \"./Components/DrawerNetwork\";\n// function AppNetworkTopology() {\n//   const [name] = useState(\"Tarun\");\n//   const handleClick = (node) => {\n//     const getHostName = testingData.filter((thisDevice) =>\n//       thisDevice.id.includes(node.id)\n//     );\n//     getHostName.map((deviceDetails) => {\n//       alert(deviceDetails.os);\n//       return <DeviceDrawer name={name} />;\n//     });\n//   };\n//   return (\n//     <div>\n//       <DeviceDrawer />\n//       <ForceGraph3D\n//         graphData={{\n//           nodes: [\n//             {\n//               id: \"192.168.1.100\",\n//               name: \"DB-01\",\n//               type: \"DB\",\n//               value: \"1\",\n//               os: \"Linux\",\n//               mac_addr: \"aa:aa:aa:aa:aa:aa\",\n//             },\n//             {\n//               id: \"192.168.1.101\",\n//               name: \"PC-01\",\n//               type: \"PC\",\n//               value: \"1\",\n//               mac_addr: \"bb:bb:bb:bb:bb:bb\",\n//             },\n//             {\n//               id: \"192.168.1.102\",\n//               name: \"PC-02\",\n//               type: \"PC\",\n//               value: \"1\",\n//               mac_addr: \"cc:cc:cc:cc:cc:cc\",\n//             },\n//           ],\n//           links: [\n//             {\n//               source: \"192.168.1.100\",\n//               target: \"192.168.1.101\",\n//             },\n//             {\n//               source: \"192.168.1.101\",\n//               target: \"192.168.1.102\",\n//             },\n//             {\n//               source: \"192.168.1.100\",\n//               target: \"192.168.1.102\",\n//             },\n//           ],\n//         }}\n//         onNodeRightClick={handleClick}\n//         linkDirectionalParticles={1}\n//         linkDirectionalParticleSpeed={0.01}\n//         onNodeDragEnd={(node) => {\n//           node.fx = node.x;\n//           node.fy = node.y;\n//           node.fz = node.z;\n//         }}\n//         nodeThreeObject={({ type }) => {\n//           let imgTexture = null;\n//           if (type === \"DB\") {\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\n//           } else if (type === \"PC\") {\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\n//           }\n//           const material = new THREE.SpriteMaterial({ map: imgTexture });\n//           const sprite = new THREE.Sprite(material);\n//           sprite.scale.set(12, 12);\n//           return sprite;\n//         }}\n//       />\n//     </div>\n//   );\n// }\n// export default AppNetworkTopology;","map":{"version":3,"sources":["C:/SourceTree/capstone-project/src/NetworkTopology.js"],"names":["React","ForceGraph3D","DeviceDrawer","THREE","AppNetworkTopology","Component","state","deviceDetailsObject","drawerStatus","handleRightClick","node","setState","closeDeviceDrawer","render","nodes","id","name","type","value","os","mac_addr","subnet","gateway","links","source","target","fx","x","fy","y","fz","z","imgTexture","TextureLoader","load","material","SpriteMaterial","map","sprite","Sprite","scale","set"],"mappings":"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,gBAAMC,QAAQ,GAAG,IAAIhC,KAAK,CAACiC,cAAV,CAAyB;AAAEC,YAAAA,GAAG,EAAEL;AAAP,WAAzB,CAAjB;AACA,gBAAMM,MAAM,GAAG,IAAInC,KAAK,CAACoC,MAAV,CAAiBJ,QAAjB,CAAf;AACAG,UAAAA,MAAM,CAACE,KAAP,CAAaC,GAAb,CAAiB,EAAjB,EAAqB,EAArB;AAEA,iBAAOH,MAAP;AACD;AAtEH;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAkFD;;AApG6D,C,CAuGhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import \"antd/dist/antd.css\";\nimport React from \"react\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport DeviceDrawer from \"./Components/DrawerDevice\";\nimport * as THREE from \"three\";\n// import testingData from \"./Components/Data/testdata.json\";\n\nexport default class AppNetworkTopology extends React.Component {\n  // Initial state for deviceDetailsObject & drawerStatus\n  state = {\n    deviceDetailsObject: {},\n    drawerStatus: false,\n  };\n\n  // On right-click on icon on network topology, pass the object to handleRightClick()\n  // Set deviceDetailsObject as node\n  handleRightClick = (node) => {\n    this.setState({ deviceDetailsObject: node, drawerStatus: true });\n  };\n\n  closeDeviceDrawer = () => {\n    this.setState({ drawerStatus: false });\n  };\n\n  render() {\n    return (\n      <div>\n        <button type=\"primary\">Show Network Statistics</button>\n        <DeviceDrawer\n          deviceDetails={this.state.deviceDetailsObject}\n          drawerStatus={this.state.drawerStatus}\n          closeDrawerFunction={this.closeDeviceDrawer}\n        />\n        <ForceGraph3D\n          graphData={{\n            nodes: [\n              {\n                id: \"192.168.1.100\",\n                name: \"DB-01\",\n                type: \"DB\",\n                value: \"1\",\n                os: \"Linux\",\n                mac_addr: \"aa:aa:aa:aa:aa:aa\",\n                subnet: \"255.255.255.0\",\n                gateway: \"192.168.1.1\",\n              },\n              {\n                id: \"192.168.1.101\",\n                name: \"PC-01\",\n                type: \"PC\",\n                value: \"1\",\n                os: \"Windows 10\",\n                mac_addr: \"bb:bb:bb:bb:bb:bb\",\n                subnet: \"255.255.255.0\",\n                gateway: \"192.168.1.1\",\n              },\n              {\n                id: \"192.168.1.102\",\n                name: \"PC-02\",\n                type: \"PC\",\n                value: \"1\",\n                os: \"Windows 10\",\n                mac_addr: \"cc:cc:cc:cc:cc:cc\",\n                subnet: \"255.255.255.0\",\n                gateway: \"192.168.1.1\",\n              },\n            ],\n            links: [\n              {\n                source: \"192.168.1.100\",\n                target: \"192.168.1.101\",\n              },\n              {\n                source: \"192.168.1.101\",\n                target: \"192.168.1.102\",\n              },\n              {\n                source: \"192.168.1.100\",\n                target: \"192.168.1.102\",\n              },\n            ],\n          }}\n          onNodeRightClick={this.handleRightClick}\n          linkDirectionalParticles={1}\n          linkDirectionalParticleSpeed={0.01}\n          onNodeDragEnd={(node) => {\n            node.fx = node.x;\n            node.fy = node.y;\n            node.fz = node.z;\n          }}\n          nodeThreeObject={({ type }) => {\n            let imgTexture = null;\n            if (type === \"DB\") {\n              imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\n            } else if (type === \"PC\") {\n              imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\n            }\n\n            const material = new THREE.SpriteMaterial({ map: imgTexture });\n            const sprite = new THREE.Sprite(material);\n            sprite.scale.set(12, 12);\n\n            return sprite;\n          }}\n        />\n      </div>\n    );\n  }\n}\n\n// handleClick = (node) => {\n//   const getHostName = testingData.filter((thisDevice) =>\n//     thisDevice.id.includes(node.id)\n//   );\n//   getHostName.map((deviceDetails) => {\n//     // alert(deviceDetails.os);\n//     this.setState({ deviceDetailsObject: deviceDetails });\n//   });\n// };\n\n// import NetworkDrawer from \"./Components/DrawerNetwork\";\n\n// function AppNetworkTopology() {\n//   const [name] = useState(\"Tarun\");\n\n//   const handleClick = (node) => {\n//     const getHostName = testingData.filter((thisDevice) =>\n//       thisDevice.id.includes(node.id)\n//     );\n//     getHostName.map((deviceDetails) => {\n//       alert(deviceDetails.os);\n//       return <DeviceDrawer name={name} />;\n//     });\n//   };\n//   return (\n//     <div>\n//       <DeviceDrawer />\n//       <ForceGraph3D\n//         graphData={{\n//           nodes: [\n//             {\n//               id: \"192.168.1.100\",\n//               name: \"DB-01\",\n//               type: \"DB\",\n//               value: \"1\",\n//               os: \"Linux\",\n//               mac_addr: \"aa:aa:aa:aa:aa:aa\",\n//             },\n//             {\n//               id: \"192.168.1.101\",\n//               name: \"PC-01\",\n//               type: \"PC\",\n//               value: \"1\",\n//               mac_addr: \"bb:bb:bb:bb:bb:bb\",\n//             },\n//             {\n//               id: \"192.168.1.102\",\n//               name: \"PC-02\",\n//               type: \"PC\",\n//               value: \"1\",\n//               mac_addr: \"cc:cc:cc:cc:cc:cc\",\n//             },\n//           ],\n//           links: [\n//             {\n//               source: \"192.168.1.100\",\n//               target: \"192.168.1.101\",\n//             },\n//             {\n//               source: \"192.168.1.101\",\n//               target: \"192.168.1.102\",\n//             },\n//             {\n//               source: \"192.168.1.100\",\n//               target: \"192.168.1.102\",\n//             },\n//           ],\n//         }}\n//         onNodeRightClick={handleClick}\n//         linkDirectionalParticles={1}\n//         linkDirectionalParticleSpeed={0.01}\n//         onNodeDragEnd={(node) => {\n//           node.fx = node.x;\n//           node.fy = node.y;\n//           node.fz = node.z;\n//         }}\n//         nodeThreeObject={({ type }) => {\n//           let imgTexture = null;\n//           if (type === \"DB\") {\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\n//           } else if (type === \"PC\") {\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\n//           }\n\n//           const material = new THREE.SpriteMaterial({ map: imgTexture });\n//           const sprite = new THREE.Sprite(material);\n//           sprite.scale.set(12, 12);\n\n//           return sprite;\n//         }}\n//       />\n//     </div>\n//   );\n// }\n\n// export default AppNetworkTopology;\n"]},"metadata":{},"sourceType":"module"}