{"ast":null,"code":"var _jsxFileName = \"C:\\\\SourceTree\\\\capstone-project\\\\src\\\\Components\\\\CardEmergingThreats.js\";\nimport { Card, Table } from \"antd\"; // import alerts from \"./Data/alert.json\";\n// var counter = alerts.reduce(function (prev, cur) {\n//   if (prev.hasOwnProperty(cur.type)) prev[cur.type] += 1;\n//   else prev[cur.type] = 1;\n//   return prev;\n// }, {});\n// alert(JSON.stringify(groupByThreatCategory));\n// for (const [key, value] of Object.entries(groupByThreatCategory)) {\n//   console.log(`${key}: ${value}`);\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EmergingThreatsCard(_ref) {\n  let {\n    alertData\n  } = _ref;\n\n  // Group the alerts by their Threat Category (store in threat_counter)\n  const groupByThreatCategory = () => {\n    var threat_counter = {};\n\n    for (var i = 0; i < alertData.length; i++) {\n      if (!threat_counter[alertData[i][\"threat_category\"]]) {\n        threat_counter[alertData[i][\"threat_category\"]] = 0;\n      }\n\n      threat_counter[alertData[i][\"threat_category\"]]++;\n    }\n\n    return threat_counter;\n  };\n\n  const columns = [{\n    title: \"Threat Category\",\n    dataIndex: \"threat_category\",\n    key: \"threat_category\",\n    sorter: (a, b) => a.threat_category.localeCompare(b.threat_category)\n  }, {\n    title: \"Frequency\",\n    dataIndex: \"frequency\",\n    key: \"frequency\",\n    sorter: (a, b) => a.frequency - b.frequency\n  }]; // Sort the groups (of Threat Category) by highest to lowest frequency (no. of occurances)\n\n  const sortByFrequency = Object.entries(groupByThreatCategory()).sort((_ref2, _ref3) => {\n    let [, b] = _ref2;\n    let [, a] = _ref3;\n    return a - b;\n  }) // Sort from highest to lowest\n  .splice(0, 4); // Select the top four (frequency)\n  // Add the key values using the result ofsortByFrequency for the dataSource in the table\n\n  const dataToTable = data => {\n    var result = [];\n\n    for (var k in data) result.push({\n      threat_category: data[k][0],\n      frequency: data[k][1]\n    });\n\n    return result;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      headStyle: {\n        color: \"white\",\n        background: \"#3E3D40\"\n      },\n      title: \"Emerging Threats\",\n      style: {\n        width: \"100%\",\n        overflow: \"hidden\",\n        color: \"white\",\n        margin: \"0 auto\"\n      },\n      bodyStyle: {\n        background: \"#1F1E26\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Table, {\n        dataSource: \"\",\n        columns: columns,\n        size: \"small\",\n        pagination: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        id: \"abcd\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_c = EmergingThreatsCard;\nexport default EmergingThreatsCard; // <div>\n//   {alerts.map((threats, key) => {\n//     return <p key={key}>{threats.threat_category}</p>;\n//   })}\n// </div>;\n// const groupByThreatCategory1 = alerts.reduce((alertData, alertCounter) => {\n//   alertData[alertCounter.threat_category] =\n//     alertData[alertCounter.threat_category] + 1 || 1;\n//   return alertData;\n// }, {});\n// {\n//   Object.entries(sortByFrequency).map((entry) => {\n//     return (\n//       <p>\n//         <span key={entry[0]}>{`${entry[1][0]}`}</span>{\" \"}\n//         <span\n//           style={{ position: \"absolute\", right: 30 }}\n//         >{`${entry[1][1]}`}</span>\n//         <br />\n//       </p>\n//     );\n//   });\n// }\n// {\n//   Object.entries(sortByFrequency).map((entry) => {\n//     return (\n//       <p>\n//         <span>{`${entry[1][0]}`}</span>{\" \"}\n//         <span\n//           style={{ position: \"absolute\", right: 30 }}\n//         >{`${entry[1][1]}`}</span>\n//         <br />\n//       </p>\n//     );\n//   });\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"EmergingThreatsCard\");","map":{"version":3,"sources":["C:/SourceTree/capstone-project/src/Components/CardEmergingThreats.js"],"names":["Card","Table","EmergingThreatsCard","alertData","groupByThreatCategory","threat_counter","i","length","columns","title","dataIndex","key","sorter","a","b","threat_category","localeCompare","frequency","sortByFrequency","Object","entries","sort","splice","dataToTable","data","result","k","push","color","background","width","overflow","margin"],"mappings":";AAAA,SAASA,IAAT,EAAeC,KAAf,QAA4B,MAA5B,C,CACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;;;;AAEA,SAASC,mBAAT,OAA4C;AAAA,MAAf;AAAEC,IAAAA;AAAF,GAAe;;AAC1C;AACA,QAAMC,qBAAqB,GAAG,MAAM;AAClC,QAAIC,cAAc,GAAG,EAArB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAAS,CAACI,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACzC,UAAI,CAACD,cAAc,CAACF,SAAS,CAACG,CAAD,CAAT,CAAa,iBAAb,CAAD,CAAnB,EAAsD;AACpDD,QAAAA,cAAc,CAACF,SAAS,CAACG,CAAD,CAAT,CAAa,iBAAb,CAAD,CAAd,GAAkD,CAAlD;AACD;;AACDD,MAAAA,cAAc,CAACF,SAAS,CAACG,CAAD,CAAT,CAAa,iBAAb,CAAD,CAAd;AACD;;AACD,WAAOD,cAAP;AACD,GATD;;AAWA,QAAMG,OAAO,GAAG,CACd;AACEC,IAAAA,KAAK,EAAE,iBADT;AAEEC,IAAAA,SAAS,EAAE,iBAFb;AAGEC,IAAAA,GAAG,EAAE,iBAHP;AAIEC,IAAAA,MAAM,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,eAAF,CAAkBC,aAAlB,CAAgCF,CAAC,CAACC,eAAlC;AAJpB,GADc,EAOd;AACEN,IAAAA,KAAK,EAAE,WADT;AAEEC,IAAAA,SAAS,EAAE,WAFb;AAGEC,IAAAA,GAAG,EAAE,WAHP;AAIEC,IAAAA,MAAM,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACI,SAAF,GAAcH,CAAC,CAACG;AAJpC,GAPc,CAAhB,CAb0C,CA4B1C;;AACA,QAAMC,eAAe,GAAGC,MAAM,CAACC,OAAP,CAAehB,qBAAqB,EAApC,EACrBiB,IADqB,CAChB;AAAA,QAAC,GAAGP,CAAH,CAAD;AAAA,QAAQ,GAAGD,CAAH,CAAR;AAAA,WAAkBA,CAAC,GAAGC,CAAtB;AAAA,GADgB,EACS;AADT,GAErBQ,MAFqB,CAEd,CAFc,EAEX,CAFW,CAAxB,CA7B0C,CA+BzB;AAEjB;;AACA,QAAMC,WAAW,GAAIC,IAAD,IAAU;AAC5B,QAAIC,MAAM,GAAG,EAAb;;AACA,SAAK,IAAIC,CAAT,IAAcF,IAAd,EACEC,MAAM,CAACE,IAAP,CAAY;AAAEZ,MAAAA,eAAe,EAAES,IAAI,CAACE,CAAD,CAAJ,CAAQ,CAAR,CAAnB;AAA+BT,MAAAA,SAAS,EAAEO,IAAI,CAACE,CAAD,CAAJ,CAAQ,CAAR;AAA1C,KAAZ;;AACF,WAAOD,MAAP;AACD,GALD;;AAOA,sBACE;AAAA,2BACE,QAAC,IAAD;AACE,MAAA,SAAS,EAAE;AACTG,QAAAA,KAAK,EAAE,OADE;AAETC,QAAAA,UAAU,EAAE;AAFH,OADb;AAKE,MAAA,KAAK,EAAC,kBALR;AAME,MAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE,MADF;AAELC,QAAAA,QAAQ,EAAE,QAFL;AAGLH,QAAAA,KAAK,EAAE,OAHF;AAILI,QAAAA,MAAM,EAAE;AAJH,OANT;AAYE,MAAA,SAAS,EAAE;AAAEH,QAAAA,UAAU,EAAE;AAAd,OAZb;AAAA,8BAcE,QAAC,KAAD;AACE,QAAA,UAAU,EAAE,EADd;AAEE,QAAA,OAAO,EAAErB,OAFX;AAGE,QAAA,IAAI,EAAC,OAHP;AAIE,QAAA,UAAU,EAAE;AAJd;AAAA;AAAA;AAAA;AAAA,cAdF,eAoBE;AAAI,QAAA,EAAE,EAAC;AAAP;AAAA;AAAA;AAAA;AAAA,cApBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD;;KAnEQN,mB;AAqET,eAAeA,mBAAf,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { Card, Table } from \"antd\";\r\n// import alerts from \"./Data/alert.json\";\r\n\r\n// var counter = alerts.reduce(function (prev, cur) {\r\n//   if (prev.hasOwnProperty(cur.type)) prev[cur.type] += 1;\r\n//   else prev[cur.type] = 1;\r\n\r\n//   return prev;\r\n// }, {});\r\n\r\n// alert(JSON.stringify(groupByThreatCategory));\r\n\r\n// for (const [key, value] of Object.entries(groupByThreatCategory)) {\r\n//   console.log(`${key}: ${value}`);\r\n// }\r\n\r\nfunction EmergingThreatsCard({ alertData }) {\r\n  // Group the alerts by their Threat Category (store in threat_counter)\r\n  const groupByThreatCategory = () => {\r\n    var threat_counter = {};\r\n    for (var i = 0; i < alertData.length; i++) {\r\n      if (!threat_counter[alertData[i][\"threat_category\"]]) {\r\n        threat_counter[alertData[i][\"threat_category\"]] = 0;\r\n      }\r\n      threat_counter[alertData[i][\"threat_category\"]]++;\r\n    }\r\n    return threat_counter;\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Threat Category\",\r\n      dataIndex: \"threat_category\",\r\n      key: \"threat_category\",\r\n      sorter: (a, b) => a.threat_category.localeCompare(b.threat_category),\r\n    },\r\n    {\r\n      title: \"Frequency\",\r\n      dataIndex: \"frequency\",\r\n      key: \"frequency\",\r\n      sorter: (a, b) => a.frequency - b.frequency,\r\n    },\r\n  ];\r\n\r\n  // Sort the groups (of Threat Category) by highest to lowest frequency (no. of occurances)\r\n  const sortByFrequency = Object.entries(groupByThreatCategory())\r\n    .sort(([, b], [, a]) => a - b) // Sort from highest to lowest\r\n    .splice(0, 4); // Select the top four (frequency)\r\n\r\n  // Add the key values using the result ofsortByFrequency for the dataSource in the table\r\n  const dataToTable = (data) => {\r\n    var result = [];\r\n    for (var k in data)\r\n      result.push({ threat_category: data[k][0], frequency: data[k][1] });\r\n    return result;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card\r\n        headStyle={{\r\n          color: \"white\",\r\n          background: \"#3E3D40\",\r\n        }}\r\n        title=\"Emerging Threats\"\r\n        style={{\r\n          width: \"100%\",\r\n          overflow: \"hidden\",\r\n          color: \"white\",\r\n          margin: \"0 auto\",\r\n        }}\r\n        bodyStyle={{ background: \"#1F1E26\" }}\r\n      >\r\n        <Table\r\n          dataSource={\"\"}\r\n          columns={columns}\r\n          size=\"small\"\r\n          pagination={false}\r\n        />\r\n        <ul id=\"abcd\"></ul>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmergingThreatsCard;\r\n\r\n// <div>\r\n//   {alerts.map((threats, key) => {\r\n//     return <p key={key}>{threats.threat_category}</p>;\r\n//   })}\r\n// </div>;\r\n\r\n// const groupByThreatCategory1 = alerts.reduce((alertData, alertCounter) => {\r\n//   alertData[alertCounter.threat_category] =\r\n//     alertData[alertCounter.threat_category] + 1 || 1;\r\n//   return alertData;\r\n// }, {});\r\n\r\n// {\r\n//   Object.entries(sortByFrequency).map((entry) => {\r\n//     return (\r\n//       <p>\r\n//         <span key={entry[0]}>{`${entry[1][0]}`}</span>{\" \"}\r\n//         <span\r\n//           style={{ position: \"absolute\", right: 30 }}\r\n//         >{`${entry[1][1]}`}</span>\r\n//         <br />\r\n//       </p>\r\n//     );\r\n//   });\r\n// }\r\n\r\n// {\r\n//   Object.entries(sortByFrequency).map((entry) => {\r\n//     return (\r\n//       <p>\r\n//         <span>{`${entry[1][0]}`}</span>{\" \"}\r\n//         <span\r\n//           style={{ position: \"absolute\", right: 30 }}\r\n//         >{`${entry[1][1]}`}</span>\r\n//         <br />\r\n//       </p>\r\n//     );\r\n//   });\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}