{"ast":null,"code":"var _jsxFileName = \"C:\\\\SourceTree\\\\capstone-project\\\\src\\\\NetworkTopology.js\";\nimport \"antd/dist/antd.css\";\nimport React from \"react\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport DeviceDrawer from \"./Components/DrawerDevice\";\nimport * as THREE from \"three\"; // import testingData from \"./Components/Data/testdata.json\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AppNetworkTopology() {\n  // Initial state for deviceDetailsObject & drawerStatus\n  state = {\n    deviceDetailsObject: {},\n    drawerStatus: false\n  }; // On right-click on icon on network topology, pass the object to handleRightClick()\n  // Set deviceDetailsObject as node\n\n  handleRightClick = node => {\n    this.setState({\n      deviceDetailsObject: node,\n      drawerStatus: true\n    });\n  };\n\n  closeDrawer = () => {\n    this.setState({\n      drawerStatus: false\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: this.closeDrawer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DeviceDrawer, {\n      deviceDetails: this.state.deviceDetailsObject,\n      drawerStatus: this.state.drawerStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ForceGraph3D, {\n      graphData: {\n        nodes: [{\n          id: \"192.168.1.100\",\n          name: \"DB-01\",\n          type: \"DB\",\n          value: \"1\",\n          os: \"Linux\",\n          mac_addr: \"aa:aa:aa:aa:aa:aa\"\n        }, {\n          id: \"192.168.1.101\",\n          name: \"PC-01\",\n          type: \"PC\",\n          value: \"1\",\n          os: \"Windows 10\",\n          mac_addr: \"bb:bb:bb:bb:bb:bb\"\n        }, {\n          id: \"192.168.1.102\",\n          name: \"PC-02\",\n          type: \"PC\",\n          value: \"1\",\n          os: \"Windows 10\",\n          mac_addr: \"cc:cc:cc:cc:cc:cc\"\n        }],\n        links: [{\n          source: \"192.168.1.100\",\n          target: \"192.168.1.101\"\n        }, {\n          source: \"192.168.1.101\",\n          target: \"192.168.1.102\"\n        }, {\n          source: \"192.168.1.100\",\n          target: \"192.168.1.102\"\n        }]\n      },\n      onNodeRightClick: this.handleRightClick,\n      linkDirectionalParticles: 1,\n      linkDirectionalParticleSpeed: 0.01,\n      onNodeDragEnd: node => {\n        node.fx = node.x;\n        node.fy = node.y;\n        node.fz = node.z;\n      },\n      nodeThreeObject: _ref => {\n        let {\n          type\n        } = _ref;\n        let imgTexture = null;\n\n        if (type === \"DB\") {\n          imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\n        } else if (type === \"PC\") {\n          imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\n        }\n\n        const material = new THREE.SpriteMaterial({\n          map: imgTexture\n        });\n        const sprite = new THREE.Sprite(material);\n        sprite.scale.set(12, 12);\n        return sprite;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n_c = AppNetworkTopology;\nexport default AppNetworkTopology; // handleClick = (node) => {\n//   const getHostName = testingData.filter((thisDevice) =>\n//     thisDevice.id.includes(node.id)\n//   );\n//   getHostName.map((deviceDetails) => {\n//     // alert(deviceDetails.os);\n//     this.setState({ deviceDetailsObject: deviceDetails });\n//   });\n// };\n// import NetworkDrawer from \"./Components/DrawerNetwork\";\n// function AppNetworkTopology() {\n//   const [name] = useState(\"Tarun\");\n//   const handleClick = (node) => {\n//     const getHostName = testingData.filter((thisDevice) =>\n//       thisDevice.id.includes(node.id)\n//     );\n//     getHostName.map((deviceDetails) => {\n//       alert(deviceDetails.os);\n//       return <DeviceDrawer name={name} />;\n//     });\n//   };\n//   return (\n//     <div>\n//       <DeviceDrawer />\n//       <ForceGraph3D\n//         graphData={{\n//           nodes: [\n//             {\n//               id: \"192.168.1.100\",\n//               name: \"DB-01\",\n//               type: \"DB\",\n//               value: \"1\",\n//               os: \"Linux\",\n//               mac_addr: \"aa:aa:aa:aa:aa:aa\",\n//             },\n//             {\n//               id: \"192.168.1.101\",\n//               name: \"PC-01\",\n//               type: \"PC\",\n//               value: \"1\",\n//               mac_addr: \"bb:bb:bb:bb:bb:bb\",\n//             },\n//             {\n//               id: \"192.168.1.102\",\n//               name: \"PC-02\",\n//               type: \"PC\",\n//               value: \"1\",\n//               mac_addr: \"cc:cc:cc:cc:cc:cc\",\n//             },\n//           ],\n//           links: [\n//             {\n//               source: \"192.168.1.100\",\n//               target: \"192.168.1.101\",\n//             },\n//             {\n//               source: \"192.168.1.101\",\n//               target: \"192.168.1.102\",\n//             },\n//             {\n//               source: \"192.168.1.100\",\n//               target: \"192.168.1.102\",\n//             },\n//           ],\n//         }}\n//         onNodeRightClick={handleClick}\n//         linkDirectionalParticles={1}\n//         linkDirectionalParticleSpeed={0.01}\n//         onNodeDragEnd={(node) => {\n//           node.fx = node.x;\n//           node.fy = node.y;\n//           node.fz = node.z;\n//         }}\n//         nodeThreeObject={({ type }) => {\n//           let imgTexture = null;\n//           if (type === \"DB\") {\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\n//           } else if (type === \"PC\") {\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\n//           }\n//           const material = new THREE.SpriteMaterial({ map: imgTexture });\n//           const sprite = new THREE.Sprite(material);\n//           sprite.scale.set(12, 12);\n//           return sprite;\n//         }}\n//       />\n//     </div>\n//   );\n// }\n// export default AppNetworkTopology;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppNetworkTopology\");","map":{"version":3,"sources":["C:/SourceTree/capstone-project/src/NetworkTopology.js"],"names":["React","ForceGraph3D","DeviceDrawer","THREE","AppNetworkTopology","state","deviceDetailsObject","drawerStatus","handleRightClick","node","setState","closeDrawer","nodes","id","name","type","value","os","mac_addr","links","source","target","fx","x","fy","y","fz","z","imgTexture","TextureLoader","load","material","SpriteMaterial","map","sprite","Sprite","scale","set"],"mappings":";AAAA,OAAO,oBAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB,C,CACA;;;;AAEA,SAASC,kBAAT,GAA8B;AAC5B;AACAC,EAAAA,KAAK,GAAG;AACNC,IAAAA,mBAAmB,EAAE,EADf;AAENC,IAAAA,YAAY,EAAE;AAFR,GAAR,CAF4B,CAO5B;AACA;;AACAC,EAAAA,gBAAgB,GAAIC,IAAD,IAAU;AAC3B,SAAKC,QAAL,CAAc;AAAEJ,MAAAA,mBAAmB,EAAEG,IAAvB;AAA6BF,MAAAA,YAAY,EAAE;AAA3C,KAAd;AACD,GAFD;;AAIAI,EAAAA,WAAW,GAAG,MAAM;AAClB,SAAKD,QAAL,CAAc;AAAEH,MAAAA,YAAY,EAAE;AAAhB,KAAd;AACD,GAFD;;AAGA,sBACE;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAE,KAAKI;AAAtB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,YAAD;AACE,MAAA,aAAa,EAAE,KAAKN,KAAL,CAAWC,mBAD5B;AAEE,MAAA,YAAY,EAAE,KAAKD,KAAL,CAAWE;AAF3B;AAAA;AAAA;AAAA;AAAA,YAFF,eAME,QAAC,YAAD;AACE,MAAA,SAAS,EAAE;AACTK,QAAAA,KAAK,EAAE,CACL;AACEC,UAAAA,EAAE,EAAE,eADN;AAEEC,UAAAA,IAAI,EAAE,OAFR;AAGEC,UAAAA,IAAI,EAAE,IAHR;AAIEC,UAAAA,KAAK,EAAE,GAJT;AAKEC,UAAAA,EAAE,EAAE,OALN;AAMEC,UAAAA,QAAQ,EAAE;AANZ,SADK,EASL;AACEL,UAAAA,EAAE,EAAE,eADN;AAEEC,UAAAA,IAAI,EAAE,OAFR;AAGEC,UAAAA,IAAI,EAAE,IAHR;AAIEC,UAAAA,KAAK,EAAE,GAJT;AAKEC,UAAAA,EAAE,EAAE,YALN;AAMEC,UAAAA,QAAQ,EAAE;AANZ,SATK,EAiBL;AACEL,UAAAA,EAAE,EAAE,eADN;AAEEC,UAAAA,IAAI,EAAE,OAFR;AAGEC,UAAAA,IAAI,EAAE,IAHR;AAIEC,UAAAA,KAAK,EAAE,GAJT;AAKEC,UAAAA,EAAE,EAAE,YALN;AAMEC,UAAAA,QAAQ,EAAE;AANZ,SAjBK,CADE;AA2BTC,QAAAA,KAAK,EAAE,CACL;AACEC,UAAAA,MAAM,EAAE,eADV;AAEEC,UAAAA,MAAM,EAAE;AAFV,SADK,EAKL;AACED,UAAAA,MAAM,EAAE,eADV;AAEEC,UAAAA,MAAM,EAAE;AAFV,SALK,EASL;AACED,UAAAA,MAAM,EAAE,eADV;AAEEC,UAAAA,MAAM,EAAE;AAFV,SATK;AA3BE,OADb;AA2CE,MAAA,gBAAgB,EAAE,KAAKb,gBA3CzB;AA4CE,MAAA,wBAAwB,EAAE,CA5C5B;AA6CE,MAAA,4BAA4B,EAAE,IA7ChC;AA8CE,MAAA,aAAa,EAAGC,IAAD,IAAU;AACvBA,QAAAA,IAAI,CAACa,EAAL,GAAUb,IAAI,CAACc,CAAf;AACAd,QAAAA,IAAI,CAACe,EAAL,GAAUf,IAAI,CAACgB,CAAf;AACAhB,QAAAA,IAAI,CAACiB,EAAL,GAAUjB,IAAI,CAACkB,CAAf;AACD,OAlDH;AAmDE,MAAA,eAAe,EAAE,QAAc;AAAA,YAAb;AAAEZ,UAAAA;AAAF,SAAa;AAC7B,YAAIa,UAAU,GAAG,IAAjB;;AACA,YAAIb,IAAI,KAAK,IAAb,EAAmB;AACjBa,UAAAA,UAAU,GAAG,IAAIzB,KAAK,CAAC0B,aAAV,GAA0BC,IAA1B,CAA+B,mBAA/B,CAAb;AACD,SAFD,MAEO,IAAIf,IAAI,KAAK,IAAb,EAAmB;AACxBa,UAAAA,UAAU,GAAG,IAAIzB,KAAK,CAAC0B,aAAV,GAA0BC,IAA1B,CAA+B,mBAA/B,CAAb;AACD;;AAED,cAAMC,QAAQ,GAAG,IAAI5B,KAAK,CAAC6B,cAAV,CAAyB;AAAEC,UAAAA,GAAG,EAAEL;AAAP,SAAzB,CAAjB;AACA,cAAMM,MAAM,GAAG,IAAI/B,KAAK,CAACgC,MAAV,CAAiBJ,QAAjB,CAAf;AACAG,QAAAA,MAAM,CAACE,KAAP,CAAaC,GAAb,CAAiB,EAAjB,EAAqB,EAArB;AAEA,eAAOH,MAAP;AACD;AAhEH;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2ED;;KA3FQ9B,kB;AA6FT,eAAeA,kBAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import \"antd/dist/antd.css\";\nimport React from \"react\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport DeviceDrawer from \"./Components/DrawerDevice\";\nimport * as THREE from \"three\";\n// import testingData from \"./Components/Data/testdata.json\";\n\nfunction AppNetworkTopology() {\n  // Initial state for deviceDetailsObject & drawerStatus\n  state = {\n    deviceDetailsObject: {},\n    drawerStatus: false,\n  };\n\n  // On right-click on icon on network topology, pass the object to handleRightClick()\n  // Set deviceDetailsObject as node\n  handleRightClick = (node) => {\n    this.setState({ deviceDetailsObject: node, drawerStatus: true });\n  };\n\n  closeDrawer = () => {\n    this.setState({ drawerStatus: false });\n  };\n  return (\n    <div>\n      <button onClick={this.closeDrawer}></button>\n      <DeviceDrawer\n        deviceDetails={this.state.deviceDetailsObject}\n        drawerStatus={this.state.drawerStatus}\n      />\n      <ForceGraph3D\n        graphData={{\n          nodes: [\n            {\n              id: \"192.168.1.100\",\n              name: \"DB-01\",\n              type: \"DB\",\n              value: \"1\",\n              os: \"Linux\",\n              mac_addr: \"aa:aa:aa:aa:aa:aa\",\n            },\n            {\n              id: \"192.168.1.101\",\n              name: \"PC-01\",\n              type: \"PC\",\n              value: \"1\",\n              os: \"Windows 10\",\n              mac_addr: \"bb:bb:bb:bb:bb:bb\",\n            },\n            {\n              id: \"192.168.1.102\",\n              name: \"PC-02\",\n              type: \"PC\",\n              value: \"1\",\n              os: \"Windows 10\",\n              mac_addr: \"cc:cc:cc:cc:cc:cc\",\n            },\n          ],\n          links: [\n            {\n              source: \"192.168.1.100\",\n              target: \"192.168.1.101\",\n            },\n            {\n              source: \"192.168.1.101\",\n              target: \"192.168.1.102\",\n            },\n            {\n              source: \"192.168.1.100\",\n              target: \"192.168.1.102\",\n            },\n          ],\n        }}\n        onNodeRightClick={this.handleRightClick}\n        linkDirectionalParticles={1}\n        linkDirectionalParticleSpeed={0.01}\n        onNodeDragEnd={(node) => {\n          node.fx = node.x;\n          node.fy = node.y;\n          node.fz = node.z;\n        }}\n        nodeThreeObject={({ type }) => {\n          let imgTexture = null;\n          if (type === \"DB\") {\n            imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\n          } else if (type === \"PC\") {\n            imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\n          }\n\n          const material = new THREE.SpriteMaterial({ map: imgTexture });\n          const sprite = new THREE.Sprite(material);\n          sprite.scale.set(12, 12);\n\n          return sprite;\n        }}\n      />\n    </div>\n  );\n}\n\nexport default AppNetworkTopology;\n\n// handleClick = (node) => {\n//   const getHostName = testingData.filter((thisDevice) =>\n//     thisDevice.id.includes(node.id)\n//   );\n//   getHostName.map((deviceDetails) => {\n//     // alert(deviceDetails.os);\n//     this.setState({ deviceDetailsObject: deviceDetails });\n//   });\n// };\n\n// import NetworkDrawer from \"./Components/DrawerNetwork\";\n\n// function AppNetworkTopology() {\n//   const [name] = useState(\"Tarun\");\n\n//   const handleClick = (node) => {\n//     const getHostName = testingData.filter((thisDevice) =>\n//       thisDevice.id.includes(node.id)\n//     );\n//     getHostName.map((deviceDetails) => {\n//       alert(deviceDetails.os);\n//       return <DeviceDrawer name={name} />;\n//     });\n//   };\n//   return (\n//     <div>\n//       <DeviceDrawer />\n//       <ForceGraph3D\n//         graphData={{\n//           nodes: [\n//             {\n//               id: \"192.168.1.100\",\n//               name: \"DB-01\",\n//               type: \"DB\",\n//               value: \"1\",\n//               os: \"Linux\",\n//               mac_addr: \"aa:aa:aa:aa:aa:aa\",\n//             },\n//             {\n//               id: \"192.168.1.101\",\n//               name: \"PC-01\",\n//               type: \"PC\",\n//               value: \"1\",\n//               mac_addr: \"bb:bb:bb:bb:bb:bb\",\n//             },\n//             {\n//               id: \"192.168.1.102\",\n//               name: \"PC-02\",\n//               type: \"PC\",\n//               value: \"1\",\n//               mac_addr: \"cc:cc:cc:cc:cc:cc\",\n//             },\n//           ],\n//           links: [\n//             {\n//               source: \"192.168.1.100\",\n//               target: \"192.168.1.101\",\n//             },\n//             {\n//               source: \"192.168.1.101\",\n//               target: \"192.168.1.102\",\n//             },\n//             {\n//               source: \"192.168.1.100\",\n//               target: \"192.168.1.102\",\n//             },\n//           ],\n//         }}\n//         onNodeRightClick={handleClick}\n//         linkDirectionalParticles={1}\n//         linkDirectionalParticleSpeed={0.01}\n//         onNodeDragEnd={(node) => {\n//           node.fx = node.x;\n//           node.fy = node.y;\n//           node.fz = node.z;\n//         }}\n//         nodeThreeObject={({ type }) => {\n//           let imgTexture = null;\n//           if (type === \"DB\") {\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\n//           } else if (type === \"PC\") {\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\n//           }\n\n//           const material = new THREE.SpriteMaterial({ map: imgTexture });\n//           const sprite = new THREE.Sprite(material);\n//           sprite.scale.set(12, 12);\n\n//           return sprite;\n//         }}\n//       />\n//     </div>\n//   );\n// }\n\n// export default AppNetworkTopology;\n"]},"metadata":{},"sourceType":"module"}