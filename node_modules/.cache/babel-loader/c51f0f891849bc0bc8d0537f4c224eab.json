{"ast":null,"code":"var _jsxFileName = \"C:\\\\Capstone\\\\capstone-project\\\\src\\\\NetworkTopology.js\";\nimport \"antd/dist/antd.css\";\nimport { ForceGraph3D } from \"react-force-graph-3D\";\nimport React from \"react\";\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AppNetworkTopology() {\n  const handleClick = node => {\n    alert(node.id);\n  };\n\n  const imgs = [\"hosting.png\"];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ForceGraph3D, {\n      graphData: genRandomTree(20)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n\n_c = AppNetworkTopology;\n\nfunction genRandomTree() {\n  let N = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 300;\n  let reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return {\n    nodes: [...Array(N).keys()].map(i => ({\n      id: i\n    })),\n    links: [...Array(N).keys()].filter(id => id).map(id => ({\n      [reverse ? \"target\" : \"source\"]: id,\n      [reverse ? \"source\" : \"target\"]: Math.round(Math.random() * (id - 1))\n    }))\n  };\n}\n\nexport default AppNetworkTopology;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppNetworkTopology\");","map":{"version":3,"sources":["C:/Capstone/capstone-project/src/NetworkTopology.js"],"names":["ForceGraph3D","React","THREE","AppNetworkTopology","handleClick","node","alert","id","imgs","genRandomTree","N","reverse","nodes","Array","keys","map","i","links","filter","Math","round","random"],"mappings":";AAAA,OAAO,oBAAP;AACA,SAASA,YAAT,QAA6B,sBAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;;AAEA,SAASC,kBAAT,GAA8B;AAC5B,QAAMC,WAAW,GAAIC,IAAD,IAAU;AAC5BC,IAAAA,KAAK,CAACD,IAAI,CAACE,EAAN,CAAL;AACD,GAFD;;AAIA,QAAMC,IAAI,GAAG,CAAC,aAAD,CAAb;AAEA,sBACE;AAAA,2BACE,QAAC,YAAD;AAAc,MAAA,SAAS,EAAEC,aAAa,CAAC,EAAD;AAAtC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;KAZQN,kB;;AAcT,SAASM,aAAT,GAAiD;AAAA,MAA1BC,CAA0B,uEAAtB,GAAsB;AAAA,MAAjBC,OAAiB,uEAAP,KAAO;AAC/C,SAAO;AACLC,IAAAA,KAAK,EAAE,CAAC,GAAGC,KAAK,CAACH,CAAD,CAAL,CAASI,IAAT,EAAJ,EAAqBC,GAArB,CAA0BC,CAAD,KAAQ;AAAET,MAAAA,EAAE,EAAES;AAAN,KAAR,CAAzB,CADF;AAELC,IAAAA,KAAK,EAAE,CAAC,GAAGJ,KAAK,CAACH,CAAD,CAAL,CAASI,IAAT,EAAJ,EACJI,MADI,CACIX,EAAD,IAAQA,EADX,EAEJQ,GAFI,CAECR,EAAD,KAAS;AACZ,OAACI,OAAO,GAAG,QAAH,GAAc,QAAtB,GAAiCJ,EADrB;AAEZ,OAACI,OAAO,GAAG,QAAH,GAAc,QAAtB,GAAiCQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBd,EAAE,GAAG,CAAtB,CAAX;AAFrB,KAAT,CAFA;AAFF,GAAP;AASD;;AAED,eAAeJ,kBAAf","sourcesContent":["import \"antd/dist/antd.css\";\nimport { ForceGraph3D } from \"react-force-graph-3D\";\nimport React from \"react\";\nimport * as THREE from \"three\";\n\nfunction AppNetworkTopology() {\n  const handleClick = (node) => {\n    alert(node.id);\n  };\n\n  const imgs = [\"hosting.png\"];\n\n  return (\n    <div>\n      <ForceGraph3D graphData={genRandomTree(20)} />\n    </div>\n  );\n}\n\nfunction genRandomTree(N = 300, reverse = false) {\n  return {\n    nodes: [...Array(N).keys()].map((i) => ({ id: i })),\n    links: [...Array(N).keys()]\n      .filter((id) => id)\n      .map((id) => ({\n        [reverse ? \"target\" : \"source\"]: id,\n        [reverse ? \"source\" : \"target\"]: Math.round(Math.random() * (id - 1)),\n      })),\n  };\n}\n\nexport default AppNetworkTopology;\n"]},"metadata":{},"sourceType":"module"}