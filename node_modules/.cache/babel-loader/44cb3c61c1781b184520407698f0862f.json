{"ast":null,"code":"import _regeneratorRuntime from\"C:/SourceTree/capstone-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/SourceTree/capstone-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/SourceTree/capstone-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import\"antd/dist/antd.css\";import{Layout,Button,Affix}from\"antd\";import React,{useState,useRef,useCallback,useEffect}from\"react\";import{ForceGraph3D}from\"react-force-graph\";import*as THREE from\"three\";import networkData from\"./Components/Data/network.json\";import device_data from\"./Components/Data/device_data.json\";import relation_data from\"./Components/Data/relation_data.json\";import DeviceDrawer from\"./Components/DrawerDevice\";import NetworkDrawer from\"./Components/DrawerNetwork\";// Functional Component for Network Topology Graph Page UI\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function AppNetworkTopology(){// UseState() functions for maintaining the states\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),deviceDrawerStatus=_useState2[0],setDeviceDrawerStatus=_useState2[1];// To open / close the Device Drawer component\nvar _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),networkDrawerStatus=_useState4[0],setNetworkDrawerStatus=_useState4[1];// To open / close the Network Drawer component\nvar _useState5=useState({}),_useState6=_slicedToArray(_useState5,2),networkDetails=_useState6[0],setNetworkDetails=_useState6[1];// To store / set the network details for rendering\nvar _useState7=useState(),_useState8=_slicedToArray(_useState7,2),groupByDevice=_useState8[0],setGroupByDevice=_useState8[1];// To store the number of devices by device type (for statistical boxes)\nvar _useState9=useState(),_useState10=_slicedToArray(_useState9,2),deviceCounter=_useState10[0],setDeviceCounter=_useState10[1];// To store the total number devices (for statistical boxes)\nvar _useState11=useState(),_useState12=_slicedToArray(_useState11,2),hoverNode=_useState12[0],setHoverNode=_useState12[1];// To store the details of the selected network node (Network Topology Graph)\nvar _useState13=useState({}),_useState14=_slicedToArray(_useState13,2),deviceConnected=_useState14[0],setDeviceConnected=_useState14[1];// To store the adjacent devices (after user click on the network node)\nvar _useState15=useState([]),_useState16=_slicedToArray(_useState15,2),alertData=_useState16[0],setAlertData=_useState16[1];// To store the information\n// Run functions onload (similar to componentDidMount)\nuseEffect(function(){setGroupByDevice(groupByDeviceType());// Counts the number of devices (sort by statuses). Stores output into groupByDevice (via setGroupByDevice)\nsetDeviceCounter(device_data.length);// Store the number of devices (determined by length of device_data) into deviceCounter (via setDeviceCounter)\nsetNetworkDetails(networkData[0]);// Store the network details (determined by networkData[0]) into networkDetails (via setNetworkDetails)\ngetData();// Retrieves alerts data from JSON Server and stores output into alertData (via setAlertData())\n},[]);// getData() function that utilises the fetch API to retrieve data from the JSON Server\n// After data is retrieved, data is stored in alertData (via setAlertData)\nvar getData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"http://localhost:3001/alerts\").then(function(response){return response.json();}).then(function(data){return setAlertData(data);}).catch(function(err){return console.log(err);});case 2:case\"end\":return _context.stop();}}},_callee);}));return function getData(){return _ref.apply(this,arguments);};}();// Function to set the Device Drawer's \"visible\" state to \"true\"\nvar openDeviceDrawer=function openDeviceDrawer(){setDeviceDrawerStatus(true);};// Function to set the Device Drawer's \"visible\" state to \"false\"\nvar closeDeviceDrawer=function closeDeviceDrawer(){setDeviceDrawerStatus(false);};// Function to set the Network Drawer's \"visible\" state to \"true\"\nvar openNetworkDrawer=function openNetworkDrawer(){setNetworkDrawerStatus(true);};// Function to set the Network Drawer's \"visible\" state to \"false\"\nvar closeNetworkDrawer=function closeNetworkDrawer(){setNetworkDrawerStatus(false);};// Function to open the Network Drawer Component and closes the Device Drawer Component\n// closeDeviceDrawer() - Closes the Device Drawer component\n// openNetworkDrawer() - Opens the Network Drawer Component\nvar handleNetworkStatisticsButton=function handleNetworkStatisticsButton(){closeDeviceDrawer();openNetworkDrawer();};// Function to sort the devices by statuses\n// Returns array containing the number of devices by statuses\nvar groupByDeviceType=function groupByDeviceType(){var result={};for(var i=0;i<device_data.length;i++){if(!result[device_data[i][\"status\"]]){result[device_data[i][\"status\"]]=0;}result[device_data[i][\"status\"]]++;}return result;};// Function that counts the number of adjacent devices connected to the selected network node\nvar connectedDeviceCounter=function connectedDeviceCounter(hoverNode){var connectedDeviceArray=[];for(var d=0;d<relation_data.length;d++){if(relation_data[d].source.id===hoverNode.id){connectedDeviceArray.push(relation_data[d].target.id);}// else if (relation_data[d].target.id === hoverNode.id) {\n//   connectedDeviceArray.push(relation_data[d].source.id);\n// }\n}return connectedDeviceArray;};// graphUseRef hook to allow data persistence\nvar graphUseRef=useRef();// Function to zoom towards the selected network node and opens Device Drawer Component\n// setHoverNode() - Store the selected node's details into the hoverNode (via setHoverNode())\n// openDeviceDrawer() - Opens the Device Drawer Component\n// closeNetworkDrawer() - Closes the Network Drawer Component\nvar zoomInNode=useCallback(function(node){setHoverNode(node);openDeviceDrawer();closeNetworkDrawer();setDeviceConnected(connectedDeviceCounter(node));// Camera distance of node\nvar distance=150;var distRatio=1+distance/Math.hypot(node.x,node.y,node.z);graphUseRef.current.cameraPosition({x:node.x*distRatio,y:node.y*distRatio,z:node.z*distRatio},// new position\nnode,// lookAt ({ x, y, z })\n1500// ms transition duration\n);},[graphUseRef]);function determineNodeIcon(hoverNode){var _iconList$hoverNode$s;var iconList={Active:\"assets/online_db_selected.png\",Inactive:\"assets/inactive_db_selected.png\",Offline:\"assets/offline_db_selected.png\"};return(_iconList$hoverNode$s=iconList[hoverNode.status])!==null&&_iconList$hoverNode$s!==void 0?_iconList$hoverNode$s:\"NA\";}// Function that updates all the icons in the Network Topology Graph Component\nvar updateNodeIcons=useCallback(function(node){var imgTexture=null;// Resets the imgTexture (image used for icon design)\n// Update selected node icon\nif(node===hoverNode){// If the node is a \"Database\"\nif(node.type===\"DB\"){// If the \"Database\" node is \"Active\"\nif(node.status===\"Active\"){imgTexture=new THREE.TextureLoader().load(\"assets/online_db_selected.png\");// If the \"Database\" node is \"Inactive\"\n}else if(node.status===\"Inactive\"){imgTexture=new THREE.TextureLoader().load(\"assets/inactive_db_selected.png\");// If the \"Database\" node is \"Offline\"\n}else{imgTexture=new THREE.TextureLoader().load(\"assets/offline_db_selected.png\");}// If the node is a \"PC\"\n}else if(node.type===\"PC\"){// If the \"PC\" node is \"Active\"\nif(node.status===\"Active\"){imgTexture=new THREE.TextureLoader().load(\"assets/online_pc_selected.png\");// If the \"PC\" node is \"Inactive\"\n}else if(node.status===\"Inactive\"){imgTexture=new THREE.TextureLoader().load(\"assets/inactive_pc_selected.png\");// If the \"PC\" node is \"Offline\"\n}else{imgTexture=new THREE.TextureLoader().load(\"assets/offline_pc_selected.png\");}// If the node is a \"Router\"\n}else if(node.type===\"Router\"){// If the \"Router\" node is a \"Active\"\nif(node.status===\"Active\"){imgTexture=new THREE.TextureLoader().load(\"assets/online_router_selected.png\");// If the \"Router\" node is a \"Inactive\"\n}else if(node.status===\"Inactive\"){imgTexture=new THREE.TextureLoader().load(\"assets/inactive_router_selected.png\");// If the \"Router\" node is a \"Offline\"\n}else{imgTexture=new THREE.TextureLoader().load(\"assets/offline_router_selected.png\");}}// For nodes that are not selected\n}else{if(node.type===\"DB\"){if(node.status===\"Active\"){imgTexture=new THREE.TextureLoader().load(\"assets/online_db.png\");}else if(node.status===\"Inactive\"){imgTexture=new THREE.TextureLoader().load(\"assets/inactive_db.png\");}else{imgTexture=new THREE.TextureLoader().load(\"assets/offline_db.png\");}}else if(node.type===\"PC\"){if(node.status===\"Active\"){imgTexture=new THREE.TextureLoader().load(\"assets/online_pc.png\");}else if(node.status===\"Inactive\"){imgTexture=new THREE.TextureLoader().load(\"assets/inactive_pc.png\");}else{imgTexture=new THREE.TextureLoader().load(\"assets/offline_pc.png\");}}else if(node.type===\"Router\"){if(node.status===\"Active\"){imgTexture=new THREE.TextureLoader().load(\"assets/online_router.png\");}else if(node.status===\"Inactive\"){imgTexture=new THREE.TextureLoader().load(\"assets/inactive_router.png\");}else{imgTexture=new THREE.TextureLoader().load(\"assets/offline_router.png\");}}}var material=new THREE.SpriteMaterial({map:imgTexture});var sprite=new THREE.Sprite(material);sprite.scale.set(12,12);return sprite;},[hoverNode]);// <Layout style={{ marginLeft: 199, zIndex: -1 }}>\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Layout,{children:/*#__PURE__*/_jsx(ForceGraph3D,{width:window.innerWidth,height:window.innerHeight-1,ref:graphUseRef,graphData:{nodes:device_data,links:relation_data},nodeLabel:function nodeLabel(node){return\"<div style=\\\"background: #1F1E26; padding: 5px 10px 8px 10px; border-radius: 10px; user-select: none\\\">\\n            <span>Name: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>\".concat(node.name,\"</b></span><br/>\\n            <span>IP Addr: &nbsp;&nbsp;&nbsp;&nbsp;<b>\").concat(node.id,\"</b></span><br/>\\n            <span>Mac Addr: &nbsp;<b>\").concat(node.mac_addr,\"</b></span>\\n            </div>\");},linkWidth:1,onNodeRightClick:zoomInNode// onNodeHover={handleNodeHover}\n// linkDirectionalParticles={1}\n// linkDirectionalParticleSpeed={0.01}\n// onNodeHover={handleHover}\n// onNodeDragEnd={(node) => {\n//   node.fx = node.x;\n//   node.fy = node.y;\n//   node.fz = node.z;\n// }}\n,nodeThreeObject:updateNodeIcons})}),/*#__PURE__*/_jsx(Affix,{style:{position:\"absolute\",top:120,left:10,zIndex:1},children:/*#__PURE__*/_jsx(Button,{type:\"primary\",onClick:handleNetworkStatisticsButton,children:\"Show Network Statistics\"})}),/*#__PURE__*/_jsx(DeviceDrawer,{deviceDrawerStatus:deviceDrawerStatus,deviceDetails:hoverNode,closeDeviceDrawer:closeDeviceDrawer,alertData:alertData,deviceConnected:deviceConnected}),/*#__PURE__*/_jsx(NetworkDrawer,{networkDrawerStatus:networkDrawerStatus,networkDetails:networkDetails,groupByDevice:groupByDevice,deviceCounter:deviceCounter,closeNetworkDrawer:closeNetworkDrawer,alertData:alertData})]});}export default AppNetworkTopology;","map":{"version":3,"sources":["C:/SourceTree/capstone-project/src/NetworkTopology.js"],"names":["Layout","Button","Affix","React","useState","useRef","useCallback","useEffect","ForceGraph3D","THREE","networkData","device_data","relation_data","DeviceDrawer","NetworkDrawer","AppNetworkTopology","deviceDrawerStatus","setDeviceDrawerStatus","networkDrawerStatus","setNetworkDrawerStatus","networkDetails","setNetworkDetails","groupByDevice","setGroupByDevice","deviceCounter","setDeviceCounter","hoverNode","setHoverNode","deviceConnected","setDeviceConnected","alertData","setAlertData","groupByDeviceType","length","getData","fetch","then","response","json","data","catch","err","console","log","openDeviceDrawer","closeDeviceDrawer","openNetworkDrawer","closeNetworkDrawer","handleNetworkStatisticsButton","result","i","connectedDeviceCounter","connectedDeviceArray","d","source","id","push","target","graphUseRef","zoomInNode","node","distance","distRatio","Math","hypot","x","y","z","current","cameraPosition","determineNodeIcon","iconList","Active","Inactive","Offline","status","updateNodeIcons","imgTexture","type","TextureLoader","load","material","SpriteMaterial","map","sprite","Sprite","scale","set","window","innerWidth","innerHeight","nodes","links","name","mac_addr","position","top","left","zIndex"],"mappings":"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","sourcesContent":["import \"antd/dist/antd.css\";\r\nimport { Layout, Button, Affix } from \"antd\";\r\n\r\nimport React, { useState, useRef, useCallback, useEffect } from \"react\";\r\n\r\nimport { ForceGraph3D } from \"react-force-graph\";\r\nimport * as THREE from \"three\";\r\n\r\nimport networkData from \"./Components/Data/network.json\";\r\nimport device_data from \"./Components/Data/device_data.json\";\r\nimport relation_data from \"./Components/Data/relation_data.json\";\r\n\r\nimport DeviceDrawer from \"./Components/DrawerDevice\";\r\nimport NetworkDrawer from \"./Components/DrawerNetwork\";\r\n\r\n// Functional Component for Network Topology Graph Page UI\r\nfunction AppNetworkTopology() {\r\n  // UseState() functions for maintaining the states\r\n  const [deviceDrawerStatus, setDeviceDrawerStatus] = useState(false); // To open / close the Device Drawer component\r\n  const [networkDrawerStatus, setNetworkDrawerStatus] = useState(false); // To open / close the Network Drawer component\r\n  const [networkDetails, setNetworkDetails] = useState({}); // To store / set the network details for rendering\r\n  const [groupByDevice, setGroupByDevice] = useState(); // To store the number of devices by device type (for statistical boxes)\r\n  const [deviceCounter, setDeviceCounter] = useState(); // To store the total number devices (for statistical boxes)\r\n  const [hoverNode, setHoverNode] = useState(); // To store the details of the selected network node (Network Topology Graph)\r\n  const [deviceConnected, setDeviceConnected] = useState({}); // To store the adjacent devices (after user click on the network node)\r\n  const [alertData, setAlertData] = useState([]); // To store the information\r\n\r\n  // Run functions onload (similar to componentDidMount)\r\n  useEffect(() => {\r\n    setGroupByDevice(groupByDeviceType()); // Counts the number of devices (sort by statuses). Stores output into groupByDevice (via setGroupByDevice)\r\n    setDeviceCounter(device_data.length); // Store the number of devices (determined by length of device_data) into deviceCounter (via setDeviceCounter)\r\n    setNetworkDetails(networkData[0]); // Store the network details (determined by networkData[0]) into networkDetails (via setNetworkDetails)\r\n    getData(); // Retrieves alerts data from JSON Server and stores output into alertData (via setAlertData())\r\n  }, []);\r\n\r\n  // getData() function that utilises the fetch API to retrieve data from the JSON Server\r\n  // After data is retrieved, data is stored in alertData (via setAlertData)\r\n  const getData = async () => {\r\n    await fetch(\"http://localhost:3001/alerts\")\r\n      .then((response) => response.json())\r\n      .then((data) => setAlertData(data))\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  // Function to set the Device Drawer's \"visible\" state to \"true\"\r\n  const openDeviceDrawer = () => {\r\n    setDeviceDrawerStatus(true);\r\n  };\r\n\r\n  // Function to set the Device Drawer's \"visible\" state to \"false\"\r\n  const closeDeviceDrawer = () => {\r\n    setDeviceDrawerStatus(false);\r\n  };\r\n\r\n  // Function to set the Network Drawer's \"visible\" state to \"true\"\r\n  const openNetworkDrawer = () => {\r\n    setNetworkDrawerStatus(true);\r\n  };\r\n\r\n  // Function to set the Network Drawer's \"visible\" state to \"false\"\r\n  const closeNetworkDrawer = () => {\r\n    setNetworkDrawerStatus(false);\r\n  };\r\n\r\n  // Function to open the Network Drawer Component and closes the Device Drawer Component\r\n  // closeDeviceDrawer() - Closes the Device Drawer component\r\n  // openNetworkDrawer() - Opens the Network Drawer Component\r\n  const handleNetworkStatisticsButton = () => {\r\n    closeDeviceDrawer();\r\n    openNetworkDrawer();\r\n  };\r\n\r\n  // Function to sort the devices by statuses\r\n  // Returns array containing the number of devices by statuses\r\n  const groupByDeviceType = () => {\r\n    let result = {};\r\n    for (let i = 0; i < device_data.length; i++) {\r\n      if (!result[device_data[i][\"status\"]]) {\r\n        result[device_data[i][\"status\"]] = 0;\r\n      }\r\n      result[device_data[i][\"status\"]]++;\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // Function that counts the number of adjacent devices connected to the selected network node\r\n  const connectedDeviceCounter = (hoverNode) => {\r\n    let connectedDeviceArray = [];\r\n\r\n    for (let d = 0; d < relation_data.length; d++) {\r\n      if (relation_data[d].source.id === hoverNode.id) {\r\n        connectedDeviceArray.push(relation_data[d].target.id);\r\n      }\r\n      // else if (relation_data[d].target.id === hoverNode.id) {\r\n      //   connectedDeviceArray.push(relation_data[d].source.id);\r\n      // }\r\n    }\r\n    return connectedDeviceArray;\r\n  };\r\n\r\n  // graphUseRef hook to allow data persistence\r\n  const graphUseRef = useRef();\r\n\r\n  // Function to zoom towards the selected network node and opens Device Drawer Component\r\n  // setHoverNode() - Store the selected node's details into the hoverNode (via setHoverNode())\r\n  // openDeviceDrawer() - Opens the Device Drawer Component\r\n  // closeNetworkDrawer() - Closes the Network Drawer Component\r\n  const zoomInNode = useCallback(\r\n    (node) => {\r\n      setHoverNode(node);\r\n      openDeviceDrawer();\r\n      closeNetworkDrawer();\r\n      setDeviceConnected(connectedDeviceCounter(node));\r\n\r\n      // Camera distance of node\r\n      const distance = 150;\r\n      const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\r\n\r\n      graphUseRef.current.cameraPosition(\r\n        {\r\n          x: node.x * distRatio,\r\n          y: node.y * distRatio,\r\n          z: node.z * distRatio,\r\n        }, // new position\r\n        node, // lookAt ({ x, y, z })\r\n        1500 // ms transition duration\r\n      );\r\n    },\r\n    [graphUseRef]\r\n  );\r\n\r\n  function determineNodeIcon(hoverNode) {\r\n    const iconList = {\r\n      Active: \"assets/online_db_selected.png\",\r\n      Inactive: \"assets/inactive_db_selected.png\",\r\n      Offline: \"assets/offline_db_selected.png\",\r\n    };\r\n\r\n    return iconList[hoverNode.status] ?? \"NA\";\r\n  }\r\n\r\n  // Function that updates all the icons in the Network Topology Graph Component\r\n  const updateNodeIcons = useCallback(\r\n    (node) => {\r\n      let imgTexture = null; // Resets the imgTexture (image used for icon design)\r\n\r\n      // Update selected node icon\r\n      if (node === hoverNode) {\r\n        // If the node is a \"Database\"\r\n        if (node.type === \"DB\") {\r\n          // If the \"Database\" node is \"Active\"\r\n          if (node.status === \"Active\") {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/online_db_selected.png\"\r\n            );\r\n            // If the \"Database\" node is \"Inactive\"\r\n          } else if (node.status === \"Inactive\") {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/inactive_db_selected.png\"\r\n            );\r\n            // If the \"Database\" node is \"Offline\"\r\n          } else {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/offline_db_selected.png\"\r\n            );\r\n          }\r\n          // If the node is a \"PC\"\r\n        } else if (node.type === \"PC\") {\r\n          // If the \"PC\" node is \"Active\"\r\n          if (node.status === \"Active\") {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/online_pc_selected.png\"\r\n            );\r\n            // If the \"PC\" node is \"Inactive\"\r\n          } else if (node.status === \"Inactive\") {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/inactive_pc_selected.png\"\r\n            );\r\n            // If the \"PC\" node is \"Offline\"\r\n          } else {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/offline_pc_selected.png\"\r\n            );\r\n          }\r\n          // If the node is a \"Router\"\r\n        } else if (node.type === \"Router\") {\r\n          // If the \"Router\" node is a \"Active\"\r\n          if (node.status === \"Active\") {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/online_router_selected.png\"\r\n            );\r\n            // If the \"Router\" node is a \"Inactive\"\r\n          } else if (node.status === \"Inactive\") {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/inactive_router_selected.png\"\r\n            );\r\n            // If the \"Router\" node is a \"Offline\"\r\n          } else {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/offline_router_selected.png\"\r\n            );\r\n          }\r\n        }\r\n\r\n        // For nodes that are not selected\r\n      } else {\r\n        if (node.type === \"DB\") {\r\n          if (node.status === \"Active\") {\r\n            imgTexture = new THREE.TextureLoader().load(\"assets/online_db.png\");\r\n          } else if (node.status === \"Inactive\") {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/inactive_db.png\"\r\n            );\r\n          } else {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/offline_db.png\"\r\n            );\r\n          }\r\n        } else if (node.type === \"PC\") {\r\n          if (node.status === \"Active\") {\r\n            imgTexture = new THREE.TextureLoader().load(\"assets/online_pc.png\");\r\n          } else if (node.status === \"Inactive\") {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/inactive_pc.png\"\r\n            );\r\n          } else {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/offline_pc.png\"\r\n            );\r\n          }\r\n        } else if (node.type === \"Router\") {\r\n          if (node.status === \"Active\") {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/online_router.png\"\r\n            );\r\n          } else if (node.status === \"Inactive\") {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/inactive_router.png\"\r\n            );\r\n          } else {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/offline_router.png\"\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      const material = new THREE.SpriteMaterial({ map: imgTexture });\r\n      const sprite = new THREE.Sprite(material);\r\n      sprite.scale.set(12, 12);\r\n\r\n      return sprite;\r\n    },\r\n    [hoverNode]\r\n  );\r\n\r\n  // <Layout style={{ marginLeft: 199, zIndex: -1 }}>\r\n\r\n  return (\r\n    <div>\r\n      <Layout>\r\n        <ForceGraph3D\r\n          width={window.innerWidth}\r\n          height={window.innerHeight - 1}\r\n          ref={graphUseRef}\r\n          graphData={{\r\n            nodes: device_data,\r\n            links: relation_data,\r\n          }}\r\n          nodeLabel={(node) =>\r\n            `<div style=\"background: #1F1E26; padding: 5px 10px 8px 10px; border-radius: 10px; user-select: none\">\r\n            <span>Name: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>${node.name}</b></span><br/>\r\n            <span>IP Addr: &nbsp;&nbsp;&nbsp;&nbsp;<b>${node.id}</b></span><br/>\r\n            <span>Mac Addr: &nbsp;<b>${node.mac_addr}</b></span>\r\n            </div>`\r\n          }\r\n          linkWidth={1}\r\n          onNodeRightClick={zoomInNode}\r\n          // onNodeHover={handleNodeHover}\r\n          // linkDirectionalParticles={1}\r\n          // linkDirectionalParticleSpeed={0.01}\r\n          // onNodeHover={handleHover}\r\n          // onNodeDragEnd={(node) => {\r\n          //   node.fx = node.x;\r\n          //   node.fy = node.y;\r\n          //   node.fz = node.z;\r\n          // }}\r\n          nodeThreeObject={updateNodeIcons}\r\n        />\r\n      </Layout>\r\n      <Affix style={{ position: \"absolute\", top: 120, left: 10, zIndex: 1 }}>\r\n        <Button type=\"primary\" onClick={handleNetworkStatisticsButton}>\r\n          Show Network Statistics\r\n        </Button>\r\n      </Affix>\r\n\r\n      <DeviceDrawer\r\n        deviceDrawerStatus={deviceDrawerStatus}\r\n        deviceDetails={hoverNode}\r\n        closeDeviceDrawer={closeDeviceDrawer}\r\n        alertData={alertData}\r\n        deviceConnected={deviceConnected}\r\n      />\r\n      <NetworkDrawer\r\n        networkDrawerStatus={networkDrawerStatus}\r\n        networkDetails={networkDetails}\r\n        groupByDevice={groupByDevice}\r\n        deviceCounter={deviceCounter}\r\n        closeNetworkDrawer={closeNetworkDrawer}\r\n        alertData={alertData}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppNetworkTopology;\r\n"]},"metadata":{},"sourceType":"module"}