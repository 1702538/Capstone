{"ast":null,"code":"var _jsxFileName = \"C:\\\\SourceTree\\\\capstone-project\\\\src\\\\NetworkTopology.js\";\nimport \"antd/dist/antd.css\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport React from \"react\";\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AppNetworkTopology() {\n  const handleClick = node => {\n    alert(node.id);\n  };\n\n  function updateHighlight() {\n    // trigger update of highlighted objects in scene\n    Graph.nodeColor(Graph.nodeColor()).linkWidth(Graph.linkWidth()).linkDirectionalParticles(Graph.linkDirectionalParticles());\n  } // const imgs = [\"hosting.png\"];\n\n\n  const highlightNodes = new Set();\n  const highlightLinks = new Set();\n  let hoverNode = null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ForceGraph3D, {\n      graphData: {\n        nodes: [{\n          id: \"192.168.1.100\",\n          name: \"DB-01\",\n          type: \"DB\",\n          value: \"10\"\n        }, {\n          id: \"192.168.1.101\",\n          name: \"PC-01\",\n          type: \"PC\",\n          value: \"1\"\n        }, {\n          id: \"192.168.1.102\",\n          name: \"PC-02\",\n          type: \"PC\",\n          value: \"1\"\n        }],\n        links: [{\n          source: \"192.168.1.100\",\n          target: \"192.168.1.101\"\n        }, {\n          source: \"192.168.1.101\",\n          target: \"192.168.1.102\"\n        }, {\n          source: \"192.168.1.100\",\n          target: \"192.168.1.102\"\n        }]\n      },\n      onNodeHover: node => {\n        // no state change\n        if (!node && !highlightNodes.size || node && hoverNode === node) return;\n        highlightNodes.clear();\n        highlightLinks.clear();\n\n        if (node) {\n          highlightNodes.add(node);\n          node.neighbors.forEach(neighbor => highlightNodes.add(neighbor));\n          node.links.forEach(link => highlightLinks.add(link));\n        }\n\n        hoverNode = node || null;\n        updateHighlight();\n      },\n      onLinkHover: link => {\n        highlightNodes.clear();\n        highlightLinks.clear();\n\n        if (link) {\n          highlightLinks.add(link);\n          highlightNodes.add(link.source);\n          highlightNodes.add(link.target);\n        }\n\n        updateHighlight();\n      },\n      onNodeRightClick: handleClick,\n      linkDirectionalParticles: 1,\n      linkDirectionalParticleSpeed: 0.01,\n      nodeThreeObject: _ref => {\n        let {\n          type\n        } = _ref;\n        let imgTexture = null;\n\n        if (type === \"DB\") {\n          imgTexture = new THREE.TextureLoader().load(`https://cdn-icons.flaticon.com/png/512/1043/premium/1043315.png?token=exp=1639038595~hmac=a9ae8e0051e2519aab494b49369ba6b8`);\n        } else {\n          imgTexture = new THREE.TextureLoader().load(`https://cdn-icons.flaticon.com/png/512/1043/premium/1043315.png?token=exp=1639038595~hmac=a9ae8e0051e2519aab494b49369ba6b8`);\n        }\n\n        const material = new THREE.SpriteMaterial({\n          map: imgTexture\n        });\n        const sprite = new THREE.Sprite(material);\n        sprite.scale.set(12, 12);\n        return sprite;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n\n_c = AppNetworkTopology;\n\nfunction genRandomTree() {\n  let N = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 300;\n  let reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return {\n    nodes: [...Array(N).keys()].map(i => ({\n      id: i\n    })),\n    links: [...Array(N).keys()].filter(id => id).map(id => ({\n      [reverse ? \"target\" : \"source\"]: id,\n      [reverse ? \"source\" : \"target\"]: Math.round(Math.random() * (id - 1))\n    }))\n  };\n}\n\nexport default AppNetworkTopology;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppNetworkTopology\");","map":{"version":3,"sources":["C:/SourceTree/capstone-project/src/NetworkTopology.js"],"names":["ForceGraph3D","React","THREE","AppNetworkTopology","handleClick","node","alert","id","updateHighlight","Graph","nodeColor","linkWidth","linkDirectionalParticles","highlightNodes","Set","highlightLinks","hoverNode","nodes","name","type","value","links","source","target","size","clear","add","neighbors","forEach","neighbor","link","imgTexture","TextureLoader","load","material","SpriteMaterial","map","sprite","Sprite","scale","set","genRandomTree","N","reverse","Array","keys","i","filter","Math","round","random"],"mappings":"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","sourcesContent":["import \"antd/dist/antd.css\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport React from \"react\";\nimport * as THREE from \"three\";\n\nfunction AppNetworkTopology() {\n  const handleClick = (node) => {\n    alert(node.id);\n  };\n\n  function updateHighlight() {\n    // trigger update of highlighted objects in scene\n    Graph.nodeColor(Graph.nodeColor())\n      .linkWidth(Graph.linkWidth())\n      .linkDirectionalParticles(Graph.linkDirectionalParticles());\n  }\n\n  // const imgs = [\"hosting.png\"];\n  const highlightNodes = new Set();\n  const highlightLinks = new Set();\n  let hoverNode = null;\n\n  return (\n    <div>\n      <ForceGraph3D\n        graphData={{\n          nodes: [\n            {\n              id: \"192.168.1.100\",\n              name: \"DB-01\",\n              type: \"DB\",\n              value: \"10\",\n            },\n            {\n              id: \"192.168.1.101\",\n              name: \"PC-01\",\n              type: \"PC\",\n              value: \"1\",\n            },\n            {\n              id: \"192.168.1.102\",\n              name: \"PC-02\",\n              type: \"PC\",\n              value: \"1\",\n            },\n          ],\n          links: [\n            {\n              source: \"192.168.1.100\",\n              target: \"192.168.1.101\",\n            },\n            {\n              source: \"192.168.1.101\",\n              target: \"192.168.1.102\",\n            },\n            {\n              source: \"192.168.1.100\",\n              target: \"192.168.1.102\",\n            },\n          ],\n        }}\n        onNodeHover={(node) => {\n          // no state change\n          if ((!node && !highlightNodes.size) || (node && hoverNode === node))\n            return;\n\n          highlightNodes.clear();\n          highlightLinks.clear();\n          if (node) {\n            highlightNodes.add(node);\n            node.neighbors.forEach((neighbor) => highlightNodes.add(neighbor));\n            node.links.forEach((link) => highlightLinks.add(link));\n          }\n\n          hoverNode = node || null;\n\n          updateHighlight();\n        }}\n        onLinkHover={(link) => {\n          highlightNodes.clear();\n          highlightLinks.clear();\n\n          if (link) {\n            highlightLinks.add(link);\n            highlightNodes.add(link.source);\n            highlightNodes.add(link.target);\n          }\n          updateHighlight();\n        }}\n        onNodeRightClick={handleClick}\n        linkDirectionalParticles={1}\n        linkDirectionalParticleSpeed={0.01}\n        nodeThreeObject={({ type }) => {\n          let imgTexture = null;\n          if (type === \"DB\") {\n            imgTexture = new THREE.TextureLoader().load(\n              `https://cdn-icons.flaticon.com/png/512/1043/premium/1043315.png?token=exp=1639038595~hmac=a9ae8e0051e2519aab494b49369ba6b8`\n            );\n          } else {\n            imgTexture = new THREE.TextureLoader().load(\n              `https://cdn-icons.flaticon.com/png/512/1043/premium/1043315.png?token=exp=1639038595~hmac=a9ae8e0051e2519aab494b49369ba6b8`\n            );\n          }\n\n          const material = new THREE.SpriteMaterial({ map: imgTexture });\n          const sprite = new THREE.Sprite(material);\n          sprite.scale.set(12, 12);\n\n          return sprite;\n        }}\n      />\n    </div>\n  );\n}\n\nfunction genRandomTree(N = 300, reverse = false) {\n  return {\n    nodes: [...Array(N).keys()].map((i) => ({ id: i })),\n    links: [...Array(N).keys()]\n      .filter((id) => id)\n      .map((id) => ({\n        [reverse ? \"target\" : \"source\"]: id,\n        [reverse ? \"source\" : \"target\"]: Math.round(Math.random() * (id - 1)),\n      })),\n  };\n}\n\nexport default AppNetworkTopology;\n"]},"metadata":{},"sourceType":"module"}