{"ast":null,"code":"var _jsxFileName = \"C:\\\\SourceTree\\\\capstone-project\\\\src\\\\NetworkTopology.js\",\n    _s = $RefreshSig$();\n\nimport \"antd/dist/antd.css\";\nimport React, { useState, useRef, useCallback } from \"react\";\nimport { Layout, Button, Affix } from \"antd\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport DeviceDrawer from \"./Components/DrawerDevice\";\nimport NetworkDrawer from \"./Components/DrawerNetwork\";\nimport * as THREE from \"three\";\nimport networkData from \"./Components/Data/network.json\";\nimport device_data from \"./Components/Data/device_data.json\";\nimport relation_data from \"./Components/Data/relation_data.json\"; // const ForceGraphComponent = React.memo((props) => {console.log(\"Child rendered\"); // For verification purposes\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AppNetworkTopology() {\n  _s();\n\n  const [deviceDrawerStatus, setDeviceDrawerStatus] = useState(false);\n  const [networkDrawerStatus, setNetworkDrawerStatus] = useState(false); // networkDrawerStatus={this.state.networkDrawerStatus}\n\n  const [deviceDetails, setDeviceDetails] = useState({});\n  const [networkDetails, setNetworkDetails] = useState({});\n  const [groupByDevice, setGroupByDevice] = useState();\n  const [deviceCounter, setDeviceCounter] = useState();\n  const [hoverNode, setHoverNode] = useState();\n\n  const closeDeviceDrawer = () => {\n    setDeviceDrawerStatus(false);\n  };\n\n  const closeNetworkDrawer = () => {\n    setNetworkDrawerStatus(false);\n  };\n\n  const handleNetworkStatisticsButton = () => {\n    setDeviceDrawerStatus(false);\n    setNetworkDrawerStatus(true);\n    setNetworkDetails(networkData[0]);\n    setDeviceCounter(device_data.length);\n    setGroupByDevice(groupByDeviceType());\n  }; // const groupByDeviceType = device_data.reduce((thisData, dev) => {\n  //   thisData[dev.status] = thisData[dev.status] + 1 || 1;\n  //   return thisData;\n  // }, {});\n\n\n  const groupByDeviceType = () => {\n    var result = {};\n\n    for (var i = 0; i < device_data.length; i++) {\n      if (!result[device_data[i][\"status\"]]) {\n        result[device_data[i][\"status\"]] = 0;\n      }\n\n      result[device_data[i][\"status\"]]++;\n    }\n\n    return result;\n  };\n\n  const fgRef = useRef();\n  const zoomInNode = useCallback(node => {\n    setDeviceDrawerStatus(true);\n    setNetworkDrawerStatus(false);\n    setDeviceDetails(node);\n    setHoverNode(node); // Camera distance of node\n\n    const distance = 150;\n    const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n    fgRef.current.cameraPosition({\n      x: node.x * distRatio,\n      y: node.y * distRatio,\n      z: node.z * distRatio\n    }, // new position\n    node, // lookAt ({ x, y, z })\n    1000 // ms transition duration\n    );\n  }, [fgRef]);\n  var this_array = [];\n\n  const handleNodeHover = node => {\n    this_array = [];\n\n    if (node) {//console.log(node);\n      //console.log(relation_data);\n      // for (var i = 0; i < relation_data.length; i++) {\n      //   if (relation_data[i].source.id === node.id) {\n      //     this_array.push(relation_data[i].target.id);\n      //   } else if (relation_data[i].target.id === node.id) {\n      //     this_array.push(relation_data[i].source.id);\n      //   }\n      // }\n      // console.log(this_array);\n    } else {// console.log(\"Nothing\");\n    }\n  };\n\n  const paintRing = useCallback(node => {\n    let imgTexture = null;\n    this_array = [];\n\n    if (hoverNode) {\n      console.log(\"HoverNode\", hoverNode);\n\n      for (var i = 0; i < relation_data.length; i++) {\n        if (relation_data[i].source.id === hoverNode.id) {\n          this_array.push(relation_data[i].target.id);\n        } else if (relation_data[i].target.id === hoverNode.id) {\n          this_array.push(relation_data[i].source.id);\n        }\n      }\n    } else {\n      imgTexture = new THREE.TextureLoader().load(\"assets/check.png\");\n    }\n\n    console.log(this_array);\n    imgTexture = new THREE.TextureLoader().load(\"assets/check.png\");\n\n    if (node === hoverNode) {\n      console.log(\"Hello\", node);\n\n      for (var i = 0; i < relation_data.length; i++) {\n        if (relation_data[i].source.id === node.id) {\n          this_array.push(relation_data[i].target.id);\n        } else if (relation_data[i].target.id === node.id) {\n          this_array.push(relation_data[i].source.id);\n        }\n      }\n\n      console.log(\"Connected to\", this_array);\n      console.log(\"============================================\");\n      imgTexture = new THREE.TextureLoader().load(\"assets/check.png\");\n    } else {\n      if (node.type === \"DB\") {\n        if (node.status === \"Active\") {\n          imgTexture = new THREE.TextureLoader().load(\"assets/online_db.png\");\n        } else if (node.status === \"Inactive\") {\n          imgTexture = new THREE.TextureLoader().load(\"assets/inactive_db.png\");\n        } else {\n          imgTexture = new THREE.TextureLoader().load(\"assets/offline_db.png\");\n        }\n      } else if (node.type === \"PC\") {\n        if (node.status === \"Active\") {\n          imgTexture = new THREE.TextureLoader().load(\"assets/online_pc.png\");\n        } else if (node.status === \"Inactive\") {\n          imgTexture = new THREE.TextureLoader().load(\"assets/inactive_pc.png\");\n        } else {\n          imgTexture = new THREE.TextureLoader().load(\"assets/offline_pc.png\");\n        }\n      } else if (node.type === \"Router\") {\n        if (node.status === \"Active\") {\n          imgTexture = new THREE.TextureLoader().load(\"assets/online_router.png\");\n        } else if (node.status === \"Inactive\") {\n          imgTexture = new THREE.TextureLoader().load(\"assets/inactive_router.png\");\n        } else {\n          imgTexture = new THREE.TextureLoader().load(\"assets/offline_router.png\");\n        }\n      }\n    }\n\n    const material = new THREE.SpriteMaterial({\n      map: imgTexture\n    });\n    const sprite = new THREE.Sprite(material);\n    sprite.scale.set(12, 12);\n    return sprite;\n  }); // <Layout style={{ marginLeft: 199, zIndex: -1 }}>\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      background: \"black\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(ForceGraph3D, {\n      ref: fgRef,\n      graphData: {\n        nodes: device_data,\n        links: relation_data\n      },\n      nodeLabel: node => `<div style=\"background: #1F1E26; padding: 5px 10px 8px 10px; border-radius: 10px; user-select: none\">\n            <span>Name: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>${node.name}</b></span><br/>\n            <span>IP Addr: &nbsp;&nbsp;&nbsp;&nbsp;<b>${node.id}</b></span><br/>\n            <span>Mac Addr: &nbsp;<b>${node.mac_addr}</b></span>\n            </div>`,\n      linkWidth: 2,\n      onNodeRightClick: zoomInNode,\n      linkDirectionalParticles: 1,\n      linkDirectionalParticleSpeed: 0.01,\n      onNodeHover: handleNodeHover // onNodeHover={handleHover}\n      // onNodeDragEnd={(node) => {\n      //   node.fx = node.x;\n      //   node.fy = node.y;\n      //   node.fz = node.z;\n      // }}\n      ,\n      nodeThreeObject: paintRing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Affix, {\n      style: {\n        position: \"absolute\",\n        top: 120,\n        left: 10\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: handleNetworkStatisticsButton,\n        children: \"Show Network Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DeviceDrawer, {\n      deviceDrawerStatus: deviceDrawerStatus,\n      deviceDetails: deviceDetails,\n      closeDeviceDrawer: closeDeviceDrawer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NetworkDrawer, {\n      networkDrawerStatus: networkDrawerStatus,\n      networkDetails: networkDetails,\n      groupByDevice: groupByDevice,\n      deviceCounter: deviceCounter,\n      closeNetworkDrawer: closeNetworkDrawer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AppNetworkTopology, \"VF8i5+7e9S6F1xTrgT8Ccx13vOk=\");\n\n_c = AppNetworkTopology;\nexport default AppNetworkTopology; // const groupByDeviceType = device_data.reduce((thisData, dev) => {\n//   thisData[dev.status] = thisData[dev.status] + 1 || 1;\n//   return thisData;\n// }, {});\n// function FocusGraph() {\n//   const fgRef = React.useRef;\n//   const handleClick = React.useCallback(\n//     (node) => {\n//       const distance = 40;\n//       const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n//       fgRef.current.cameraPosition(\n//         { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio }, // new position\n//         node, // lookAt ({ x, y, z })\n//         3000 // camera transition duration (in ms)\n//       );\n//     },\n//     [fgRef]\n//   );\n// }\n// // ForceGraphComponent with React.memo implementation (Prevents unnecessary re-rendering)\n// const ForceGraphComponent = React.memo((props) => {\n//   console.log(\"Child rendered\"); // For verification purposes\n//   console.log(device_data);\n//   // Layout to add margin left to the Networok Topology Graph\n//   return (\n//     <Layout style={{ marginLeft: 199 }}>\n//       <ForceGraph3D\n//         width={window.innerWidth - 200}\n//         graphData={{\n//           nodes: device_data,\n//           links: relation_data,\n//         }}\n//         onNodeRightClick={props.handleRightClick}\n//         // linkDirectionalParticles={1}\n//         // linkDirectionalParticleSpeed={0.01}\n//         onNodeHover={props.handleHover}\n//         onNodeDragEnd={(node) => {\n//           node.fx = node.x;\n//           node.fy = node.y;\n//           node.fz = node.z;\n//         }}\n//         nodeThreeObject={({ type }) => {\n//           let imgTexture = null;\n//           if (type === \"DB\") {\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\n//           } else if (type === \"PC\") {\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\n//           } else if (type === \"Router\") {\n//             imgTexture = new THREE.TextureLoader().load(\n//               \"assets/img_router.png\"\n//             );\n//           }\n//           const material = new THREE.SpriteMaterial({ map: imgTexture });\n//           const sprite = new THREE.Sprite(material);\n//           sprite.scale.set(12, 12);\n//           return sprite;\n//         }}\n//       />\n//     </Layout>\n//   );\n// });\n// export default class AppNetworkTopology extends React.Component {\n//   // Initial state\n//   state = {\n//     deviceDrawerStatus: false,\n//     networkDrawerStatus: false,\n//     deviceDetailsObject: {},\n//     networkDetailObject: networkData[0],\n//     networkStatisticsObject: groupByDeviceType,\n//     networkDeviceCounter: device_data.length,\n//   };\n//   // shouldComponentUpdate = (nextProps, nextState) => {\n//   //   console.log(nextProps);\n//   //   console.log(nextState);\n//   //   return false;\n//   // };\n//   // On right-click on icon on network topology, the function will pass the object to handleRightClick()\n//   // This function wil then set the state of \"deviceDrawerStatus\" to \"true\"\n//   // This function will also set the state of \"networkDrawerStatus\" to false\n//   handleRightClick = (node) => {\n//     this.setState({\n//       deviceDetailsObject: node,\n//       deviceDrawerStatus: true,\n//       networkDrawerStatus: false,\n//     });\n//   };\n//   handleHover = (node) => {\n//     // console.log(this.state.deviceDetailsObject);\n//     if (node != null && node != this.state.deviceDetailsObject) {\n//       this.setState({\n//         deviceDetailsObject: node,\n//       });\n//     }\n//   };\n//   // This function set the state of \"networkDrawerStatus\" will be \"true\"\n//   // This function will also set the state of \"deviceDrawerStatus\" to false\n//   // This function will only be invoked when the \"Show Network Statistics\" button is pressed\n//   handleNetworkStatistcsButton = () => {\n//     this.setState({\n//       networkDrawerStatus: true,\n//       deviceDrawerStatus: false,\n//     });\n//   };\n//   // This function sets the state of \"deviceDrawerStatus\" to \"false\"\n//   // This funtion is passed to the child component \"DeviceDrawer\"\n//   // When clicking on the \"X\" symbol in \"DeviceDrawer\", this function will run\n//   closeDeviceDrawer = () => {\n//     this.setState({ deviceDrawerStatus: false });\n//   };\n//   // This function sets the state of \"networkDrawerStatus\" to \"false\"\n//   // This funtion is passed to the child component \"NetworkDrawer\"\n//   // When clicking on the \"X\" symbol in \"NetworkDrawer\", this function will run\n//   closeNetworkDrawer = () => {\n//     this.setState({ networkDrawerStatus: false });\n//   };\n//   render() {\n//     return (\n//       <div>\n//         <div\n//           id=\"tester\"\n//           style={{\n//             padding: 10,\n//             position: \"absolute\",\n//             top: 10,\n//             left: 210,\n//             zIndex: 1,\n//             background: \"white\",\n//             height: 200,\n//             width: 200,\n//           }}\n//         >\n//           <p>IP: {this.state.deviceDetailsObject.id}</p>\n//           <p>Name: {this.state.deviceDetailsObject.name}</p>\n//           <p>Type: {this.state.deviceDetailsObject.type}</p>\n//           <p>OS: {this.state.deviceDetailsObject.os}</p>\n//           <p>Mac: {this.state.deviceDetailsObject.mac_addr}</p>\n//         </div>\n//         <Affix style={{ position: \"absolute\", top: 120, left: 10 }}>\n//           <Button type=\"primary\" onClick={this.handleNetworkStatistcsButton}>\n//             Show Network Statistics\n//           </Button>\n//         </Affix>\n//         <NetworkDrawer\n//           networkDetailObject={this.state.networkDetailObject}\n//           networkDrawerStatus={this.state.networkDrawerStatus}\n//           networkStatisticsObject={this.state.networkStatisticsObject}\n//           networkDeviceCounter={this.state.networkDeviceCounter}\n//           closeNetworkDrawerFunction={this.closeNetworkDrawer}\n//         />\n//         <DeviceDrawer\n//           deviceDetails={this.state.deviceDetailsObject}\n//           deviceDrawerStatus={this.state.deviceDrawerStatus}\n//           closeDeviceDrawerFunction={this.closeDeviceDrawer}\n//         />\n//         <ForceGraphComponent\n//           style={{ zIndex: -1 }}\n//           handleRightClick={this.handleRightClick}\n//           handleHover={this.handleHover}\n//           handleClick={this.FocusGraph}\n//         />\n//       </div>\n//     );\n//   }\n// }\n// handleClick = (node) => {\n//   const getHostName = testingData.filter((thisDevice) =>\n//     thisDevice.id.includes(node.id)\n//   );\n//   getHostName.map((deviceDetails) => {\n//     // alert(deviceDetails.os);\n//     this.setState({ deviceDetailsObject: deviceDetails });\n//   });\n// };\n\nvar _c;\n\n$RefreshReg$(_c, \"AppNetworkTopology\");","map":{"version":3,"sources":["C:/SourceTree/capstone-project/src/NetworkTopology.js"],"names":["React","useState","useRef","useCallback","Layout","Button","Affix","ForceGraph3D","DeviceDrawer","NetworkDrawer","THREE","networkData","device_data","relation_data","AppNetworkTopology","deviceDrawerStatus","setDeviceDrawerStatus","networkDrawerStatus","setNetworkDrawerStatus","deviceDetails","setDeviceDetails","networkDetails","setNetworkDetails","groupByDevice","setGroupByDevice","deviceCounter","setDeviceCounter","hoverNode","setHoverNode","closeDeviceDrawer","closeNetworkDrawer","handleNetworkStatisticsButton","length","groupByDeviceType","result","i","fgRef","zoomInNode","node","distance","distRatio","Math","hypot","x","y","z","current","cameraPosition","this_array","handleNodeHover","paintRing","imgTexture","console","log","source","id","push","target","TextureLoader","load","type","status","material","SpriteMaterial","map","sprite","Sprite","scale","set","background","nodes","links","name","mac_addr","position","top","left"],"mappings":"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":["import \"antd/dist/antd.css\";\r\nimport React, { useState, useRef, useCallback } from \"react\";\r\nimport { Layout, Button, Affix } from \"antd\";\r\nimport { ForceGraph3D } from \"react-force-graph\";\r\nimport DeviceDrawer from \"./Components/DrawerDevice\";\r\nimport NetworkDrawer from \"./Components/DrawerNetwork\";\r\nimport * as THREE from \"three\";\r\nimport networkData from \"./Components/Data/network.json\";\r\nimport device_data from \"./Components/Data/device_data.json\";\r\nimport relation_data from \"./Components/Data/relation_data.json\";\r\n\r\n// const ForceGraphComponent = React.memo((props) => {console.log(\"Child rendered\"); // For verification purposes\r\n\r\nfunction AppNetworkTopology() {\r\n  const [deviceDrawerStatus, setDeviceDrawerStatus] = useState(false);\r\n  const [networkDrawerStatus, setNetworkDrawerStatus] = useState(false); // networkDrawerStatus={this.state.networkDrawerStatus}\r\n  const [deviceDetails, setDeviceDetails] = useState({});\r\n  const [networkDetails, setNetworkDetails] = useState({});\r\n  const [groupByDevice, setGroupByDevice] = useState();\r\n  const [deviceCounter, setDeviceCounter] = useState();\r\n  const [hoverNode, setHoverNode] = useState();\r\n\r\n  const closeDeviceDrawer = () => {\r\n    setDeviceDrawerStatus(false);\r\n  };\r\n\r\n  const closeNetworkDrawer = () => {\r\n    setNetworkDrawerStatus(false);\r\n  };\r\n\r\n  const handleNetworkStatisticsButton = () => {\r\n    setDeviceDrawerStatus(false);\r\n    setNetworkDrawerStatus(true);\r\n    setNetworkDetails(networkData[0]);\r\n    setDeviceCounter(device_data.length);\r\n    setGroupByDevice(groupByDeviceType());\r\n  };\r\n\r\n  // const groupByDeviceType = device_data.reduce((thisData, dev) => {\r\n  //   thisData[dev.status] = thisData[dev.status] + 1 || 1;\r\n  //   return thisData;\r\n  // }, {});\r\n\r\n  const groupByDeviceType = () => {\r\n    var result = {};\r\n    for (var i = 0; i < device_data.length; i++) {\r\n      if (!result[device_data[i][\"status\"]]) {\r\n        result[device_data[i][\"status\"]] = 0;\r\n      }\r\n      result[device_data[i][\"status\"]]++;\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const fgRef = useRef();\r\n  const zoomInNode = useCallback(\r\n    (node) => {\r\n      setDeviceDrawerStatus(true);\r\n      setNetworkDrawerStatus(false);\r\n      setDeviceDetails(node);\r\n      setHoverNode(node);\r\n\r\n      // Camera distance of node\r\n      const distance = 150;\r\n      const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\r\n\r\n      fgRef.current.cameraPosition(\r\n        {\r\n          x: node.x * distRatio,\r\n          y: node.y * distRatio,\r\n          z: node.z * distRatio,\r\n        }, // new position\r\n        node, // lookAt ({ x, y, z })\r\n        1000 // ms transition duration\r\n      );\r\n    },\r\n    [fgRef]\r\n  );\r\n\r\n  var this_array = [];\r\n\r\n  const handleNodeHover = (node) => {\r\n    this_array = [];\r\n    if (node) {\r\n      //console.log(node);\r\n      //console.log(relation_data);\r\n      // for (var i = 0; i < relation_data.length; i++) {\r\n      //   if (relation_data[i].source.id === node.id) {\r\n      //     this_array.push(relation_data[i].target.id);\r\n      //   } else if (relation_data[i].target.id === node.id) {\r\n      //     this_array.push(relation_data[i].source.id);\r\n      //   }\r\n      // }\r\n      // console.log(this_array);\r\n    } else {\r\n      // console.log(\"Nothing\");\r\n    }\r\n  };\r\n\r\n  const paintRing = useCallback((node) => {\r\n    let imgTexture = null;\r\n    this_array = [];\r\n\r\n    if (hoverNode) {\r\n      console.log(\"HoverNode\", hoverNode);\r\n\r\n      for (var i = 0; i < relation_data.length; i++) {\r\n        if (relation_data[i].source.id === hoverNode.id) {\r\n          this_array.push(relation_data[i].target.id);\r\n        } else if (relation_data[i].target.id === hoverNode.id) {\r\n          this_array.push(relation_data[i].source.id);\r\n        }\r\n      }\r\n    } else {\r\n      imgTexture = new THREE.TextureLoader().load(\"assets/check.png\");\r\n    }\r\n\r\n    console.log(this_array);\r\n\r\n    imgTexture = new THREE.TextureLoader().load(\"assets/check.png\");\r\n\r\n    if (node === hoverNode) {\r\n      console.log(\"Hello\", node);\r\n\r\n      for (var i = 0; i < relation_data.length; i++) {\r\n        if (relation_data[i].source.id === node.id) {\r\n          this_array.push(relation_data[i].target.id);\r\n        } else if (relation_data[i].target.id === node.id) {\r\n          this_array.push(relation_data[i].source.id);\r\n        }\r\n      }\r\n      console.log(\"Connected to\", this_array);\r\n      console.log(\"============================================\");\r\n\r\n      imgTexture = new THREE.TextureLoader().load(\"assets/check.png\");\r\n    } else {\r\n      if (node.type === \"DB\") {\r\n        if (node.status === \"Active\") {\r\n          imgTexture = new THREE.TextureLoader().load(\"assets/online_db.png\");\r\n        } else if (node.status === \"Inactive\") {\r\n          imgTexture = new THREE.TextureLoader().load(\"assets/inactive_db.png\");\r\n        } else {\r\n          imgTexture = new THREE.TextureLoader().load(\"assets/offline_db.png\");\r\n        }\r\n      } else if (node.type === \"PC\") {\r\n        if (node.status === \"Active\") {\r\n          imgTexture = new THREE.TextureLoader().load(\"assets/online_pc.png\");\r\n        } else if (node.status === \"Inactive\") {\r\n          imgTexture = new THREE.TextureLoader().load(\"assets/inactive_pc.png\");\r\n        } else {\r\n          imgTexture = new THREE.TextureLoader().load(\"assets/offline_pc.png\");\r\n        }\r\n      } else if (node.type === \"Router\") {\r\n        if (node.status === \"Active\") {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/online_router.png\"\r\n          );\r\n        } else if (node.status === \"Inactive\") {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/inactive_router.png\"\r\n          );\r\n        } else {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/offline_router.png\"\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    const material = new THREE.SpriteMaterial({ map: imgTexture });\r\n    const sprite = new THREE.Sprite(material);\r\n    sprite.scale.set(12, 12);\r\n\r\n    return sprite;\r\n  });\r\n\r\n  // <Layout style={{ marginLeft: 199, zIndex: -1 }}>\r\n\r\n  return (\r\n    <div style={{ background: \"black\" }}>\r\n      <ForceGraph3D\r\n        ref={fgRef}\r\n        graphData={{\r\n          nodes: device_data,\r\n          links: relation_data,\r\n        }}\r\n        nodeLabel={(node) =>\r\n          `<div style=\"background: #1F1E26; padding: 5px 10px 8px 10px; border-radius: 10px; user-select: none\">\r\n            <span>Name: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>${node.name}</b></span><br/>\r\n            <span>IP Addr: &nbsp;&nbsp;&nbsp;&nbsp;<b>${node.id}</b></span><br/>\r\n            <span>Mac Addr: &nbsp;<b>${node.mac_addr}</b></span>\r\n            </div>`\r\n        }\r\n        linkWidth={2}\r\n        onNodeRightClick={zoomInNode}\r\n        linkDirectionalParticles={1}\r\n        linkDirectionalParticleSpeed={0.01}\r\n        onNodeHover={handleNodeHover}\r\n        // onNodeHover={handleHover}\r\n        // onNodeDragEnd={(node) => {\r\n        //   node.fx = node.x;\r\n        //   node.fy = node.y;\r\n        //   node.fz = node.z;\r\n        // }}\r\n        nodeThreeObject={paintRing}\r\n      />\r\n      <Affix style={{ position: \"absolute\", top: 120, left: 10 }}>\r\n        <Button type=\"primary\" onClick={handleNetworkStatisticsButton}>\r\n          Show Network Statistics\r\n        </Button>\r\n      </Affix>\r\n\r\n      <DeviceDrawer\r\n        deviceDrawerStatus={deviceDrawerStatus}\r\n        deviceDetails={deviceDetails}\r\n        closeDeviceDrawer={closeDeviceDrawer}\r\n      />\r\n      <NetworkDrawer\r\n        networkDrawerStatus={networkDrawerStatus}\r\n        networkDetails={networkDetails}\r\n        groupByDevice={groupByDevice}\r\n        deviceCounter={deviceCounter}\r\n        closeNetworkDrawer={closeNetworkDrawer}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppNetworkTopology;\r\n\r\n// const groupByDeviceType = device_data.reduce((thisData, dev) => {\r\n//   thisData[dev.status] = thisData[dev.status] + 1 || 1;\r\n//   return thisData;\r\n// }, {});\r\n\r\n// function FocusGraph() {\r\n//   const fgRef = React.useRef;\r\n\r\n//   const handleClick = React.useCallback(\r\n//     (node) => {\r\n//       const distance = 40;\r\n//       const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\r\n\r\n//       fgRef.current.cameraPosition(\r\n//         { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio }, // new position\r\n//         node, // lookAt ({ x, y, z })\r\n//         3000 // camera transition duration (in ms)\r\n//       );\r\n//     },\r\n//     [fgRef]\r\n//   );\r\n// }\r\n\r\n// // ForceGraphComponent with React.memo implementation (Prevents unnecessary re-rendering)\r\n// const ForceGraphComponent = React.memo((props) => {\r\n//   console.log(\"Child rendered\"); // For verification purposes\r\n//   console.log(device_data);\r\n\r\n//   // Layout to add margin left to the Networok Topology Graph\r\n//   return (\r\n//     <Layout style={{ marginLeft: 199 }}>\r\n//       <ForceGraph3D\r\n//         width={window.innerWidth - 200}\r\n//         graphData={{\r\n//           nodes: device_data,\r\n//           links: relation_data,\r\n//         }}\r\n//         onNodeRightClick={props.handleRightClick}\r\n//         // linkDirectionalParticles={1}\r\n//         // linkDirectionalParticleSpeed={0.01}\r\n//         onNodeHover={props.handleHover}\r\n//         onNodeDragEnd={(node) => {\r\n//           node.fx = node.x;\r\n//           node.fy = node.y;\r\n//           node.fz = node.z;\r\n//         }}\r\n//         nodeThreeObject={({ type }) => {\r\n//           let imgTexture = null;\r\n//           if (type === \"DB\") {\r\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\r\n//           } else if (type === \"PC\") {\r\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\r\n//           } else if (type === \"Router\") {\r\n//             imgTexture = new THREE.TextureLoader().load(\r\n//               \"assets/img_router.png\"\r\n//             );\r\n//           }\r\n\r\n//           const material = new THREE.SpriteMaterial({ map: imgTexture });\r\n//           const sprite = new THREE.Sprite(material);\r\n//           sprite.scale.set(12, 12);\r\n\r\n//           return sprite;\r\n//         }}\r\n//       />\r\n//     </Layout>\r\n//   );\r\n// });\r\n\r\n// export default class AppNetworkTopology extends React.Component {\r\n//   // Initial state\r\n//   state = {\r\n//     deviceDrawerStatus: false,\r\n//     networkDrawerStatus: false,\r\n//     deviceDetailsObject: {},\r\n//     networkDetailObject: networkData[0],\r\n//     networkStatisticsObject: groupByDeviceType,\r\n//     networkDeviceCounter: device_data.length,\r\n//   };\r\n\r\n//   // shouldComponentUpdate = (nextProps, nextState) => {\r\n//   //   console.log(nextProps);\r\n//   //   console.log(nextState);\r\n//   //   return false;\r\n//   // };\r\n\r\n//   // On right-click on icon on network topology, the function will pass the object to handleRightClick()\r\n//   // This function wil then set the state of \"deviceDrawerStatus\" to \"true\"\r\n//   // This function will also set the state of \"networkDrawerStatus\" to false\r\n//   handleRightClick = (node) => {\r\n//     this.setState({\r\n//       deviceDetailsObject: node,\r\n//       deviceDrawerStatus: true,\r\n//       networkDrawerStatus: false,\r\n//     });\r\n//   };\r\n\r\n//   handleHover = (node) => {\r\n//     // console.log(this.state.deviceDetailsObject);\r\n//     if (node != null && node != this.state.deviceDetailsObject) {\r\n//       this.setState({\r\n//         deviceDetailsObject: node,\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   // This function set the state of \"networkDrawerStatus\" will be \"true\"\r\n//   // This function will also set the state of \"deviceDrawerStatus\" to false\r\n//   // This function will only be invoked when the \"Show Network Statistics\" button is pressed\r\n//   handleNetworkStatistcsButton = () => {\r\n//     this.setState({\r\n//       networkDrawerStatus: true,\r\n//       deviceDrawerStatus: false,\r\n//     });\r\n//   };\r\n\r\n//   // This function sets the state of \"deviceDrawerStatus\" to \"false\"\r\n//   // This funtion is passed to the child component \"DeviceDrawer\"\r\n//   // When clicking on the \"X\" symbol in \"DeviceDrawer\", this function will run\r\n//   closeDeviceDrawer = () => {\r\n//     this.setState({ deviceDrawerStatus: false });\r\n//   };\r\n\r\n//   // This function sets the state of \"networkDrawerStatus\" to \"false\"\r\n//   // This funtion is passed to the child component \"NetworkDrawer\"\r\n//   // When clicking on the \"X\" symbol in \"NetworkDrawer\", this function will run\r\n//   closeNetworkDrawer = () => {\r\n//     this.setState({ networkDrawerStatus: false });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         <div\r\n//           id=\"tester\"\r\n//           style={{\r\n//             padding: 10,\r\n//             position: \"absolute\",\r\n//             top: 10,\r\n//             left: 210,\r\n//             zIndex: 1,\r\n//             background: \"white\",\r\n//             height: 200,\r\n//             width: 200,\r\n//           }}\r\n//         >\r\n//           <p>IP: {this.state.deviceDetailsObject.id}</p>\r\n//           <p>Name: {this.state.deviceDetailsObject.name}</p>\r\n//           <p>Type: {this.state.deviceDetailsObject.type}</p>\r\n//           <p>OS: {this.state.deviceDetailsObject.os}</p>\r\n//           <p>Mac: {this.state.deviceDetailsObject.mac_addr}</p>\r\n//         </div>\r\n//         <Affix style={{ position: \"absolute\", top: 120, left: 10 }}>\r\n//           <Button type=\"primary\" onClick={this.handleNetworkStatistcsButton}>\r\n//             Show Network Statistics\r\n//           </Button>\r\n//         </Affix>\r\n\r\n//         <NetworkDrawer\r\n//           networkDetailObject={this.state.networkDetailObject}\r\n//           networkDrawerStatus={this.state.networkDrawerStatus}\r\n//           networkStatisticsObject={this.state.networkStatisticsObject}\r\n//           networkDeviceCounter={this.state.networkDeviceCounter}\r\n//           closeNetworkDrawerFunction={this.closeNetworkDrawer}\r\n//         />\r\n//         <DeviceDrawer\r\n//           deviceDetails={this.state.deviceDetailsObject}\r\n//           deviceDrawerStatus={this.state.deviceDrawerStatus}\r\n//           closeDeviceDrawerFunction={this.closeDeviceDrawer}\r\n//         />\r\n//         <ForceGraphComponent\r\n//           style={{ zIndex: -1 }}\r\n//           handleRightClick={this.handleRightClick}\r\n//           handleHover={this.handleHover}\r\n//           handleClick={this.FocusGraph}\r\n//         />\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// handleClick = (node) => {\r\n//   const getHostName = testingData.filter((thisDevice) =>\r\n//     thisDevice.id.includes(node.id)\r\n//   );\r\n//   getHostName.map((deviceDetails) => {\r\n//     // alert(deviceDetails.os);\r\n//     this.setState({ deviceDetailsObject: deviceDetails });\r\n//   });\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}