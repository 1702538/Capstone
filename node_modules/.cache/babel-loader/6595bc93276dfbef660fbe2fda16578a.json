{"ast":null,"code":"var _jsxFileName = \"C:\\\\SourceTree\\\\capstone-project\\\\src\\\\ManageDevices.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, memo } from \"react\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport { Form, Layout, Table, Space, Popconfirm } from \"antd\";\nimport ManageDrawer from \"./Components/DrawerManage\";\nimport device_data from \"./Components/Data/device_data.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Column\n} = Table;\n\nfunction AppManageDevice() {\n  _s();\n\n  const [manageDrawerStatus, setManageDrawerStatus] = useState(false);\n  const [manageDeviceDetails, setManageDeviceDetails] = useState({});\n  const [deviceTableData, updateDeviceTableData] = useState(device_data);\n  const [deviceForm] = Form.useForm(); // When user clicks on \"Edit\", two functions will run:\n  // - openManageDrawerStatus - To open device drawer\n  // - setManageDeviceDetails - Pass the record to FormDeviceMange page (for the Revert button)\n  // - setFormValue - Directly update the values in the Form component\n\n  async function onEditClick(record) {\n    openManageDrawerStatus();\n    setManageDeviceDetails(record);\n    setFormValues(record);\n  }\n\n  const openManageDrawerStatus = () => {\n    setManageDrawerStatus(true);\n  };\n\n  const closeMangeDeviceDrawer = () => {\n    setManageDrawerStatus(false);\n  };\n\n  const setFormValues = record => {\n    deviceForm.setFieldsValue({\n      hostname: record.name,\n      device_type: record.type,\n      os_version: record.os,\n      mac_address: record.mac_addr,\n      ownership: record.ownership\n    });\n  }; // To update the values in the table based on the new\n\n\n  const updatedFormValues = updated => {\n    // Sample console log for verification only\n    console.log(\"Updated hostname to\", updated.hostname, \"where IP Address is\", manageDeviceDetails.id);\n    updateTableValues(updated);\n  }; // Function to update the table with the updated values from the user\n\n\n  function updateTableValues(updated) {\n    for (var i = 0; i < device_data.length; i++) {\n      if (device_data[i].id == manageDeviceDetails.id) {\n        device_data[i].name = updated.hostname;\n        break;\n      }\n    }\n\n    console.log(\"Table Updated:\", device_data[i].name);\n  }\n\n  function tester_delete(recordToDelete) {\n    console.log(recordToDelete.id);\n\n    for (var i = 0; i < device_data.length; i++) {\n      if (device_data[i].id == recordToDelete.id) {\n        device_data.splice(i, 1);\n        console.log(device_data);\n      }\n    }\n  }\n\n  const testingComponent = /*#__PURE__*/React.memo(() => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"123\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"testingComponent\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AppManageDevice, \"0M8fMm5q6OxbHHWIzgokqh+cW9I=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = AppManageDevice;\nexport default AppManageDevice;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppManageDevice\");","map":{"version":3,"sources":["C:/SourceTree/capstone-project/src/ManageDevices.js"],"names":["React","useState","memo","Form","Layout","Table","Space","Popconfirm","ManageDrawer","device_data","Column","AppManageDevice","manageDrawerStatus","setManageDrawerStatus","manageDeviceDetails","setManageDeviceDetails","deviceTableData","updateDeviceTableData","deviceForm","useForm","onEditClick","record","openManageDrawerStatus","setFormValues","closeMangeDeviceDrawer","setFieldsValue","hostname","name","device_type","type","os_version","os","mac_address","mac_addr","ownership","updatedFormValues","updated","console","log","id","updateTableValues","i","length","tester_delete","recordToDelete","splice","testingComponent"],"mappings":"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","sourcesContent":["import React, { useState, memo } from \"react\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport { Form, Layout, Table, Space, Popconfirm } from \"antd\";\nimport ManageDrawer from \"./Components/DrawerManage\";\nimport device_data from \"./Components/Data/device_data.json\";\n\nconst { Column } = Table;\n\nfunction AppManageDevice() {\n  const [manageDrawerStatus, setManageDrawerStatus] = useState(false);\n  const [manageDeviceDetails, setManageDeviceDetails] = useState({});\n  const [deviceTableData, updateDeviceTableData] = useState(device_data);\n\n  const [deviceForm] = Form.useForm();\n\n  // When user clicks on \"Edit\", two functions will run:\n  // - openManageDrawerStatus - To open device drawer\n  // - setManageDeviceDetails - Pass the record to FormDeviceMange page (for the Revert button)\n  // - setFormValue - Directly update the values in the Form component\n  async function onEditClick(record) {\n    openManageDrawerStatus();\n    setManageDeviceDetails(record);\n    setFormValues(record);\n  }\n\n  const openManageDrawerStatus = () => {\n    setManageDrawerStatus(true);\n  };\n\n  const closeMangeDeviceDrawer = () => {\n    setManageDrawerStatus(false);\n  };\n\n  const setFormValues = (record) => {\n    deviceForm.setFieldsValue({\n      hostname: record.name,\n      device_type: record.type,\n      os_version: record.os,\n      mac_address: record.mac_addr,\n      ownership: record.ownership,\n    });\n  };\n\n  // To update the values in the table based on the new\n  const updatedFormValues = (updated) => {\n    // Sample console log for verification only\n    console.log(\n      \"Updated hostname to\",\n      updated.hostname,\n      \"where IP Address is\",\n      manageDeviceDetails.id\n    );\n\n    updateTableValues(updated);\n  };\n\n  // Function to update the table with the updated values from the user\n  function updateTableValues(updated) {\n    for (var i = 0; i < device_data.length; i++) {\n      if (device_data[i].id == manageDeviceDetails.id) {\n        device_data[i].name = updated.hostname;\n        break;\n      }\n    }\n    console.log(\"Table Updated:\", device_data[i].name);\n  }\n\n  function tester_delete(recordToDelete) {\n    console.log(recordToDelete.id);\n    for (var i = 0; i < device_data.length; i++) {\n      if (device_data[i].id == recordToDelete.id) {\n        device_data.splice(i, 1);\n        console.log(device_data);\n      }\n    }\n  }\n\n  const testingComponent = React.memo(() => {\n    return (\n      <div>\n        <h1>123</h1>\n      </div>\n    );\n  });\n\n  return (\n    <div>\n      <testingComponent></testingComponent>\n    </div>\n  );\n}\n\nexport default AppManageDevice;\n"]},"metadata":{},"sourceType":"module"}