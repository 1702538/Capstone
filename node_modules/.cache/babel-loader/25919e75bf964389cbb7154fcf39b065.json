{"ast":null,"code":"import{Table}from\"antd\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function ThreatsTable(_ref){var alertData=_ref.alertData,deviceDetails=_ref.deviceDetails;var date;var month_array=[\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"June\",\"July\",\"Aug\",\"Sept\",\"Oct\",\"Nov\",\"Dec\"];if(deviceDetails!==undefined){alertData=alertData.filter(function(record){return record.destination.includes(deviceDetails.id);});}Object.keys(alertData).forEach(function(key){date=new Date(alertData[key][\"timestamp\"]);alertData[key][\"timestamp\"]=date.getDate()+\" \"+month_array[date.getMonth()]+\" \"+date.getFullYear()+\" \"+(date.getHours()<10?\"0\"+date.getHours():date.getHours())+\":\"+(date.getMinutes()<10?\"0\"+date.getMinutes():date.getMinutes())+\":\"+(date.getSeconds()<10?\"0\"+date.getSeconds():date.getSeconds());});return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{style:{color:\"white\"},children:\"Detected Cyber Security Threats\"}),/*#__PURE__*/_jsx(Table,{dataSource:alertData,columns:columns,pagination:{defaultPageSize:10}})]});}var dataSource=[];var columns=[{title:\"Timestamp\",dataIndex:\"timestamp\",key:\"timestamp\",sorter:function sorter(a,b){return a.timestamp-b.timestamp;}},{title:\"Source\",dataIndex:\"source\",key:\"source\"},{title:\"Destination\",dataIndex:\"destination\",key:\"destination\"},{title:\"Threat Info\",dataIndex:\"threatinfo\",render:function render(text,record){return/*#__PURE__*/_jsxs(\"span\",{children:[/*#__PURE__*/_jsx(\"b\",{children:\"Threat Category: \"}),record.threat_category,\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"b\",{children:\"Threat Name: \"}),record.threat_name,\" \",/*#__PURE__*/_jsx(\"br\",{})]});},key:\"threat\",filters:[{text:\"Policy Violation\",value:\"Policy Violation\"},{text:\"Suspicious\",value:\"Suspicious\"}],onFilter:function onFilter(value,record){return record.threat_category.includes(value);},filterMode:\"tree\",filterSearch:true}// {\n//   title: \"Threat Type\",\n//   dataIndex: \"threat\",\n//   key: \"threat\",\n//   filters: [\n//     {\n//       text: \"Trojan\",\n//       value: \"Trojan\",\n//     },\n//     {\n//       text: \"Rootkit\",\n//       value: \"Rootkit\",\n//     },\n//   ],\n//   onFilter: (value, record) => record.threat.includes(value),\n//   filterMode: \"tree\",\n//   filterSearch: true,\n// },\n];export default ThreatsTable;","map":{"version":3,"sources":["C:/SourceTree/capstone-project/src/Components/TableThreats.js"],"names":["Table","ThreatsTable","alertData","deviceDetails","date","month_array","undefined","filter","record","destination","includes","id","Object","keys","forEach","key","Date","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","color","columns","defaultPageSize","dataSource","title","dataIndex","sorter","a","b","timestamp","render","text","threat_category","threat_name","filters","value","onFilter","filterMode","filterSearch"],"mappings":"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","sourcesContent":["import { Table } from \"antd\";\r\n\r\nfunction ThreatsTable({ alertData, deviceDetails }) {\r\n  var date;\r\n\r\n  const month_array = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"Aug\",\r\n    \"Sept\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ];\r\n\r\n  if (deviceDetails !== undefined) {\r\n    alertData = alertData.filter((record) =>\r\n      record.destination.includes(deviceDetails.id)\r\n    );\r\n  }\r\n\r\n  Object.keys(alertData).forEach((key) => {\r\n    date = new Date(alertData[key][\"timestamp\"]);\r\n    alertData[key][\"timestamp\"] =\r\n      date.getDate() +\r\n      \" \" +\r\n      month_array[date.getMonth()] +\r\n      \" \" +\r\n      date.getFullYear() +\r\n      \" \" +\r\n      (date.getHours() < 10 ? \"0\" + date.getHours() : date.getHours()) +\r\n      \":\" +\r\n      (date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes()) +\r\n      \":\" +\r\n      (date.getSeconds() < 10 ? \"0\" + date.getSeconds() : date.getSeconds());\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <h3 style={{ color: \"white\" }}>Detected Cyber Security Threats</h3>\r\n      <Table\r\n        dataSource={alertData}\r\n        columns={columns}\r\n        pagination={{\r\n          defaultPageSize: 10,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst dataSource = [];\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Timestamp\",\r\n    dataIndex: \"timestamp\",\r\n    key: \"timestamp\",\r\n    sorter: (a, b) => a.timestamp - b.timestamp,\r\n  },\r\n  {\r\n    title: \"Source\",\r\n    dataIndex: \"source\",\r\n    key: \"source\",\r\n  },\r\n  {\r\n    title: \"Destination\",\r\n    dataIndex: \"destination\",\r\n    key: \"destination\",\r\n  },\r\n  {\r\n    title: \"Threat Info\",\r\n    dataIndex: \"threatinfo\",\r\n    render: (text, record) => (\r\n      <span>\r\n        <b>Threat Category: </b>\r\n        {record.threat_category} <br />\r\n        <b>Threat Name: </b>\r\n        {record.threat_name} <br />\r\n      </span>\r\n    ),\r\n    key: \"threat\",\r\n    filters: [\r\n      {\r\n        text: \"Policy Violation\",\r\n        value: \"Policy Violation\",\r\n      },\r\n      {\r\n        text: \"Suspicious\",\r\n        value: \"Suspicious\",\r\n      },\r\n    ],\r\n    onFilter: (value, record) => record.threat_category.includes(value),\r\n    filterMode: \"tree\",\r\n    filterSearch: true,\r\n  },\r\n  // {\r\n  //   title: \"Threat Type\",\r\n  //   dataIndex: \"threat\",\r\n  //   key: \"threat\",\r\n  //   filters: [\r\n  //     {\r\n  //       text: \"Trojan\",\r\n  //       value: \"Trojan\",\r\n  //     },\r\n  //     {\r\n  //       text: \"Rootkit\",\r\n  //       value: \"Rootkit\",\r\n  //     },\r\n  //   ],\r\n  //   onFilter: (value, record) => record.threat.includes(value),\r\n  //   filterMode: \"tree\",\r\n  //   filterSearch: true,\r\n  // },\r\n];\r\n\r\nexport default ThreatsTable;\r\n"]},"metadata":{},"sourceType":"module"}