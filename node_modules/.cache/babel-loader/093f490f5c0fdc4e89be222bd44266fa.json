{"ast":null,"code":"var _jsxFileName = \"C:\\\\Capstone\\\\capstone-project\\\\src\\\\NetworkTopology.js\";\nimport \"antd/dist/antd.css\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport React from \"react\";\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AppNetworkTopology() {\n  const handleClick = node => {\n    alert(node.id);\n  }; // const imgs = [\"hosting.png\"];\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ForceGraph3D, {\n      graphData: {\n        nodes: [{\n          id: \"192.168.1.100\",\n          name: \"DB-01\",\n          img: \"sample.jpg\"\n        }, {\n          id: \"192.168.1.101\",\n          name: \"PC-01\",\n          img: \"sample.jpg\"\n        }, {\n          id: \"192.168.1.102\",\n          name: \"PC-02\",\n          img: \"sample.jpg\"\n        }],\n        links: [{\n          source: \"192.168.1.100\",\n          target: \"192.168.1.101\"\n        }, {\n          source: \"192.168.1.101\",\n          target: \"192.168.1.102\"\n        }, {\n          source: \"192.168.1.100\",\n          target: \"192.168.1.102\"\n        }]\n      },\n      onNodeRightClick: handleClick,\n      nodeThreeObject: _ref => {\n        let {\n          node\n        } = _ref;\n        const imgTexture = new THREE.TextureLoader().load(`hosting.png`);\n        const material = new THREE.SpriteMaterial({\n          map: imgTexture,\n          color: node.colour\n        });\n        const sprite = new THREE.Sprite(material);\n        sprite.scale.set(8, 8);\n        return sprite;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n\n_c = AppNetworkTopology;\n\nfunction genRandomTree() {\n  let N = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 300;\n  let reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return {\n    nodes: [...Array(N).keys()].map(i => ({\n      id: i\n    })),\n    links: [...Array(N).keys()].filter(id => id).map(id => ({\n      [reverse ? \"target\" : \"source\"]: id,\n      [reverse ? \"source\" : \"target\"]: Math.round(Math.random() * (id - 1))\n    }))\n  };\n}\n\nexport default AppNetworkTopology;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppNetworkTopology\");","map":{"version":3,"sources":["C:/Capstone/capstone-project/src/NetworkTopology.js"],"names":["ForceGraph3D","React","THREE","AppNetworkTopology","handleClick","node","alert","id","nodes","name","img","links","source","target","imgTexture","TextureLoader","load","material","SpriteMaterial","map","color","colour","sprite","Sprite","scale","set","genRandomTree","N","reverse","Array","keys","i","filter","Math","round","random"],"mappings":";AAAA,OAAO,oBAAP;AACA,SAASA,YAAT,QAA6B,mBAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;;AAEA,SAASC,kBAAT,GAA8B;AAC5B,QAAMC,WAAW,GAAIC,IAAD,IAAU;AAC5BC,IAAAA,KAAK,CAACD,IAAI,CAACE,EAAN,CAAL;AACD,GAFD,CAD4B,CAK5B;;;AAEA,sBACE;AAAA,2BACE,QAAC,YAAD;AACE,MAAA,SAAS,EAAE;AACTC,QAAAA,KAAK,EAAE,CACL;AACED,UAAAA,EAAE,EAAE,eADN;AAEEE,UAAAA,IAAI,EAAE,OAFR;AAGEC,UAAAA,GAAG,EAAE;AAHP,SADK,EAML;AACEH,UAAAA,EAAE,EAAE,eADN;AAEEE,UAAAA,IAAI,EAAE,OAFR;AAGEC,UAAAA,GAAG,EAAE;AAHP,SANK,EAWL;AACEH,UAAAA,EAAE,EAAE,eADN;AAEEE,UAAAA,IAAI,EAAE,OAFR;AAGEC,UAAAA,GAAG,EAAE;AAHP,SAXK,CADE;AAkBTC,QAAAA,KAAK,EAAE,CACL;AACEC,UAAAA,MAAM,EAAE,eADV;AAEEC,UAAAA,MAAM,EAAE;AAFV,SADK,EAKL;AACED,UAAAA,MAAM,EAAE,eADV;AAEEC,UAAAA,MAAM,EAAE;AAFV,SALK,EASL;AACED,UAAAA,MAAM,EAAE,eADV;AAEEC,UAAAA,MAAM,EAAE;AAFV,SATK;AAlBE,OADb;AAkCE,MAAA,gBAAgB,EAAET,WAlCpB;AAmCE,MAAA,eAAe,EAAE,QAAc;AAAA,YAAb;AAAEC,UAAAA;AAAF,SAAa;AAC7B,cAAMS,UAAU,GAAG,IAAIZ,KAAK,CAACa,aAAV,GAA0BC,IAA1B,CAAgC,aAAhC,CAAnB;AACA,cAAMC,QAAQ,GAAG,IAAIf,KAAK,CAACgB,cAAV,CAAyB;AACxCC,UAAAA,GAAG,EAAEL,UADmC;AAExCM,UAAAA,KAAK,EAAEf,IAAI,CAACgB;AAF4B,SAAzB,CAAjB;AAIA,cAAMC,MAAM,GAAG,IAAIpB,KAAK,CAACqB,MAAV,CAAiBN,QAAjB,CAAf;AACAK,QAAAA,MAAM,CAACE,KAAP,CAAaC,GAAb,CAAiB,CAAjB,EAAoB,CAApB;AACA,eAAOH,MAAP;AACD;AA5CH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAkDD;;KAzDQnB,kB;;AA2DT,SAASuB,aAAT,GAAiD;AAAA,MAA1BC,CAA0B,uEAAtB,GAAsB;AAAA,MAAjBC,OAAiB,uEAAP,KAAO;AAC/C,SAAO;AACLpB,IAAAA,KAAK,EAAE,CAAC,GAAGqB,KAAK,CAACF,CAAD,CAAL,CAASG,IAAT,EAAJ,EAAqBX,GAArB,CAA0BY,CAAD,KAAQ;AAAExB,MAAAA,EAAE,EAAEwB;AAAN,KAAR,CAAzB,CADF;AAELpB,IAAAA,KAAK,EAAE,CAAC,GAAGkB,KAAK,CAACF,CAAD,CAAL,CAASG,IAAT,EAAJ,EACJE,MADI,CACIzB,EAAD,IAAQA,EADX,EAEJY,GAFI,CAECZ,EAAD,KAAS;AACZ,OAACqB,OAAO,GAAG,QAAH,GAAc,QAAtB,GAAiCrB,EADrB;AAEZ,OAACqB,OAAO,GAAG,QAAH,GAAc,QAAtB,GAAiCK,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiB5B,EAAE,GAAG,CAAtB,CAAX;AAFrB,KAAT,CAFA;AAFF,GAAP;AASD;;AAED,eAAeJ,kBAAf","sourcesContent":["import \"antd/dist/antd.css\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport React from \"react\";\nimport * as THREE from \"three\";\n\nfunction AppNetworkTopology() {\n  const handleClick = (node) => {\n    alert(node.id);\n  };\n\n  // const imgs = [\"hosting.png\"];\n\n  return (\n    <div>\n      <ForceGraph3D\n        graphData={{\n          nodes: [\n            {\n              id: \"192.168.1.100\",\n              name: \"DB-01\",\n              img: \"sample.jpg\",\n            },\n            {\n              id: \"192.168.1.101\",\n              name: \"PC-01\",\n              img: \"sample.jpg\",\n            },\n            {\n              id: \"192.168.1.102\",\n              name: \"PC-02\",\n              img: \"sample.jpg\",\n            },\n          ],\n          links: [\n            {\n              source: \"192.168.1.100\",\n              target: \"192.168.1.101\",\n            },\n            {\n              source: \"192.168.1.101\",\n              target: \"192.168.1.102\",\n            },\n            {\n              source: \"192.168.1.100\",\n              target: \"192.168.1.102\",\n            },\n          ],\n        }}\n        onNodeRightClick={handleClick}\n        nodeThreeObject={({ node }) => {\n          const imgTexture = new THREE.TextureLoader().load(`hosting.png`);\n          const material = new THREE.SpriteMaterial({\n            map: imgTexture,\n            color: node.colour,\n          });\n          const sprite = new THREE.Sprite(material);\n          sprite.scale.set(8, 8);\n          return sprite;\n        }}\n      />\n    </div>\n  );\n}\n\nfunction genRandomTree(N = 300, reverse = false) {\n  return {\n    nodes: [...Array(N).keys()].map((i) => ({ id: i })),\n    links: [...Array(N).keys()]\n      .filter((id) => id)\n      .map((id) => ({\n        [reverse ? \"target\" : \"source\"]: id,\n        [reverse ? \"source\" : \"target\"]: Math.round(Math.random() * (id - 1)),\n      })),\n  };\n}\n\nexport default AppNetworkTopology;\n"]},"metadata":{},"sourceType":"module"}