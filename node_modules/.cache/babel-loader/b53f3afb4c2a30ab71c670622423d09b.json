{"ast":null,"code":"var _jsxFileName = \"C:\\\\SourceTree\\\\capstone-project\\\\src\\\\NetworkTopology.js\";\nimport \"antd/dist/antd.css\";\nimport React from \"react\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport DeviceDrawer from \"./Components/DrawerDevice\";\nimport * as THREE from \"three\";\nimport testingData from \"./Components/Data/testdata.json\";\nimport NetworkDrawer from \"./Components/DrawerNetwork\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AppNetworkTopology {\n  render() {\n    const handleClick = node => {\n      const getHostName = testingData.filter(thisDevice => thisDevice.id.includes(node.id));\n      getHostName.map(deviceDetails => {\n        alert(deviceDetails.os);\n      });\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(DeviceDrawer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ForceGraph3D, {\n        graphData: {\n          nodes: [{\n            id: \"192.168.1.100\",\n            name: \"DB-01\",\n            type: \"DB\",\n            value: \"1\",\n            os: \"Linux\",\n            mac_addr: \"aa:aa:aa:aa:aa:aa\"\n          }, {\n            id: \"192.168.1.101\",\n            name: \"PC-01\",\n            type: \"PC\",\n            value: \"1\",\n            mac_addr: \"bb:bb:bb:bb:bb:bb\"\n          }, {\n            id: \"192.168.1.102\",\n            name: \"PC-02\",\n            type: \"PC\",\n            value: \"1\",\n            mac_addr: \"cc:cc:cc:cc:cc:cc\"\n          }],\n          links: [{\n            source: \"192.168.1.100\",\n            target: \"192.168.1.101\"\n          }, {\n            source: \"192.168.1.101\",\n            target: \"192.168.1.102\"\n          }, {\n            source: \"192.168.1.100\",\n            target: \"192.168.1.102\"\n          }]\n        },\n        onNodeRightClick: handleClick,\n        linkDirectionalParticles: 1,\n        linkDirectionalParticleSpeed: 0.01,\n        onNodeDragEnd: node => {\n          node.fx = node.x;\n          node.fy = node.y;\n          node.fz = node.z;\n        },\n        nodeThreeObject: _ref => {\n          let {\n            type\n          } = _ref;\n          let imgTexture = null;\n\n          if (type === \"DB\") {\n            imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\n          } else if (type === \"PC\") {\n            imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\n          }\n\n          const material = new THREE.SpriteMaterial({\n            map: imgTexture\n          });\n          const sprite = new THREE.Sprite(material);\n          sprite.scale.set(12, 12);\n          return sprite;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/SourceTree/capstone-project/src/NetworkTopology.js"],"names":["React","ForceGraph3D","DeviceDrawer","THREE","testingData","NetworkDrawer","AppNetworkTopology","render","handleClick","node","getHostName","filter","thisDevice","id","includes","map","deviceDetails","alert","os","nodes","name","type","value","mac_addr","links","source","target","fx","x","fy","y","fz","z","imgTexture","TextureLoader","load","material","SpriteMaterial","sprite","Sprite","scale","set"],"mappings":"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","sourcesContent":["import \"antd/dist/antd.css\";\nimport React from \"react\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport DeviceDrawer from \"./Components/DrawerDevice\";\nimport * as THREE from \"three\";\nimport testingData from \"./Components/Data/testdata.json\";\nimport NetworkDrawer from \"./Components/DrawerNetwork\";\n\nclass AppNetworkTopology {\n  render() {\n    const handleClick = (node) => {\n      const getHostName = testingData.filter((thisDevice) =>\n        thisDevice.id.includes(node.id)\n      );\n      getHostName.map((deviceDetails) => {\n        alert(deviceDetails.os);\n      });\n    };\n    return (\n      <div>\n        <DeviceDrawer />\n        <ForceGraph3D\n          graphData={{\n            nodes: [\n              {\n                id: \"192.168.1.100\",\n                name: \"DB-01\",\n                type: \"DB\",\n                value: \"1\",\n                os: \"Linux\",\n                mac_addr: \"aa:aa:aa:aa:aa:aa\",\n              },\n              {\n                id: \"192.168.1.101\",\n                name: \"PC-01\",\n                type: \"PC\",\n                value: \"1\",\n                mac_addr: \"bb:bb:bb:bb:bb:bb\",\n              },\n              {\n                id: \"192.168.1.102\",\n                name: \"PC-02\",\n                type: \"PC\",\n                value: \"1\",\n                mac_addr: \"cc:cc:cc:cc:cc:cc\",\n              },\n            ],\n            links: [\n              {\n                source: \"192.168.1.100\",\n                target: \"192.168.1.101\",\n              },\n              {\n                source: \"192.168.1.101\",\n                target: \"192.168.1.102\",\n              },\n              {\n                source: \"192.168.1.100\",\n                target: \"192.168.1.102\",\n              },\n            ],\n          }}\n          onNodeRightClick={handleClick}\n          linkDirectionalParticles={1}\n          linkDirectionalParticleSpeed={0.01}\n          onNodeDragEnd={(node) => {\n            node.fx = node.x;\n            node.fy = node.y;\n            node.fz = node.z;\n          }}\n          nodeThreeObject={({ type }) => {\n            let imgTexture = null;\n            if (type === \"DB\") {\n              imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\n            } else if (type === \"PC\") {\n              imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\n            }\n\n            const material = new THREE.SpriteMaterial({ map: imgTexture });\n            const sprite = new THREE.Sprite(material);\n            sprite.scale.set(12, 12);\n\n            return sprite;\n          }}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}