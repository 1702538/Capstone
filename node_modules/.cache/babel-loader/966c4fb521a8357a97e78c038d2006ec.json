{"ast":null,"code":"var _jsxFileName = \"C:\\\\SourceTree\\\\capstone-project\\\\src\\\\NetworkTopology.js\";\nimport \"antd/dist/antd.css\";\nimport React from \"react\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport DeviceDrawer from \"./Components/DrawerDevice\";\nimport * as THREE from \"three\";\nimport testingData from \"./Components/Data/testdata.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AppNetworkTopology() {\n  const handleClick = node => {\n    const getHostName = testingData.filter(thisDevice => thisDevice.id.includes(\"192.168.1.100\"));\n    alert(getHostName);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(DeviceDrawer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ForceGraph3D, {\n      graphData: {\n        nodes: [{\n          id: \"192.168.1.100\",\n          name: \"DB-01\",\n          type: \"DB\",\n          value: \"10\",\n          os: \"Linux\",\n          mac_addr: \"aa:aa:aa:aa:aa:aa\"\n        }, {\n          id: \"192.168.1.101\",\n          name: \"PC-01\",\n          type: \"PC\",\n          value: \"1\",\n          mac_addr: \"bb:bb:bb:bb:bb:bb\"\n        }, {\n          id: \"192.168.1.102\",\n          name: \"PC-02\",\n          type: \"PC\",\n          value: \"1\",\n          mac_addr: \"cc:cc:cc:cc:cc:cc\"\n        }],\n        links: [{\n          source: \"192.168.1.100\",\n          target: \"192.168.1.101\"\n        }, {\n          source: \"192.168.1.101\",\n          target: \"192.168.1.102\"\n        }, {\n          source: \"192.168.1.100\",\n          target: \"192.168.1.102\"\n        }]\n      },\n      onNodeRightClick: handleClick,\n      linkDirectionalParticles: 1,\n      linkDirectionalParticleSpeed: 0.01,\n      nodeThreeObject: _ref => {\n        let {\n          type\n        } = _ref;\n        let imgTexture = null;\n\n        if (type === \"DB\") {\n          imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\n        } else if (type === \"PC\") {\n          imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\n        }\n\n        const material = new THREE.SpriteMaterial({\n          map: imgTexture\n        });\n        const sprite = new THREE.Sprite(material);\n        sprite.scale.set(12, 12);\n        return sprite;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n\n_c = AppNetworkTopology;\nexport default AppNetworkTopology;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppNetworkTopology\");","map":{"version":3,"sources":["C:/SourceTree/capstone-project/src/NetworkTopology.js"],"names":["React","ForceGraph3D","DeviceDrawer","THREE","testingData","AppNetworkTopology","handleClick","node","getHostName","filter","thisDevice","id","includes","alert","nodes","name","type","value","os","mac_addr","links","source","target","imgTexture","TextureLoader","load","material","SpriteMaterial","map","sprite","Sprite","scale","set"],"mappings":";AAAA,OAAO,oBAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,WAAP,MAAwB,iCAAxB;;;AAEA,SAASC,kBAAT,GAA8B;AAC5B,QAAMC,WAAW,GAAIC,IAAD,IAAU;AAC5B,UAAMC,WAAW,GAAGJ,WAAW,CAACK,MAAZ,CAAoBC,UAAD,IACrCA,UAAU,CAACC,EAAX,CAAcC,QAAd,CAAuB,eAAvB,CADkB,CAApB;AAGAC,IAAAA,KAAK,CAACL,WAAD,CAAL;AACD,GALD;;AAMA,sBACE;AAAA,4BACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,YAAD;AACE,MAAA,SAAS,EAAE;AACTM,QAAAA,KAAK,EAAE,CACL;AACEH,UAAAA,EAAE,EAAE,eADN;AAEEI,UAAAA,IAAI,EAAE,OAFR;AAGEC,UAAAA,IAAI,EAAE,IAHR;AAIEC,UAAAA,KAAK,EAAE,IAJT;AAKEC,UAAAA,EAAE,EAAE,OALN;AAMEC,UAAAA,QAAQ,EAAE;AANZ,SADK,EASL;AACER,UAAAA,EAAE,EAAE,eADN;AAEEI,UAAAA,IAAI,EAAE,OAFR;AAGEC,UAAAA,IAAI,EAAE,IAHR;AAIEC,UAAAA,KAAK,EAAE,GAJT;AAKEE,UAAAA,QAAQ,EAAE;AALZ,SATK,EAgBL;AACER,UAAAA,EAAE,EAAE,eADN;AAEEI,UAAAA,IAAI,EAAE,OAFR;AAGEC,UAAAA,IAAI,EAAE,IAHR;AAIEC,UAAAA,KAAK,EAAE,GAJT;AAKEE,UAAAA,QAAQ,EAAE;AALZ,SAhBK,CADE;AAyBTC,QAAAA,KAAK,EAAE,CACL;AACEC,UAAAA,MAAM,EAAE,eADV;AAEEC,UAAAA,MAAM,EAAE;AAFV,SADK,EAKL;AACED,UAAAA,MAAM,EAAE,eADV;AAEEC,UAAAA,MAAM,EAAE;AAFV,SALK,EASL;AACED,UAAAA,MAAM,EAAE,eADV;AAEEC,UAAAA,MAAM,EAAE;AAFV,SATK;AAzBE,OADb;AAyCE,MAAA,gBAAgB,EAAEhB,WAzCpB;AA0CE,MAAA,wBAAwB,EAAE,CA1C5B;AA2CE,MAAA,4BAA4B,EAAE,IA3ChC;AA4CE,MAAA,eAAe,EAAE,QAAc;AAAA,YAAb;AAAEU,UAAAA;AAAF,SAAa;AAC7B,YAAIO,UAAU,GAAG,IAAjB;;AACA,YAAIP,IAAI,KAAK,IAAb,EAAmB;AACjBO,UAAAA,UAAU,GAAG,IAAIpB,KAAK,CAACqB,aAAV,GAA0BC,IAA1B,CAA+B,mBAA/B,CAAb;AACD,SAFD,MAEO,IAAIT,IAAI,KAAK,IAAb,EAAmB;AACxBO,UAAAA,UAAU,GAAG,IAAIpB,KAAK,CAACqB,aAAV,GAA0BC,IAA1B,CAA+B,mBAA/B,CAAb;AACD;;AAED,cAAMC,QAAQ,GAAG,IAAIvB,KAAK,CAACwB,cAAV,CAAyB;AAAEC,UAAAA,GAAG,EAAEL;AAAP,SAAzB,CAAjB;AACA,cAAMM,MAAM,GAAG,IAAI1B,KAAK,CAAC2B,MAAV,CAAiBJ,QAAjB,CAAf;AACAG,QAAAA,MAAM,CAACE,KAAP,CAAaC,GAAb,CAAiB,EAAjB,EAAqB,EAArB;AAEA,eAAOH,MAAP;AACD;AAzDH;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgED;;KAvEQxB,kB;AAyET,eAAeA,kBAAf","sourcesContent":["import \"antd/dist/antd.css\";\nimport React from \"react\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport DeviceDrawer from \"./Components/DrawerDevice\";\nimport * as THREE from \"three\";\nimport testingData from \"./Components/Data/testdata.json\";\n\nfunction AppNetworkTopology() {\n  const handleClick = (node) => {\n    const getHostName = testingData.filter((thisDevice) =>\n      thisDevice.id.includes(\"192.168.1.100\")\n    );\n    alert(getHostName);\n  };\n  return (\n    <div>\n      <DeviceDrawer />\n      <ForceGraph3D\n        graphData={{\n          nodes: [\n            {\n              id: \"192.168.1.100\",\n              name: \"DB-01\",\n              type: \"DB\",\n              value: \"10\",\n              os: \"Linux\",\n              mac_addr: \"aa:aa:aa:aa:aa:aa\",\n            },\n            {\n              id: \"192.168.1.101\",\n              name: \"PC-01\",\n              type: \"PC\",\n              value: \"1\",\n              mac_addr: \"bb:bb:bb:bb:bb:bb\",\n            },\n            {\n              id: \"192.168.1.102\",\n              name: \"PC-02\",\n              type: \"PC\",\n              value: \"1\",\n              mac_addr: \"cc:cc:cc:cc:cc:cc\",\n            },\n          ],\n          links: [\n            {\n              source: \"192.168.1.100\",\n              target: \"192.168.1.101\",\n            },\n            {\n              source: \"192.168.1.101\",\n              target: \"192.168.1.102\",\n            },\n            {\n              source: \"192.168.1.100\",\n              target: \"192.168.1.102\",\n            },\n          ],\n        }}\n        onNodeRightClick={handleClick}\n        linkDirectionalParticles={1}\n        linkDirectionalParticleSpeed={0.01}\n        nodeThreeObject={({ type }) => {\n          let imgTexture = null;\n          if (type === \"DB\") {\n            imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\n          } else if (type === \"PC\") {\n            imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\n          }\n\n          const material = new THREE.SpriteMaterial({ map: imgTexture });\n          const sprite = new THREE.Sprite(material);\n          sprite.scale.set(12, 12);\n\n          return sprite;\n        }}\n      />\n    </div>\n  );\n}\n\nexport default AppNetworkTopology;\n"]},"metadata":{},"sourceType":"module"}