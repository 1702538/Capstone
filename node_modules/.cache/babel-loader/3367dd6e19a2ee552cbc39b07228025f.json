{"ast":null,"code":"var _jsxFileName = \"C:\\\\Capstone\\\\capstone-project\\\\src\\\\NetworkTopology.js\",\n    _s = $RefreshSig$();\n\nimport \"antd/dist/antd.css\";\nimport { ForceGraph2D } from \"react-force-graph\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AppNetworkTopology() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n      graphData: {\n        nodes: [{\n          id: \"192.168.1.100\",\n          name: \"Server\",\n          val: 1\n        }, {\n          id: \"192.168.1.101\",\n          name: \"PC-1\",\n          val: 2\n        }, {\n          id: \"192.168.1.102\",\n          name: \"PC-2\",\n          val: 3\n        }],\n        links: [{\n          source: \"192.168.1.100\",\n          target: \"192.168.1.101\"\n        }, {\n          source: \"192.168.1.100\",\n          target: \"192.168.1.102\"\n        }, {\n          source: \"192.168.1.101\",\n          target: \"192.168.1.102\"\n        }]\n      },\n      nodeLabel: \"name\",\n      onNodeRightClick: FocusGraph\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n\n_c = AppNetworkTopology;\nconst {\n  useRef,\n  useCallback\n} = React;\n\nconst FocusGraph = () => {\n  _s();\n\n  const fgRef = useRef();\n  const handleClick = useCallback(node => {\n    // Aim at node from outside it\n    const distance = 40;\n    const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n  });\n};\n\n_s(FocusGraph, \"xEYw4CK407sWAZatzlZzGDPKBoo=\");\n\n_c2 = FocusGraph;\n\nfunction genRandomTree() {\n  let N = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 300;\n  let reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return {\n    nodes: [...Array(N).keys()].map(i => ({\n      id: i\n    })),\n    links: [...Array(N).keys()].filter(id => id).map(id => ({\n      [reverse ? \"target\" : \"source\"]: id,\n      [reverse ? \"source\" : \"target\"]: Math.round(Math.random() * (id - 1))\n    }))\n  };\n}\n\nexport default AppNetworkTopology;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AppNetworkTopology\");\n$RefreshReg$(_c2, \"FocusGraph\");","map":{"version":3,"sources":["C:/Capstone/capstone-project/src/NetworkTopology.js"],"names":["ForceGraph2D","React","AppNetworkTopology","nodes","id","name","val","links","source","target","FocusGraph","useRef","useCallback","fgRef","handleClick","node","distance","distRatio","Math","hypot","x","y","z","genRandomTree","N","reverse","Array","keys","map","i","filter","round","random"],"mappings":";;;AAAA,OAAO,oBAAP;AACA,SAASA,YAAT,QAA6B,mBAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,kBAAT,GAA8B;AAC5B,sBACE;AAAA,2BACE,QAAC,YAAD;AACE,MAAA,SAAS,EAAE;AACTC,QAAAA,KAAK,EAAE,CACL;AACEC,UAAAA,EAAE,EAAE,eADN;AAEEC,UAAAA,IAAI,EAAE,QAFR;AAGEC,UAAAA,GAAG,EAAE;AAHP,SADK,EAML;AACEF,UAAAA,EAAE,EAAE,eADN;AAEEC,UAAAA,IAAI,EAAE,MAFR;AAGEC,UAAAA,GAAG,EAAE;AAHP,SANK,EAWL;AACEF,UAAAA,EAAE,EAAE,eADN;AAEEC,UAAAA,IAAI,EAAE,MAFR;AAGEC,UAAAA,GAAG,EAAE;AAHP,SAXK,CADE;AAkBTC,QAAAA,KAAK,EAAE,CACL;AACEC,UAAAA,MAAM,EAAE,eADV;AAEEC,UAAAA,MAAM,EAAE;AAFV,SADK,EAKL;AACED,UAAAA,MAAM,EAAE,eADV;AAEEC,UAAAA,MAAM,EAAE;AAFV,SALK,EASL;AACED,UAAAA,MAAM,EAAE,eADV;AAEEC,UAAAA,MAAM,EAAE;AAFV,SATK;AAlBE,OADb;AAkCE,MAAA,SAAS,EAAC,MAlCZ;AAmCE,MAAA,gBAAgB,EAAEC;AAnCpB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAyCD;;KA1CQR,kB;AA4CT,MAAM;AAAES,EAAAA,MAAF;AAAUC,EAAAA;AAAV,IAA0BX,KAAhC;;AAEA,MAAMS,UAAU,GAAG,MAAM;AAAA;;AACvB,QAAMG,KAAK,GAAGF,MAAM,EAApB;AAEA,QAAMG,WAAW,GAAGF,WAAW,CAAEG,IAAD,IAAU;AACxC;AACA,UAAMC,QAAQ,GAAG,EAAjB;AACA,UAAMC,SAAS,GAAG,IAAID,QAAQ,GAAGE,IAAI,CAACC,KAAL,CAAWJ,IAAI,CAACK,CAAhB,EAAmBL,IAAI,CAACM,CAAxB,EAA2BN,IAAI,CAACO,CAAhC,CAAjC;AACD,GAJ8B,CAA/B;AAKD,CARD;;GAAMZ,U;;MAAAA,U;;AAUN,SAASa,aAAT,GAAiD;AAAA,MAA1BC,CAA0B,uEAAtB,GAAsB;AAAA,MAAjBC,OAAiB,uEAAP,KAAO;AAC/C,SAAO;AACLtB,IAAAA,KAAK,EAAE,CAAC,GAAGuB,KAAK,CAACF,CAAD,CAAL,CAASG,IAAT,EAAJ,EAAqBC,GAArB,CAA0BC,CAAD,KAAQ;AAAEzB,MAAAA,EAAE,EAAEyB;AAAN,KAAR,CAAzB,CADF;AAELtB,IAAAA,KAAK,EAAE,CAAC,GAAGmB,KAAK,CAACF,CAAD,CAAL,CAASG,IAAT,EAAJ,EACJG,MADI,CACI1B,EAAD,IAAQA,EADX,EAEJwB,GAFI,CAECxB,EAAD,KAAS;AACZ,OAACqB,OAAO,GAAG,QAAH,GAAc,QAAtB,GAAiCrB,EADrB;AAEZ,OAACqB,OAAO,GAAG,QAAH,GAAc,QAAtB,GAAiCP,IAAI,CAACa,KAAL,CAAWb,IAAI,CAACc,MAAL,MAAiB5B,EAAE,GAAG,CAAtB,CAAX;AAFrB,KAAT,CAFA;AAFF,GAAP;AASD;;AAED,eAAeF,kBAAf","sourcesContent":["import \"antd/dist/antd.css\";\nimport { ForceGraph2D } from \"react-force-graph\";\nimport React from \"react\";\n\nfunction AppNetworkTopology() {\n  return (\n    <div>\n      <ForceGraph2D\n        graphData={{\n          nodes: [\n            {\n              id: \"192.168.1.100\",\n              name: \"Server\",\n              val: 1,\n            },\n            {\n              id: \"192.168.1.101\",\n              name: \"PC-1\",\n              val: 2,\n            },\n            {\n              id: \"192.168.1.102\",\n              name: \"PC-2\",\n              val: 3,\n            },\n          ],\n          links: [\n            {\n              source: \"192.168.1.100\",\n              target: \"192.168.1.101\",\n            },\n            {\n              source: \"192.168.1.100\",\n              target: \"192.168.1.102\",\n            },\n            {\n              source: \"192.168.1.101\",\n              target: \"192.168.1.102\",\n            },\n          ],\n        }}\n        nodeLabel=\"name\"\n        onNodeRightClick={FocusGraph}\n      />\n    </div>\n  );\n}\n\nconst { useRef, useCallback } = React;\n\nconst FocusGraph = () => {\n  const fgRef = useRef();\n\n  const handleClick = useCallback((node) => {\n    // Aim at node from outside it\n    const distance = 40;\n    const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n  });\n};\n\nfunction genRandomTree(N = 300, reverse = false) {\n  return {\n    nodes: [...Array(N).keys()].map((i) => ({ id: i })),\n    links: [...Array(N).keys()]\n      .filter((id) => id)\n      .map((id) => ({\n        [reverse ? \"target\" : \"source\"]: id,\n        [reverse ? \"source\" : \"target\"]: Math.round(Math.random() * (id - 1)),\n      })),\n  };\n}\n\nexport default AppNetworkTopology;\n"]},"metadata":{},"sourceType":"module"}