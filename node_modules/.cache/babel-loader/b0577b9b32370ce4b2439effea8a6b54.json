{"ast":null,"code":"var _jsxFileName = \"C:\\\\SourceTree\\\\capstone-project\\\\src\\\\ManageDevices.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, memo } from \"react\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport { Form, Layout, Table, Space, Popconfirm } from \"antd\";\nimport ManageDrawer from \"./Components/DrawerManage\";\nimport device_data from \"./Components/Data/device_data.json\";\nimport { render } from \"@testing-library/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AppManageDevice() {\n  _s();\n\n  const [manageDrawerStatus, setManageDrawerStatus] = useState(false);\n  const [manageDeviceDetails, setManageDeviceDetails] = useState({});\n  const [thisDeviceData, updateDeviceTableData] = useState(device_data);\n  const [deviceForm] = Form.useForm();\n  const columns = [{\n    title: \"Action\",\n    key: \"action\",\n    width: 150,\n    render: record => /*#__PURE__*/_jsxDEV(Space, {\n      size: \"middle\",\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        onClick: () => onEditClick(record),\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Popconfirm, {\n        title: \"Are you sure?\",\n        okText: \"Yes\",\n        cancelText: \"No\",\n        placement: \"bottom\",\n        onConfirm: () => tester_delete(record),\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          children: \"Remove\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this)\n  }, {\n    title: \"IP Address\",\n    dataIndex: \"id\",\n    key: \"id\",\n    width: 150\n  }, {\n    title: \"Hostname\",\n    dataIndex: \"name\",\n    key: \"name\",\n    width: 150\n  }, {\n    title: \"Device Type\",\n    dataIndex: \"type\",\n    key: \"type\",\n    width: 150\n  }, {\n    title: \"OS Version\",\n    dataIndex: \"os\",\n    key: \"os\",\n    width: 150\n  }, {\n    title: \"Mac Address\",\n    dataIndex: \"mac_addr\",\n    key: \"mac_addr\",\n    width: 150\n  }, {\n    title: \"Ownership\",\n    dataIndex: \"ownership\",\n    key: \"ownership\",\n    width: 150\n  }]; // When user clicks on \"Edit\", two functions will run:\n  // - openManageDrawerStatus - To open device drawer\n  // - setManageDeviceDetails - Pass the record to FormDeviceMange page (for the Revert button)\n  // - setFormValue - Directly update the values in the Form component\n\n  function onEditClick(record) {\n    openManageDrawerStatus();\n    setManageDeviceDetails(record);\n    setFormValues(record);\n  }\n\n  const openManageDrawerStatus = () => {\n    setManageDrawerStatus(true);\n  };\n\n  const closeMangeDeviceDrawer = () => {\n    setManageDrawerStatus(false);\n  };\n\n  const setFormValues = record => {\n    deviceForm.setFieldsValue({\n      hostname: record.name,\n      device_type: record.type,\n      os_version: record.os,\n      mac_address: record.mac_addr,\n      ownership: record.ownership\n    });\n  }; // To update the values in the table based on the new\n\n\n  const updatedFormValues = updated => {\n    // Sample console log for verification only\n    console.log(\"Updated hostname to\", updated.hostname, \"where IP Address is\", manageDeviceDetails.id);\n    updateTableValues(updated);\n  }; // Function to update the table with the updated values from the user\n\n\n  function updateTableValues(updated) {\n    for (var i = 0; i < thisDeviceData.length; i++) {\n      if (thisDeviceData[i].id === manageDeviceDetails.id) {\n        thisDeviceData[i].name = updated.hostname;\n        thisDeviceData[i].type = updated.device_type;\n        thisDeviceData[i].os = updated.os_version;\n        thisDeviceData[i].mac_addr = updated.mac_address;\n        thisDeviceData[i].ownership = updated.ownership;\n        break;\n      }\n    }\n\n    updateDeviceTableData([...thisDeviceData]);\n    console.log(\"Table Updated:\", thisDeviceData[i].name);\n    console.log(thisDeviceData);\n  }\n\n  function tester_delete(recordToDelete, device_data) {\n    for (var i = 0; i < thisDeviceData.length; i++) {\n      if (thisDeviceData[i].id === recordToDelete.id) {\n        thisDeviceData.splice(i, 1);\n        console.log(device_data);\n        break;\n      }\n    }\n\n    console.log(recordToDelete.id, \"has been deleted\");\n    console.log(thisDeviceData);\n    updateDeviceTableData([...thisDeviceData]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ManageDrawer, {\n      manageDrawerStatus: manageDrawerStatus,\n      manageDeviceDetails: manageDeviceDetails,\n      closeMangeDeviceDrawer: closeMangeDeviceDrawer,\n      deviceForm: deviceForm,\n      updatedFormValues: updatedFormValues\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Layout, {\n      style: {\n        marginLeft: 199\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        dataSource: [...thisDeviceData],\n        columns: columns\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AppManageDevice, \"HZTMtc/8eEaqXRTPvc80jb2pcgI=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = AppManageDevice;\nexport default AppManageDevice;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppManageDevice\");","map":{"version":3,"sources":["C:/SourceTree/capstone-project/src/ManageDevices.js"],"names":["React","useState","memo","Form","Layout","Table","Space","Popconfirm","ManageDrawer","device_data","render","AppManageDevice","manageDrawerStatus","setManageDrawerStatus","manageDeviceDetails","setManageDeviceDetails","thisDeviceData","updateDeviceTableData","deviceForm","useForm","columns","title","key","width","record","onEditClick","tester_delete","dataIndex","openManageDrawerStatus","setFormValues","closeMangeDeviceDrawer","setFieldsValue","hostname","name","device_type","type","os_version","os","mac_address","mac_addr","ownership","updatedFormValues","updated","console","log","id","updateTableValues","i","length","recordToDelete","splice","marginLeft"],"mappings":"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","sourcesContent":["import React, { useState, memo } from \"react\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport { Form, Layout, Table, Space, Popconfirm } from \"antd\";\nimport ManageDrawer from \"./Components/DrawerManage\";\nimport device_data from \"./Components/Data/device_data.json\";\nimport { render } from \"@testing-library/react\";\n\nfunction AppManageDevice() {\n  const [manageDrawerStatus, setManageDrawerStatus] = useState(false);\n  const [manageDeviceDetails, setManageDeviceDetails] = useState({});\n  const [thisDeviceData, updateDeviceTableData] = useState(device_data);\n\n  const [deviceForm] = Form.useForm();\n\n  const columns = [\n    {\n      title: \"Action\",\n      key: \"action\",\n      width: 150,\n      render: (record) => (\n        <Space size=\"middle\">\n          <a onClick={() => onEditClick(record)}>Edit</a>\n          <Popconfirm\n            title=\"Are you sure?\"\n            okText=\"Yes\"\n            cancelText=\"No\"\n            placement=\"bottom\"\n            onConfirm={() => tester_delete(record)}\n          >\n            <a>Remove</a>\n          </Popconfirm>\n        </Space>\n      ),\n    },\n    {\n      title: \"IP Address\",\n      dataIndex: \"id\",\n      key: \"id\",\n      width: 150,\n    },\n    {\n      title: \"Hostname\",\n      dataIndex: \"name\",\n      key: \"name\",\n      width: 150,\n    },\n    {\n      title: \"Device Type\",\n      dataIndex: \"type\",\n      key: \"type\",\n      width: 150,\n    },\n    {\n      title: \"OS Version\",\n      dataIndex: \"os\",\n      key: \"os\",\n      width: 150,\n    },\n    {\n      title: \"Mac Address\",\n      dataIndex: \"mac_addr\",\n      key: \"mac_addr\",\n      width: 150,\n    },\n    {\n      title: \"Ownership\",\n      dataIndex: \"ownership\",\n      key: \"ownership\",\n      width: 150,\n    },\n  ];\n\n  // When user clicks on \"Edit\", two functions will run:\n  // - openManageDrawerStatus - To open device drawer\n  // - setManageDeviceDetails - Pass the record to FormDeviceMange page (for the Revert button)\n  // - setFormValue - Directly update the values in the Form component\n  function onEditClick(record) {\n    openManageDrawerStatus();\n    setManageDeviceDetails(record);\n    setFormValues(record);\n  }\n\n  const openManageDrawerStatus = () => {\n    setManageDrawerStatus(true);\n  };\n\n  const closeMangeDeviceDrawer = () => {\n    setManageDrawerStatus(false);\n  };\n\n  const setFormValues = (record) => {\n    deviceForm.setFieldsValue({\n      hostname: record.name,\n      device_type: record.type,\n      os_version: record.os,\n      mac_address: record.mac_addr,\n      ownership: record.ownership,\n    });\n  };\n\n  // To update the values in the table based on the new\n  const updatedFormValues = (updated) => {\n    // Sample console log for verification only\n    console.log(\n      \"Updated hostname to\",\n      updated.hostname,\n      \"where IP Address is\",\n      manageDeviceDetails.id\n    );\n\n    updateTableValues(updated);\n  };\n\n  // Function to update the table with the updated values from the user\n  function updateTableValues(updated) {\n    for (var i = 0; i < thisDeviceData.length; i++) {\n      if (thisDeviceData[i].id === manageDeviceDetails.id) {\n        thisDeviceData[i].name = updated.hostname;\n        thisDeviceData[i].type = updated.device_type;\n        thisDeviceData[i].os = updated.os_version;\n        thisDeviceData[i].mac_addr = updated.mac_address;\n        thisDeviceData[i].ownership = updated.ownership;\n        break;\n      }\n    }\n    updateDeviceTableData([...thisDeviceData]);\n    console.log(\"Table Updated:\", thisDeviceData[i].name);\n    console.log(thisDeviceData);\n  }\n\n  function tester_delete(recordToDelete, device_data) {\n    for (var i = 0; i < thisDeviceData.length; i++) {\n      if (thisDeviceData[i].id === recordToDelete.id) {\n        thisDeviceData.splice(i, 1);\n        console.log(device_data);\n        break;\n      }\n    }\n    console.log(recordToDelete.id, \"has been deleted\");\n    console.log(thisDeviceData);\n    updateDeviceTableData([...thisDeviceData]);\n  }\n\n  return (\n    <div>\n      <ManageDrawer\n        manageDrawerStatus={manageDrawerStatus}\n        manageDeviceDetails={manageDeviceDetails}\n        closeMangeDeviceDrawer={closeMangeDeviceDrawer}\n        deviceForm={deviceForm}\n        updatedFormValues={updatedFormValues}\n      />\n      <Layout style={{ marginLeft: 199 }}>\n        <Table dataSource={[...thisDeviceData]} columns={columns} />\n      </Layout>\n    </div>\n  );\n}\n\nexport default AppManageDevice;\n"]},"metadata":{},"sourceType":"module"}