{"ast":null,"code":"var _jsxFileName = \"C:\\\\SourceTree\\\\capstone-project\\\\src\\\\NetworkTopology.js\";\nimport \"antd/dist/antd.css\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport React from \"react\";\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AppNetworkTopology() {\n  const handleClick = node => {\n    alert(node.id);\n  }; // const imgs = [\"hosting.png\"];\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ForceGraph3D, {\n      graphData: {\n        nodes: [{\n          id: \"192.168.1.100\",\n          name: \"DB-01\",\n          type: \"DB\",\n          value: \"10\"\n        }, {\n          id: \"192.168.1.101\",\n          name: \"PC-01\",\n          type: \"PC\",\n          value: \"1\"\n        }, {\n          id: \"192.168.1.102\",\n          name: \"PC-02\",\n          type: \"PC\",\n          value: \"1\"\n        }],\n        links: [{\n          source: \"192.168.1.100\",\n          target: \"192.168.1.101\"\n        }, {\n          source: \"192.168.1.101\",\n          target: \"192.168.1.102\"\n        }, {\n          source: \"192.168.1.100\",\n          target: \"192.168.1.102\"\n        }]\n      },\n      onNodeRightClick: handleClick,\n      linkDirectionalParticles: 1,\n      onNodeHover: node => {\n        highlightNodes.clear();\n        highlightLinks.clear();\n\n        if (node) {\n          highlightNodes.add(node);\n          node.neighbors.forEach(neighbor => highlightNodes.add(neighbor));\n          node.links.forEach(link => highlightLinks.add(link));\n        }\n\n        hoverNode = node || null;\n      },\n      linkDirectionalParticleSpeed: 0.01\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n\n_c = AppNetworkTopology;\n\nfunction genRandomTree() {\n  let N = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 300;\n  let reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return {\n    nodes: [...Array(N).keys()].map(i => ({\n      id: i\n    })),\n    links: [...Array(N).keys()].filter(id => id).map(id => ({\n      [reverse ? \"target\" : \"source\"]: id,\n      [reverse ? \"source\" : \"target\"]: Math.round(Math.random() * (id - 1))\n    }))\n  };\n}\n\nexport default AppNetworkTopology;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppNetworkTopology\");","map":{"version":3,"sources":["C:/SourceTree/capstone-project/src/NetworkTopology.js"],"names":["ForceGraph3D","React","THREE","AppNetworkTopology","handleClick","node","alert","id","nodes","name","type","value","links","source","target","highlightNodes","clear","highlightLinks","add","neighbors","forEach","neighbor","link","hoverNode","genRandomTree","N","reverse","Array","keys","map","i","filter","Math","round","random"],"mappings":"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","sourcesContent":["import \"antd/dist/antd.css\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport React from \"react\";\nimport * as THREE from \"three\";\n\nfunction AppNetworkTopology() {\n  const handleClick = (node) => {\n    alert(node.id);\n  };\n\n  // const imgs = [\"hosting.png\"];\n\n  return (\n    <div>\n      <ForceGraph3D\n        graphData={{\n          nodes: [\n            {\n              id: \"192.168.1.100\",\n              name: \"DB-01\",\n              type: \"DB\",\n              value: \"10\",\n            },\n            {\n              id: \"192.168.1.101\",\n              name: \"PC-01\",\n              type: \"PC\",\n              value: \"1\",\n            },\n            {\n              id: \"192.168.1.102\",\n              name: \"PC-02\",\n              type: \"PC\",\n              value: \"1\",\n            },\n          ],\n          links: [\n            {\n              source: \"192.168.1.100\",\n              target: \"192.168.1.101\",\n            },\n            {\n              source: \"192.168.1.101\",\n              target: \"192.168.1.102\",\n            },\n            {\n              source: \"192.168.1.100\",\n              target: \"192.168.1.102\",\n            },\n          ],\n        }}\n        onNodeRightClick={handleClick}\n        linkDirectionalParticles={1}\n        onNodeHover={(node) => {\n          highlightNodes.clear();\n          highlightLinks.clear();\n          if (node) {\n            highlightNodes.add(node);\n            node.neighbors.forEach((neighbor) => highlightNodes.add(neighbor));\n            node.links.forEach((link) => highlightLinks.add(link));\n          }\n\n          hoverNode = node || null;\n        }}\n        linkDirectionalParticleSpeed={0.01}\n      />\n    </div>\n  );\n}\n\nfunction genRandomTree(N = 300, reverse = false) {\n  return {\n    nodes: [...Array(N).keys()].map((i) => ({ id: i })),\n    links: [...Array(N).keys()]\n      .filter((id) => id)\n      .map((id) => ({\n        [reverse ? \"target\" : \"source\"]: id,\n        [reverse ? \"source\" : \"target\"]: Math.round(Math.random() * (id - 1)),\n      })),\n  };\n}\n\nexport default AppNetworkTopology;\n"]},"metadata":{},"sourceType":"module"}