{"ast":null,"code":"var _jsxFileName = \"C:\\\\SourceTree\\\\capstone-project\\\\src\\\\NetworkTopology.js\",\n    _s = $RefreshSig$();\n\nimport \"antd/dist/antd.css\";\nimport { Layout, Button, Affix } from \"antd\";\nimport React, { useState, useRef, useCallback, useEffect } from \"react\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport DeviceDrawer from \"./Components/DrawerDevice\";\nimport NetworkDrawer from \"./Components/DrawerNetwork\";\nimport * as THREE from \"three\";\nimport networkData from \"./Components/Data/network.json\";\nimport device_data from \"./Components/Data/device_data.json\";\nimport relation_data from \"./Components/Data/relation_data.json\"; // Functional Component for Network Topology Graph Page UI\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AppNetworkTopology() {\n  _s();\n\n  // UseState() functions for maintaining the states\n  const [deviceDrawerStatus, setDeviceDrawerStatus] = useState(false); // To open / close the Device Drawer component\n\n  const [networkDrawerStatus, setNetworkDrawerStatus] = useState(false); // To open / close the Network Drawer component\n\n  const [deviceDetails, setDeviceDetails] = useState({}); // To store / set the device details for rendering\n\n  const [networkDetails, setNetworkDetails] = useState({}); // To store / set the network details for rendering\n\n  const [groupByDevice, setGroupByDevice] = useState(); // To store the number of devices by device type (for statistical boxes)\n\n  const [deviceCounter, setDeviceCounter] = useState(); // To store the total number devices (for statistical boxes)\n\n  const [hoverNode, setHoverNode] = useState(); // To store the details of the selected network node (Network Topology Graph)\n\n  const [deviceConnected, setDeviceConnected] = useState(); // To store the adjacent devices (after user click on the network node)\n\n  const [alertData, setAlertData] = useState([]); // To store the information\n  // getData() with fetch(), run GET (via fetch) to retrieve the latest data from JSON Server\n  // Store latest data to alertData (via setAlertData())\n\n  useEffect(() => {\n    getData();\n  }); // getData() function that utilises the fetch API to retrieve data from the JSON Server\n  // After data is retrieved, data is stored in alertData (via setAlertData)\n\n  const getData = async () => {\n    await fetch(\"http://localhost:3001/alerts\").then(response => response.json()).then(data => setAlertData(data)).catch(err => console.log(err));\n  }; // Function to close the Device Drawer component\n  // setDeviceDrawerStatus - Set the Device Drawer's \"visible\" state to \"false\"\n\n\n  const closeDeviceDrawer = () => {\n    setDeviceDrawerStatus(false);\n  }; // Function to close the Network Drawer component\n  // setNetworkDrawerStatus - Set the Network Drawer's \"visible\" state to \"false\"\n\n\n  const closeNetworkDrawer = () => {\n    setNetworkDrawerStatus(false);\n  };\n\n  const handleNetworkStatisticsButton = () => {\n    setDeviceDrawerStatus(false);\n    setNetworkDrawerStatus(true);\n    setNetworkDetails(networkData[0]);\n    setDeviceCounter(device_data.length);\n    setGroupByDevice(groupByDeviceType());\n  };\n\n  const groupByDeviceType = () => {\n    var result = {};\n\n    for (var i = 0; i < device_data.length; i++) {\n      if (!result[device_data[i][\"status\"]]) {\n        result[device_data[i][\"status\"]] = 0;\n      }\n\n      result[device_data[i][\"status\"]]++;\n    }\n\n    return result;\n  };\n\n  const fgRef = useRef();\n  const zoomInNode = useCallback(node => {\n    setDeviceDrawerStatus(true);\n    setNetworkDrawerStatus(false);\n    setDeviceDetails(node);\n    setHoverNode(node); // Camera distance of node\n\n    const distance = 150;\n    const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n    fgRef.current.cameraPosition({\n      x: node.x * distRatio,\n      y: node.y * distRatio,\n      z: node.z * distRatio\n    }, // new position\n    node, // lookAt ({ x, y, z })\n    3000 // ms transition duration\n    );\n  }, [fgRef]);\n  var this_array = [];\n\n  const handleNodeHover = node => {};\n\n  const updateNodeIcons = useCallback(node => {\n    let imgTexture = null;\n    this_array = [];\n\n    if (hoverNode) {\n      for (var i = 0; i < relation_data.length; i++) {\n        if (relation_data[i].source.id === hoverNode.id) {\n          this_array.push(relation_data[i].target.id); // } else if (relation_data[i].target.id === hoverNode.id) {\n          //   this_array.push(relation_data[i].source.id);\n        }\n      }\n    }\n\n    setDeviceConnected(this_array);\n\n    if (node === hoverNode) {\n      for (var i = 0; i < relation_data.length; i++) {\n        if (relation_data[i].source.id === node.id) {\n          this_array.push(relation_data[i].target.id); // } else if (relation_data[i].target.id === node.id) {\n          //   this_array.push(relation_data[i].source.id);\n        }\n      }\n\n      if (node.type === \"DB\") {\n        if (node.status === \"Active\") {\n          imgTexture = new THREE.TextureLoader().load(\"assets/online_db_selected.png\");\n        } else if (node.status === \"Inactive\") {\n          imgTexture = new THREE.TextureLoader().load(\"assets/inactive_db_selected.png\");\n        } else {\n          imgTexture = new THREE.TextureLoader().load(\"assets/offline_db_selected.png\");\n        }\n      } else if (node.type === \"PC\") {\n        if (node.status === \"Active\") {\n          imgTexture = new THREE.TextureLoader().load(\"assets/online_pc_selected.png\");\n        } else if (node.status === \"Inactive\") {\n          imgTexture = new THREE.TextureLoader().load(\"assets/inactive_pc_selected.png\");\n        } else {\n          imgTexture = new THREE.TextureLoader().load(\"assets/offline_pc_selected.png\");\n        }\n      } else if (node.type === \"Router\") {\n        if (node.status === \"Active\") {\n          imgTexture = new THREE.TextureLoader().load(\"assets/online_router_selected.png\");\n        } else if (node.status === \"Inactive\") {\n          imgTexture = new THREE.TextureLoader().load(\"assets/inactive_router_selected.png\");\n        } else {\n          imgTexture = new THREE.TextureLoader().load(\"assets/offline_router_selected.png\");\n        }\n      } // For nodes that are not selected\n\n    } else {\n      if (node.type === \"DB\") {\n        if (node.status === \"Active\") {\n          imgTexture = new THREE.TextureLoader().load(\"assets/online_db.png\");\n        } else if (node.status === \"Inactive\") {\n          imgTexture = new THREE.TextureLoader().load(\"assets/inactive_db.png\");\n        } else {\n          imgTexture = new THREE.TextureLoader().load(\"assets/offline_db.png\");\n        }\n      } else if (node.type === \"PC\") {\n        if (node.status === \"Active\") {\n          imgTexture = new THREE.TextureLoader().load(\"assets/online_pc.png\");\n        } else if (node.status === \"Inactive\") {\n          imgTexture = new THREE.TextureLoader().load(\"assets/inactive_pc.png\");\n        } else {\n          imgTexture = new THREE.TextureLoader().load(\"assets/offline_pc.png\");\n        }\n      } else if (node.type === \"Router\") {\n        if (node.status === \"Active\") {\n          imgTexture = new THREE.TextureLoader().load(\"assets/online_router.png\");\n        } else if (node.status === \"Inactive\") {\n          imgTexture = new THREE.TextureLoader().load(\"assets/inactive_router.png\");\n        } else {\n          imgTexture = new THREE.TextureLoader().load(\"assets/offline_router.png\");\n        }\n      }\n    }\n\n    const material = new THREE.SpriteMaterial({\n      map: imgTexture\n    });\n    const sprite = new THREE.Sprite(material);\n    sprite.scale.set(12, 12);\n    return sprite;\n  }); // <Layout style={{ marginLeft: 199, zIndex: -1 }}>\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(ForceGraph3D, {\n        width: window.innerWidth,\n        height: window.innerHeight - 1,\n        ref: fgRef,\n        graphData: {\n          nodes: device_data,\n          links: relation_data\n        },\n        nodeLabel: node => `<div style=\"background: #1F1E26; padding: 5px 10px 8px 10px; border-radius: 10px; user-select: none\">\n            <span>Name: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>${node.name}</b></span><br/>\n            <span>IP Addr: &nbsp;&nbsp;&nbsp;&nbsp;<b>${node.id}</b></span><br/>\n            <span>Mac Addr: &nbsp;<b>${node.mac_addr}</b></span>\n            </div>`,\n        linkWidth: 1,\n        onNodeRightClick: zoomInNode,\n        onNodeHover: handleNodeHover // linkDirectionalParticles={1}\n        // linkDirectionalParticleSpeed={0.01}\n        // onNodeHover={handleHover}\n        // onNodeDragEnd={(node) => {\n        //   node.fx = node.x;\n        //   node.fy = node.y;\n        //   node.fz = node.z;\n        // }}\n        ,\n        nodeThreeObject: updateNodeIcons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Affix, {\n      style: {\n        position: \"absolute\",\n        top: 120,\n        left: 10,\n        zIndex: 1\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: handleNetworkStatisticsButton,\n        children: \"Show Network Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DeviceDrawer, {\n      deviceDrawerStatus: deviceDrawerStatus,\n      deviceDetails: deviceDetails,\n      closeDeviceDrawer: closeDeviceDrawer,\n      alertData: alertData,\n      deviceConnected: deviceConnected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NetworkDrawer, {\n      networkDrawerStatus: networkDrawerStatus,\n      networkDetails: networkDetails,\n      groupByDevice: groupByDevice,\n      deviceCounter: deviceCounter,\n      closeNetworkDrawer: closeNetworkDrawer,\n      alertData: alertData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AppNetworkTopology, \"WXnwAmez9RKzYDEzCGUChhW2VE8=\");\n\n_c = AppNetworkTopology;\nexport default _c2 = /*#__PURE__*/React.memo(AppNetworkTopology);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AppNetworkTopology\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/SourceTree/capstone-project/src/NetworkTopology.js"],"names":["Layout","Button","Affix","React","useState","useRef","useCallback","useEffect","ForceGraph3D","DeviceDrawer","NetworkDrawer","THREE","networkData","device_data","relation_data","AppNetworkTopology","deviceDrawerStatus","setDeviceDrawerStatus","networkDrawerStatus","setNetworkDrawerStatus","deviceDetails","setDeviceDetails","networkDetails","setNetworkDetails","groupByDevice","setGroupByDevice","deviceCounter","setDeviceCounter","hoverNode","setHoverNode","deviceConnected","setDeviceConnected","alertData","setAlertData","getData","fetch","then","response","json","data","catch","err","console","log","closeDeviceDrawer","closeNetworkDrawer","handleNetworkStatisticsButton","length","groupByDeviceType","result","i","fgRef","zoomInNode","node","distance","distRatio","Math","hypot","x","y","z","current","cameraPosition","this_array","handleNodeHover","updateNodeIcons","imgTexture","source","id","push","target","type","status","TextureLoader","load","material","SpriteMaterial","map","sprite","Sprite","scale","set","window","innerWidth","innerHeight","nodes","links","name","mac_addr","position","top","left","zIndex","memo"],"mappings":"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","sourcesContent":["import \"antd/dist/antd.css\";\r\nimport { Layout, Button, Affix } from \"antd\";\r\nimport React, { useState, useRef, useCallback, useEffect } from \"react\";\r\n\r\nimport { ForceGraph3D } from \"react-force-graph\";\r\nimport DeviceDrawer from \"./Components/DrawerDevice\";\r\nimport NetworkDrawer from \"./Components/DrawerNetwork\";\r\nimport * as THREE from \"three\";\r\nimport networkData from \"./Components/Data/network.json\";\r\nimport device_data from \"./Components/Data/device_data.json\";\r\nimport relation_data from \"./Components/Data/relation_data.json\";\r\n\r\n// Functional Component for Network Topology Graph Page UI\r\nfunction AppNetworkTopology() {\r\n  // UseState() functions for maintaining the states\r\n  const [deviceDrawerStatus, setDeviceDrawerStatus] = useState(false); // To open / close the Device Drawer component\r\n  const [networkDrawerStatus, setNetworkDrawerStatus] = useState(false); // To open / close the Network Drawer component\r\n  const [deviceDetails, setDeviceDetails] = useState({}); // To store / set the device details for rendering\r\n  const [networkDetails, setNetworkDetails] = useState({}); // To store / set the network details for rendering\r\n  const [groupByDevice, setGroupByDevice] = useState(); // To store the number of devices by device type (for statistical boxes)\r\n  const [deviceCounter, setDeviceCounter] = useState(); // To store the total number devices (for statistical boxes)\r\n  const [hoverNode, setHoverNode] = useState(); // To store the details of the selected network node (Network Topology Graph)\r\n  const [deviceConnected, setDeviceConnected] = useState(); // To store the adjacent devices (after user click on the network node)\r\n  const [alertData, setAlertData] = useState([]); // To store the information\r\n\r\n  // getData() with fetch(), run GET (via fetch) to retrieve the latest data from JSON Server\r\n  // Store latest data to alertData (via setAlertData())\r\n  useEffect(() => {\r\n    getData();\r\n  });\r\n\r\n  // getData() function that utilises the fetch API to retrieve data from the JSON Server\r\n  // After data is retrieved, data is stored in alertData (via setAlertData)\r\n  const getData = async () => {\r\n    await fetch(\"http://localhost:3001/alerts\")\r\n      .then((response) => response.json())\r\n      .then((data) => setAlertData(data))\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  // Function to close the Device Drawer component\r\n  // setDeviceDrawerStatus - Set the Device Drawer's \"visible\" state to \"false\"\r\n  const closeDeviceDrawer = () => {\r\n    setDeviceDrawerStatus(false);\r\n  };\r\n\r\n  // Function to close the Network Drawer component\r\n  // setNetworkDrawerStatus - Set the Network Drawer's \"visible\" state to \"false\"\r\n  const closeNetworkDrawer = () => {\r\n    setNetworkDrawerStatus(false);\r\n  };\r\n\r\n  const handleNetworkStatisticsButton = () => {\r\n    setDeviceDrawerStatus(false);\r\n    setNetworkDrawerStatus(true);\r\n    setNetworkDetails(networkData[0]);\r\n    setDeviceCounter(device_data.length);\r\n    setGroupByDevice(groupByDeviceType());\r\n  };\r\n\r\n  const groupByDeviceType = () => {\r\n    var result = {};\r\n    for (var i = 0; i < device_data.length; i++) {\r\n      if (!result[device_data[i][\"status\"]]) {\r\n        result[device_data[i][\"status\"]] = 0;\r\n      }\r\n      result[device_data[i][\"status\"]]++;\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const fgRef = useRef();\r\n  const zoomInNode = useCallback(\r\n    (node) => {\r\n      setDeviceDrawerStatus(true);\r\n      setNetworkDrawerStatus(false);\r\n      setDeviceDetails(node);\r\n      setHoverNode(node);\r\n\r\n      // Camera distance of node\r\n      const distance = 150;\r\n      const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\r\n\r\n      fgRef.current.cameraPosition(\r\n        {\r\n          x: node.x * distRatio,\r\n          y: node.y * distRatio,\r\n          z: node.z * distRatio,\r\n        }, // new position\r\n        node, // lookAt ({ x, y, z })\r\n        3000 // ms transition duration\r\n      );\r\n    },\r\n    [fgRef]\r\n  );\r\n\r\n  var this_array = [];\r\n\r\n  const handleNodeHover = (node) => {};\r\n\r\n  const updateNodeIcons = useCallback((node) => {\r\n    let imgTexture = null;\r\n    this_array = [];\r\n\r\n    if (hoverNode) {\r\n      for (var i = 0; i < relation_data.length; i++) {\r\n        if (relation_data[i].source.id === hoverNode.id) {\r\n          this_array.push(relation_data[i].target.id);\r\n          // } else if (relation_data[i].target.id === hoverNode.id) {\r\n          //   this_array.push(relation_data[i].source.id);\r\n        }\r\n      }\r\n    }\r\n\r\n    setDeviceConnected(this_array);\r\n\r\n    if (node === hoverNode) {\r\n      for (var i = 0; i < relation_data.length; i++) {\r\n        if (relation_data[i].source.id === node.id) {\r\n          this_array.push(relation_data[i].target.id);\r\n          // } else if (relation_data[i].target.id === node.id) {\r\n          //   this_array.push(relation_data[i].source.id);\r\n        }\r\n      }\r\n\r\n      if (node.type === \"DB\") {\r\n        if (node.status === \"Active\") {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/online_db_selected.png\"\r\n          );\r\n        } else if (node.status === \"Inactive\") {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/inactive_db_selected.png\"\r\n          );\r\n        } else {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/offline_db_selected.png\"\r\n          );\r\n        }\r\n      } else if (node.type === \"PC\") {\r\n        if (node.status === \"Active\") {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/online_pc_selected.png\"\r\n          );\r\n        } else if (node.status === \"Inactive\") {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/inactive_pc_selected.png\"\r\n          );\r\n        } else {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/offline_pc_selected.png\"\r\n          );\r\n        }\r\n      } else if (node.type === \"Router\") {\r\n        if (node.status === \"Active\") {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/online_router_selected.png\"\r\n          );\r\n        } else if (node.status === \"Inactive\") {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/inactive_router_selected.png\"\r\n          );\r\n        } else {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/offline_router_selected.png\"\r\n          );\r\n        }\r\n      }\r\n\r\n      // For nodes that are not selected\r\n    } else {\r\n      if (node.type === \"DB\") {\r\n        if (node.status === \"Active\") {\r\n          imgTexture = new THREE.TextureLoader().load(\"assets/online_db.png\");\r\n        } else if (node.status === \"Inactive\") {\r\n          imgTexture = new THREE.TextureLoader().load(\"assets/inactive_db.png\");\r\n        } else {\r\n          imgTexture = new THREE.TextureLoader().load(\"assets/offline_db.png\");\r\n        }\r\n      } else if (node.type === \"PC\") {\r\n        if (node.status === \"Active\") {\r\n          imgTexture = new THREE.TextureLoader().load(\"assets/online_pc.png\");\r\n        } else if (node.status === \"Inactive\") {\r\n          imgTexture = new THREE.TextureLoader().load(\"assets/inactive_pc.png\");\r\n        } else {\r\n          imgTexture = new THREE.TextureLoader().load(\"assets/offline_pc.png\");\r\n        }\r\n      } else if (node.type === \"Router\") {\r\n        if (node.status === \"Active\") {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/online_router.png\"\r\n          );\r\n        } else if (node.status === \"Inactive\") {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/inactive_router.png\"\r\n          );\r\n        } else {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/offline_router.png\"\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    const material = new THREE.SpriteMaterial({ map: imgTexture });\r\n    const sprite = new THREE.Sprite(material);\r\n    sprite.scale.set(12, 12);\r\n\r\n    return sprite;\r\n  });\r\n\r\n  // <Layout style={{ marginLeft: 199, zIndex: -1 }}>\r\n\r\n  return (\r\n    <div>\r\n      <Layout>\r\n        <ForceGraph3D\r\n          width={window.innerWidth}\r\n          height={window.innerHeight - 1}\r\n          ref={fgRef}\r\n          graphData={{\r\n            nodes: device_data,\r\n            links: relation_data,\r\n          }}\r\n          nodeLabel={(node) =>\r\n            `<div style=\"background: #1F1E26; padding: 5px 10px 8px 10px; border-radius: 10px; user-select: none\">\r\n            <span>Name: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>${node.name}</b></span><br/>\r\n            <span>IP Addr: &nbsp;&nbsp;&nbsp;&nbsp;<b>${node.id}</b></span><br/>\r\n            <span>Mac Addr: &nbsp;<b>${node.mac_addr}</b></span>\r\n            </div>`\r\n          }\r\n          linkWidth={1}\r\n          onNodeRightClick={zoomInNode}\r\n          onNodeHover={handleNodeHover}\r\n          // linkDirectionalParticles={1}\r\n          // linkDirectionalParticleSpeed={0.01}\r\n          // onNodeHover={handleHover}\r\n          // onNodeDragEnd={(node) => {\r\n          //   node.fx = node.x;\r\n          //   node.fy = node.y;\r\n          //   node.fz = node.z;\r\n          // }}\r\n          nodeThreeObject={updateNodeIcons}\r\n        />\r\n      </Layout>\r\n      <Affix style={{ position: \"absolute\", top: 120, left: 10, zIndex: 1 }}>\r\n        <Button type=\"primary\" onClick={handleNetworkStatisticsButton}>\r\n          Show Network Statistics\r\n        </Button>\r\n      </Affix>\r\n\r\n      <DeviceDrawer\r\n        deviceDrawerStatus={deviceDrawerStatus}\r\n        deviceDetails={deviceDetails}\r\n        closeDeviceDrawer={closeDeviceDrawer}\r\n        alertData={alertData}\r\n        deviceConnected={deviceConnected}\r\n      />\r\n      <NetworkDrawer\r\n        networkDrawerStatus={networkDrawerStatus}\r\n        networkDetails={networkDetails}\r\n        groupByDevice={groupByDevice}\r\n        deviceCounter={deviceCounter}\r\n        closeNetworkDrawer={closeNetworkDrawer}\r\n        alertData={alertData}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(AppNetworkTopology);\r\n"]},"metadata":{},"sourceType":"module"}