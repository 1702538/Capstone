{"ast":null,"code":"import _regeneratorRuntime from\"C:/SourceTree/capstone-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/SourceTree/capstone-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/SourceTree/capstone-project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import\"antd/dist/antd.css\";import React,{useState,useRef,useCallback,useEffect}from\"react\";import{Layout,Button,Affix}from\"antd\";import{ForceGraph3D}from\"react-force-graph\";import DeviceDrawer from\"./Components/DrawerDevice\";import NetworkDrawer from\"./Components/DrawerNetwork\";import*as THREE from\"three\";import networkData from\"./Components/Data/network.json\";import device_data from\"./Components/Data/device_data.json\";import relation_data from\"./Components/Data/relation_data.json\";import{useMemo}from\"react/cjs/react.production.min\";// const ForceGraphComponent = React.memo((props) => {console.log(\"Child rendered\"); // For verification purposes\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function AppNetworkTopology(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),deviceDrawerStatus=_useState2[0],setDeviceDrawerStatus=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),networkDrawerStatus=_useState4[0],setNetworkDrawerStatus=_useState4[1];// networkDrawerStatus={this.state.networkDrawerStatus}\nvar _useState5=useState({}),_useState6=_slicedToArray(_useState5,2),deviceDetails=_useState6[0],setDeviceDetails=_useState6[1];var _useState7=useState({}),_useState8=_slicedToArray(_useState7,2),networkDetails=_useState8[0],setNetworkDetails=_useState8[1];var _useState9=useState(),_useState10=_slicedToArray(_useState9,2),groupByDevice=_useState10[0],setGroupByDevice=_useState10[1];var _useState11=useState(),_useState12=_slicedToArray(_useState11,2),deviceCounter=_useState12[0],setDeviceCounter=_useState12[1];var _useState13=useState(),_useState14=_slicedToArray(_useState13,2),hoverNode=_useState14[0],setHoverNode=_useState14[1];var _useState15=useState(),_useState16=_slicedToArray(_useState15,2),deviceConnected=_useState16[0],setDeviceConnected=_useState16[1];var _useState17=useState([]),_useState18=_slicedToArray(_useState17,2),alertData=_useState18[0],setAlertData=_useState18[1];// getData() with fetch(), run GET to API to get latest data from JSON Server\n// Store latest data to alertData\nuseEffect(function(){getData();},[]);var getData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(\"http://localhost:3001/alerts\").then(function(response){return response.json();}).then(function(data){return setAlertData(data);}).catch(function(err){return console.log(err);});case 2:case\"end\":return _context.stop();}}},_callee);}));return function getData(){return _ref.apply(this,arguments);};}();var this3DGraph=useMemo(function(){return/*#__PURE__*/_jsx(ForceGraph3D,{width:window.innerWidth,height:window.innerHeight-1,ref:fgRef,graphData:{nodes:device_data,links:relation_data},nodeLabel:function nodeLabel(node){return\"<div style=\\\"background: #1F1E26; padding: 5px 10px 8px 10px; border-radius: 10px; user-select: none\\\">\\n            <span>Name: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>\".concat(node.name,\"</b></span><br/>\\n            <span>IP Addr: &nbsp;&nbsp;&nbsp;&nbsp;<b>\").concat(node.id,\"</b></span><br/>\\n            <span>Mac Addr: &nbsp;<b>\").concat(node.mac_addr,\"</b></span>\\n            </div>\");},linkWidth:1,onNodeRightClick:zoomInNode,onNodeHover:handleNodeHover// linkDirectionalParticles={1}\n// linkDirectionalParticleSpeed={0.01}\n// onNodeHover={handleHover}\n// onNodeDragEnd={(node) => {\n//   node.fx = node.x;\n//   node.fy = node.y;\n//   node.fz = node.z;\n// }}\n,nodeThreeObject:updateNodeIcons});});var closeDeviceDrawer=function closeDeviceDrawer(){setDeviceDrawerStatus(false);};var closeNetworkDrawer=function closeNetworkDrawer(){setNetworkDrawerStatus(false);};var handleNetworkStatisticsButton=function handleNetworkStatisticsButton(){setDeviceDrawerStatus(false);setNetworkDrawerStatus(true);setNetworkDetails(networkData[0]);setDeviceCounter(device_data.length);setGroupByDevice(groupByDeviceType());};// const groupByDeviceType = device_data.reduce((thisData, dev) => {\n//   thisData[dev.status] = thisData[dev.status] + 1 || 1;\n//   return thisData;\n// }, {});\nvar groupByDeviceType=function groupByDeviceType(){var result={};for(var i=0;i<device_data.length;i++){if(!result[device_data[i][\"status\"]]){result[device_data[i][\"status\"]]=0;}result[device_data[i][\"status\"]]++;}return result;};var fgRef=useRef();var zoomInNode=useCallback(function(node){setDeviceDrawerStatus(true);setNetworkDrawerStatus(false);setDeviceDetails(node);setHoverNode(node);// Camera distance of node\nvar distance=150;var distRatio=1+distance/Math.hypot(node.x,node.y,node.z);fgRef.current.cameraPosition({x:node.x*distRatio,y:node.y*distRatio,z:node.z*distRatio},// new position\nnode,// lookAt ({ x, y, z })\n3000// ms transition duration\n);},[fgRef]);var this_array=[];var handleNodeHover=function handleNodeHover(node){// this_array = [];\n// if (node) {\n//   console.log(node);\n//   for (var i = 0; i < relation_data.length; i++) {\n//     if (relation_data[i].source.id === node.id) {\n//       this_array.push(relation_data[i].target.id);\n//     } else if (relation_data[i].target.id === node.id) {\n//       this_array.push(relation_data[i].source.id);\n//     }\n//   }\n//   console.log(this_array);\n// } else {\n//   // console.log(\"Nothing\");\n// }\n};var updateNodeIcons=useCallback(function(node){var imgTexture=null;this_array=[];if(hoverNode){for(var i=0;i<relation_data.length;i++){if(relation_data[i].source.id===hoverNode.id){this_array.push(relation_data[i].target.id);}else if(relation_data[i].target.id===hoverNode.id){this_array.push(relation_data[i].source.id);}}}setDeviceConnected(this_array);if(node===hoverNode){console.log(\"Hello\",node);console.log(\"haha\",relation_data[0]);for(var i=0;i<relation_data.length;i++){if(relation_data[i].source.id===node.id){this_array.push(relation_data[i].target.id);}else if(relation_data[i].target.id===node.id){this_array.push(relation_data[i].source.id);}}console.log(\"Connected to\",this_array);console.log(\"============================================\");// imgTexture = new THREE.TextureLoader().load(\"assets/check.png\");\nif(node.type===\"DB\"){if(node.status===\"Active\"){imgTexture=new THREE.TextureLoader().load(\"assets/online_db_selected.png\");}else if(node.status===\"Inactive\"){imgTexture=new THREE.TextureLoader().load(\"assets/inactive_db_selected.png\");}else{imgTexture=new THREE.TextureLoader().load(\"assets/offline_db_selected.png\");}}else if(node.type===\"PC\"){if(node.status===\"Active\"){imgTexture=new THREE.TextureLoader().load(\"assets/online_pc_selected.png\");}else if(node.status===\"Inactive\"){imgTexture=new THREE.TextureLoader().load(\"assets/inactive_pc_selected.png\");}else{imgTexture=new THREE.TextureLoader().load(\"assets/offline_pc_selected.png\");}}else if(node.type===\"Router\"){if(node.status===\"Active\"){imgTexture=new THREE.TextureLoader().load(\"assets/online_router_selected.png\");}else if(node.status===\"Inactive\"){imgTexture=new THREE.TextureLoader().load(\"assets/inactive_router_selected.png\");}else{imgTexture=new THREE.TextureLoader().load(\"assets/offline_router_selected.png\");}}// For nodes that are not selected\n}else{if(node.type===\"DB\"){if(node.status===\"Active\"){imgTexture=new THREE.TextureLoader().load(\"assets/online_db.png\");}else if(node.status===\"Inactive\"){imgTexture=new THREE.TextureLoader().load(\"assets/inactive_db.png\");}else{imgTexture=new THREE.TextureLoader().load(\"assets/offline_db.png\");}}else if(node.type===\"PC\"){if(node.status===\"Active\"){imgTexture=new THREE.TextureLoader().load(\"assets/online_pc.png\");}else if(node.status===\"Inactive\"){imgTexture=new THREE.TextureLoader().load(\"assets/inactive_pc.png\");}else{imgTexture=new THREE.TextureLoader().load(\"assets/offline_pc.png\");}}else if(node.type===\"Router\"){if(node.status===\"Active\"){imgTexture=new THREE.TextureLoader().load(\"assets/online_router.png\");}else if(node.status===\"Inactive\"){imgTexture=new THREE.TextureLoader().load(\"assets/inactive_router.png\");}else{imgTexture=new THREE.TextureLoader().load(\"assets/offline_router.png\");}}}var material=new THREE.SpriteMaterial({map:imgTexture});var sprite=new THREE.Sprite(material);sprite.scale.set(12,12);return sprite;});// <Layout style={{ marginLeft: 199, zIndex: -1 }}>\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Layout,{children:/*#__PURE__*/_jsx(\"this3DGraph\",{})}),/*#__PURE__*/_jsx(Affix,{style:{position:\"absolute\",top:120,left:10,zIndex:1},children:/*#__PURE__*/_jsx(Button,{type:\"primary\",onClick:handleNetworkStatisticsButton,children:\"Show Network Statistics\"})}),/*#__PURE__*/_jsx(DeviceDrawer,{deviceDrawerStatus:deviceDrawerStatus,deviceDetails:deviceDetails,closeDeviceDrawer:closeDeviceDrawer,alertData:alertData,deviceConnected:deviceConnected}),/*#__PURE__*/_jsx(NetworkDrawer,{networkDrawerStatus:networkDrawerStatus,networkDetails:networkDetails,groupByDevice:groupByDevice,deviceCounter:deviceCounter,closeNetworkDrawer:closeNetworkDrawer,alertData:alertData})]});}export default/*#__PURE__*/React.memo(AppNetworkTopology);// const groupByDeviceType = device_data.reduce((thisData, dev) => {\n//   thisData[dev.status] = thisData[dev.status] + 1 || 1;\n//   return thisData;\n// }, {});\n// function FocusGraph() {\n//   const fgRef = React.useRef;\n//   const handleClick = React.useCallback(\n//     (node) => {\n//       const distance = 40;\n//       const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n//       fgRef.current.cameraPosition(\n//         { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio }, // new position\n//         node, // lookAt ({ x, y, z })\n//         3000 // camera transition duration (in ms)\n//       );\n//     },\n//     [fgRef]\n//   );\n// }\n// // ForceGraphComponent with React.memo implementation (Prevents unnecessary re-rendering)\n// const ForceGraphComponent = React.memo((props) => {\n//   console.log(\"Child rendered\"); // For verification purposes\n//   console.log(device_data);\n//   // Layout to add margin left to the Networok Topology Graph\n//   return (\n//     <Layout style={{ marginLeft: 199 }}>\n//       <ForceGraph3D\n//         width={window.innerWidth - 200}\n//         graphData={{\n//           nodes: device_data,\n//           links: relation_data,\n//         }}\n//         onNodeRightClick={props.handleRightClick}\n//         // linkDirectionalParticles={1}\n//         // linkDirectionalParticleSpeed={0.01}\n//         onNodeHover={props.handleHover}\n//         onNodeDragEnd={(node) => {\n//           node.fx = node.x;\n//           node.fy = node.y;\n//           node.fz = node.z;\n//         }}\n//         nodeThreeObject={({ type }) => {\n//           let imgTexture = null;\n//           if (type === \"DB\") {\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\n//           } else if (type === \"PC\") {\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\n//           } else if (type === \"Router\") {\n//             imgTexture = new THREE.TextureLoader().load(\n//               \"assets/img_router.png\"\n//             );\n//           }\n//           const material = new THREE.SpriteMaterial({ map: imgTexture });\n//           const sprite = new THREE.Sprite(material);\n//           sprite.scale.set(12, 12);\n//           return sprite;\n//         }}\n//       />\n//     </Layout>\n//   );\n// });\n// export default class AppNetworkTopology extends React.Component {\n//   // Initial state\n//   state = {\n//     deviceDrawerStatus: false,\n//     networkDrawerStatus: false,\n//     deviceDetailsObject: {},\n//     networkDetailObject: networkData[0],\n//     networkStatisticsObject: groupByDeviceType,\n//     networkDeviceCounter: device_data.length,\n//   };\n//   // shouldComponentUpdate = (nextProps, nextState) => {\n//   //   console.log(nextProps);\n//   //   console.log(nextState);\n//   //   return false;\n//   // };\n//   // On right-click on icon on network topology, the function will pass the object to handleRightClick()\n//   // This function wil then set the state of \"deviceDrawerStatus\" to \"true\"\n//   // This function will also set the state of \"networkDrawerStatus\" to false\n//   handleRightClick = (node) => {\n//     this.setState({\n//       deviceDetailsObject: node,\n//       deviceDrawerStatus: true,\n//       networkDrawerStatus: false,\n//     });\n//   };\n//   handleHover = (node) => {\n//     // console.log(this.state.deviceDetailsObject);\n//     if (node != null && node != this.state.deviceDetailsObject) {\n//       this.setState({\n//         deviceDetailsObject: node,\n//       });\n//     }\n//   };\n//   // This function set the state of \"networkDrawerStatus\" will be \"true\"\n//   // This function will also set the state of \"deviceDrawerStatus\" to false\n//   // This function will only be invoked when the \"Show Network Statistics\" button is pressed\n//   handleNetworkStatistcsButton = () => {\n//     this.setState({\n//       networkDrawerStatus: true,\n//       deviceDrawerStatus: false,\n//     });\n//   };\n//   // This function sets the state of \"deviceDrawerStatus\" to \"false\"\n//   // This funtion is passed to the child component \"DeviceDrawer\"\n//   // When clicking on the \"X\" symbol in \"DeviceDrawer\", this function will run\n//   closeDeviceDrawer = () => {\n//     this.setState({ deviceDrawerStatus: false });\n//   };\n//   // This function sets the state of \"networkDrawerStatus\" to \"false\"\n//   // This funtion is passed to the child component \"NetworkDrawer\"\n//   // When clicking on the \"X\" symbol in \"NetworkDrawer\", this function will run\n//   closeNetworkDrawer = () => {\n//     this.setState({ networkDrawerStatus: false });\n//   };\n//   render() {\n//     return (\n//       <div>\n//         <div\n//           id=\"tester\"\n//           style={{\n//             padding: 10,\n//             position: \"absolute\",\n//             top: 10,\n//             left: 210,\n//             zIndex: 1,\n//             background: \"white\",\n//             height: 200,\n//             width: 200,\n//           }}\n//         >\n//           <p>IP: {this.state.deviceDetailsObject.id}</p>\n//           <p>Name: {this.state.deviceDetailsObject.name}</p>\n//           <p>Type: {this.state.deviceDetailsObject.type}</p>\n//           <p>OS: {this.state.deviceDetailsObject.os}</p>\n//           <p>Mac: {this.state.deviceDetailsObject.mac_addr}</p>\n//         </div>\n//         <Affix style={{ position: \"absolute\", top: 120, left: 10 }}>\n//           <Button type=\"primary\" onClick={this.handleNetworkStatistcsButton}>\n//             Show Network Statistics\n//           </Button>\n//         </Affix>\n//         <NetworkDrawer\n//           networkDetailObject={this.state.networkDetailObject}\n//           networkDrawerStatus={this.state.networkDrawerStatus}\n//           networkStatisticsObject={this.state.networkStatisticsObject}\n//           networkDeviceCounter={this.state.networkDeviceCounter}\n//           closeNetworkDrawerFunction={this.closeNetworkDrawer}\n//         />\n//         <DeviceDrawer\n//           deviceDetails={this.state.deviceDetailsObject}\n//           deviceDrawerStatus={this.state.deviceDrawerStatus}\n//           closeDeviceDrawerFunction={this.closeDeviceDrawer}\n//         />\n//         <ForceGraphComponent\n//           style={{ zIndex: -1 }}\n//           handleRightClick={this.handleRightClick}\n//           handleHover={this.handleHover}\n//           handleClick={this.FocusGraph}\n//         />\n//       </div>\n//     );\n//   }\n// }\n// handleClick = (node) => {\n//   const getHostName = testingData.filter((thisDevice) =>\n//     thisDevice.id.includes(node.id)\n//   );\n//   getHostName.map((deviceDetails) => {\n//     // alert(deviceDetails.os);\n//     this.setState({ deviceDetailsObject: deviceDetails });\n//   });\n// };","map":{"version":3,"sources":["C:/SourceTree/capstone-project/src/NetworkTopology.js"],"names":["React","useState","useRef","useCallback","useEffect","Layout","Button","Affix","ForceGraph3D","DeviceDrawer","NetworkDrawer","THREE","networkData","device_data","relation_data","useMemo","AppNetworkTopology","deviceDrawerStatus","setDeviceDrawerStatus","networkDrawerStatus","setNetworkDrawerStatus","deviceDetails","setDeviceDetails","networkDetails","setNetworkDetails","groupByDevice","setGroupByDevice","deviceCounter","setDeviceCounter","hoverNode","setHoverNode","deviceConnected","setDeviceConnected","alertData","setAlertData","getData","fetch","then","response","json","data","catch","err","console","log","this3DGraph","window","innerWidth","innerHeight","fgRef","nodes","links","node","name","id","mac_addr","zoomInNode","handleNodeHover","updateNodeIcons","closeDeviceDrawer","closeNetworkDrawer","handleNetworkStatisticsButton","length","groupByDeviceType","result","i","distance","distRatio","Math","hypot","x","y","z","current","cameraPosition","this_array","imgTexture","source","push","target","type","status","TextureLoader","load","material","SpriteMaterial","map","sprite","Sprite","scale","set","position","top","left","zIndex","memo"],"mappings":"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":["import \"antd/dist/antd.css\";\r\nimport React, { useState, useRef, useCallback, useEffect } from \"react\";\r\nimport { Layout, Button, Affix } from \"antd\";\r\nimport { ForceGraph3D } from \"react-force-graph\";\r\nimport DeviceDrawer from \"./Components/DrawerDevice\";\r\nimport NetworkDrawer from \"./Components/DrawerNetwork\";\r\nimport * as THREE from \"three\";\r\nimport networkData from \"./Components/Data/network.json\";\r\nimport device_data from \"./Components/Data/device_data.json\";\r\nimport relation_data from \"./Components/Data/relation_data.json\";\r\nimport { useMemo } from \"react/cjs/react.production.min\";\r\n\r\n// const ForceGraphComponent = React.memo((props) => {console.log(\"Child rendered\"); // For verification purposes\r\n\r\nfunction AppNetworkTopology() {\r\n  const [deviceDrawerStatus, setDeviceDrawerStatus] = useState(false);\r\n  const [networkDrawerStatus, setNetworkDrawerStatus] = useState(false); // networkDrawerStatus={this.state.networkDrawerStatus}\r\n  const [deviceDetails, setDeviceDetails] = useState({});\r\n  const [networkDetails, setNetworkDetails] = useState({});\r\n  const [groupByDevice, setGroupByDevice] = useState();\r\n  const [deviceCounter, setDeviceCounter] = useState();\r\n  const [hoverNode, setHoverNode] = useState();\r\n  const [deviceConnected, setDeviceConnected] = useState();\r\n\r\n  const [alertData, setAlertData] = useState([]);\r\n\r\n  // getData() with fetch(), run GET to API to get latest data from JSON Server\r\n  // Store latest data to alertData\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = async () => {\r\n    await fetch(\"http://localhost:3001/alerts\")\r\n      .then((response) => response.json())\r\n      .then((data) => setAlertData(data))\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  const this3DGraph = useMemo(() => {\r\n    return (\r\n      <ForceGraph3D\r\n        width={window.innerWidth}\r\n        height={window.innerHeight - 1}\r\n        ref={fgRef}\r\n        graphData={{\r\n          nodes: device_data,\r\n          links: relation_data,\r\n        }}\r\n        nodeLabel={(node) =>\r\n          `<div style=\"background: #1F1E26; padding: 5px 10px 8px 10px; border-radius: 10px; user-select: none\">\r\n            <span>Name: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>${node.name}</b></span><br/>\r\n            <span>IP Addr: &nbsp;&nbsp;&nbsp;&nbsp;<b>${node.id}</b></span><br/>\r\n            <span>Mac Addr: &nbsp;<b>${node.mac_addr}</b></span>\r\n            </div>`\r\n        }\r\n        linkWidth={1}\r\n        onNodeRightClick={zoomInNode}\r\n        onNodeHover={handleNodeHover}\r\n        // linkDirectionalParticles={1}\r\n        // linkDirectionalParticleSpeed={0.01}\r\n        // onNodeHover={handleHover}\r\n        // onNodeDragEnd={(node) => {\r\n        //   node.fx = node.x;\r\n        //   node.fy = node.y;\r\n        //   node.fz = node.z;\r\n        // }}\r\n        nodeThreeObject={updateNodeIcons}\r\n      />\r\n    );\r\n  });\r\n\r\n  const closeDeviceDrawer = () => {\r\n    setDeviceDrawerStatus(false);\r\n  };\r\n\r\n  const closeNetworkDrawer = () => {\r\n    setNetworkDrawerStatus(false);\r\n  };\r\n\r\n  const handleNetworkStatisticsButton = () => {\r\n    setDeviceDrawerStatus(false);\r\n    setNetworkDrawerStatus(true);\r\n    setNetworkDetails(networkData[0]);\r\n    setDeviceCounter(device_data.length);\r\n    setGroupByDevice(groupByDeviceType());\r\n  };\r\n\r\n  // const groupByDeviceType = device_data.reduce((thisData, dev) => {\r\n  //   thisData[dev.status] = thisData[dev.status] + 1 || 1;\r\n  //   return thisData;\r\n  // }, {});\r\n\r\n  const groupByDeviceType = () => {\r\n    var result = {};\r\n    for (var i = 0; i < device_data.length; i++) {\r\n      if (!result[device_data[i][\"status\"]]) {\r\n        result[device_data[i][\"status\"]] = 0;\r\n      }\r\n      result[device_data[i][\"status\"]]++;\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const fgRef = useRef();\r\n  const zoomInNode = useCallback(\r\n    (node) => {\r\n      setDeviceDrawerStatus(true);\r\n      setNetworkDrawerStatus(false);\r\n      setDeviceDetails(node);\r\n      setHoverNode(node);\r\n\r\n      // Camera distance of node\r\n      const distance = 150;\r\n      const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\r\n\r\n      fgRef.current.cameraPosition(\r\n        {\r\n          x: node.x * distRatio,\r\n          y: node.y * distRatio,\r\n          z: node.z * distRatio,\r\n        }, // new position\r\n        node, // lookAt ({ x, y, z })\r\n        3000 // ms transition duration\r\n      );\r\n    },\r\n    [fgRef]\r\n  );\r\n\r\n  var this_array = [];\r\n\r\n  const handleNodeHover = (node) => {\r\n    // this_array = [];\r\n    // if (node) {\r\n    //   console.log(node);\r\n    //   for (var i = 0; i < relation_data.length; i++) {\r\n    //     if (relation_data[i].source.id === node.id) {\r\n    //       this_array.push(relation_data[i].target.id);\r\n    //     } else if (relation_data[i].target.id === node.id) {\r\n    //       this_array.push(relation_data[i].source.id);\r\n    //     }\r\n    //   }\r\n    //   console.log(this_array);\r\n    // } else {\r\n    //   // console.log(\"Nothing\");\r\n    // }\r\n  };\r\n\r\n  const updateNodeIcons = useCallback((node) => {\r\n    let imgTexture = null;\r\n    this_array = [];\r\n\r\n    if (hoverNode) {\r\n      for (var i = 0; i < relation_data.length; i++) {\r\n        if (relation_data[i].source.id === hoverNode.id) {\r\n          this_array.push(relation_data[i].target.id);\r\n        } else if (relation_data[i].target.id === hoverNode.id) {\r\n          this_array.push(relation_data[i].source.id);\r\n        }\r\n      }\r\n    }\r\n\r\n    setDeviceConnected(this_array);\r\n\r\n    if (node === hoverNode) {\r\n      console.log(\"Hello\", node);\r\n\r\n      console.log(\"haha\", relation_data[0]);\r\n\r\n      for (var i = 0; i < relation_data.length; i++) {\r\n        if (relation_data[i].source.id === node.id) {\r\n          this_array.push(relation_data[i].target.id);\r\n        } else if (relation_data[i].target.id === node.id) {\r\n          this_array.push(relation_data[i].source.id);\r\n        }\r\n      }\r\n      console.log(\"Connected to\", this_array);\r\n      console.log(\"============================================\");\r\n\r\n      // imgTexture = new THREE.TextureLoader().load(\"assets/check.png\");\r\n\r\n      if (node.type === \"DB\") {\r\n        if (node.status === \"Active\") {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/online_db_selected.png\"\r\n          );\r\n        } else if (node.status === \"Inactive\") {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/inactive_db_selected.png\"\r\n          );\r\n        } else {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/offline_db_selected.png\"\r\n          );\r\n        }\r\n      } else if (node.type === \"PC\") {\r\n        if (node.status === \"Active\") {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/online_pc_selected.png\"\r\n          );\r\n        } else if (node.status === \"Inactive\") {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/inactive_pc_selected.png\"\r\n          );\r\n        } else {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/offline_pc_selected.png\"\r\n          );\r\n        }\r\n      } else if (node.type === \"Router\") {\r\n        if (node.status === \"Active\") {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/online_router_selected.png\"\r\n          );\r\n        } else if (node.status === \"Inactive\") {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/inactive_router_selected.png\"\r\n          );\r\n        } else {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/offline_router_selected.png\"\r\n          );\r\n        }\r\n      }\r\n\r\n      // For nodes that are not selected\r\n    } else {\r\n      if (node.type === \"DB\") {\r\n        if (node.status === \"Active\") {\r\n          imgTexture = new THREE.TextureLoader().load(\"assets/online_db.png\");\r\n        } else if (node.status === \"Inactive\") {\r\n          imgTexture = new THREE.TextureLoader().load(\"assets/inactive_db.png\");\r\n        } else {\r\n          imgTexture = new THREE.TextureLoader().load(\"assets/offline_db.png\");\r\n        }\r\n      } else if (node.type === \"PC\") {\r\n        if (node.status === \"Active\") {\r\n          imgTexture = new THREE.TextureLoader().load(\"assets/online_pc.png\");\r\n        } else if (node.status === \"Inactive\") {\r\n          imgTexture = new THREE.TextureLoader().load(\"assets/inactive_pc.png\");\r\n        } else {\r\n          imgTexture = new THREE.TextureLoader().load(\"assets/offline_pc.png\");\r\n        }\r\n      } else if (node.type === \"Router\") {\r\n        if (node.status === \"Active\") {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/online_router.png\"\r\n          );\r\n        } else if (node.status === \"Inactive\") {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/inactive_router.png\"\r\n          );\r\n        } else {\r\n          imgTexture = new THREE.TextureLoader().load(\r\n            \"assets/offline_router.png\"\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    const material = new THREE.SpriteMaterial({ map: imgTexture });\r\n    const sprite = new THREE.Sprite(material);\r\n    sprite.scale.set(12, 12);\r\n\r\n    return sprite;\r\n  });\r\n\r\n  // <Layout style={{ marginLeft: 199, zIndex: -1 }}>\r\n\r\n  return (\r\n    <div>\r\n      <Layout>\r\n        <this3DGraph />\r\n      </Layout>\r\n      <Affix style={{ position: \"absolute\", top: 120, left: 10, zIndex: 1 }}>\r\n        <Button type=\"primary\" onClick={handleNetworkStatisticsButton}>\r\n          Show Network Statistics\r\n        </Button>\r\n      </Affix>\r\n\r\n      <DeviceDrawer\r\n        deviceDrawerStatus={deviceDrawerStatus}\r\n        deviceDetails={deviceDetails}\r\n        closeDeviceDrawer={closeDeviceDrawer}\r\n        alertData={alertData}\r\n        deviceConnected={deviceConnected}\r\n      />\r\n      <NetworkDrawer\r\n        networkDrawerStatus={networkDrawerStatus}\r\n        networkDetails={networkDetails}\r\n        groupByDevice={groupByDevice}\r\n        deviceCounter={deviceCounter}\r\n        closeNetworkDrawer={closeNetworkDrawer}\r\n        alertData={alertData}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(AppNetworkTopology);\r\n\r\n// const groupByDeviceType = device_data.reduce((thisData, dev) => {\r\n//   thisData[dev.status] = thisData[dev.status] + 1 || 1;\r\n//   return thisData;\r\n// }, {});\r\n\r\n// function FocusGraph() {\r\n//   const fgRef = React.useRef;\r\n\r\n//   const handleClick = React.useCallback(\r\n//     (node) => {\r\n//       const distance = 40;\r\n//       const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\r\n\r\n//       fgRef.current.cameraPosition(\r\n//         { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio }, // new position\r\n//         node, // lookAt ({ x, y, z })\r\n//         3000 // camera transition duration (in ms)\r\n//       );\r\n//     },\r\n//     [fgRef]\r\n//   );\r\n// }\r\n\r\n// // ForceGraphComponent with React.memo implementation (Prevents unnecessary re-rendering)\r\n// const ForceGraphComponent = React.memo((props) => {\r\n//   console.log(\"Child rendered\"); // For verification purposes\r\n//   console.log(device_data);\r\n\r\n//   // Layout to add margin left to the Networok Topology Graph\r\n//   return (\r\n//     <Layout style={{ marginLeft: 199 }}>\r\n//       <ForceGraph3D\r\n//         width={window.innerWidth - 200}\r\n//         graphData={{\r\n//           nodes: device_data,\r\n//           links: relation_data,\r\n//         }}\r\n//         onNodeRightClick={props.handleRightClick}\r\n//         // linkDirectionalParticles={1}\r\n//         // linkDirectionalParticleSpeed={0.01}\r\n//         onNodeHover={props.handleHover}\r\n//         onNodeDragEnd={(node) => {\r\n//           node.fx = node.x;\r\n//           node.fy = node.y;\r\n//           node.fz = node.z;\r\n//         }}\r\n//         nodeThreeObject={({ type }) => {\r\n//           let imgTexture = null;\r\n//           if (type === \"DB\") {\r\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\r\n//           } else if (type === \"PC\") {\r\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\r\n//           } else if (type === \"Router\") {\r\n//             imgTexture = new THREE.TextureLoader().load(\r\n//               \"assets/img_router.png\"\r\n//             );\r\n//           }\r\n\r\n//           const material = new THREE.SpriteMaterial({ map: imgTexture });\r\n//           const sprite = new THREE.Sprite(material);\r\n//           sprite.scale.set(12, 12);\r\n\r\n//           return sprite;\r\n//         }}\r\n//       />\r\n//     </Layout>\r\n//   );\r\n// });\r\n\r\n// export default class AppNetworkTopology extends React.Component {\r\n//   // Initial state\r\n//   state = {\r\n//     deviceDrawerStatus: false,\r\n//     networkDrawerStatus: false,\r\n//     deviceDetailsObject: {},\r\n//     networkDetailObject: networkData[0],\r\n//     networkStatisticsObject: groupByDeviceType,\r\n//     networkDeviceCounter: device_data.length,\r\n//   };\r\n\r\n//   // shouldComponentUpdate = (nextProps, nextState) => {\r\n//   //   console.log(nextProps);\r\n//   //   console.log(nextState);\r\n//   //   return false;\r\n//   // };\r\n\r\n//   // On right-click on icon on network topology, the function will pass the object to handleRightClick()\r\n//   // This function wil then set the state of \"deviceDrawerStatus\" to \"true\"\r\n//   // This function will also set the state of \"networkDrawerStatus\" to false\r\n//   handleRightClick = (node) => {\r\n//     this.setState({\r\n//       deviceDetailsObject: node,\r\n//       deviceDrawerStatus: true,\r\n//       networkDrawerStatus: false,\r\n//     });\r\n//   };\r\n\r\n//   handleHover = (node) => {\r\n//     // console.log(this.state.deviceDetailsObject);\r\n//     if (node != null && node != this.state.deviceDetailsObject) {\r\n//       this.setState({\r\n//         deviceDetailsObject: node,\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   // This function set the state of \"networkDrawerStatus\" will be \"true\"\r\n//   // This function will also set the state of \"deviceDrawerStatus\" to false\r\n//   // This function will only be invoked when the \"Show Network Statistics\" button is pressed\r\n//   handleNetworkStatistcsButton = () => {\r\n//     this.setState({\r\n//       networkDrawerStatus: true,\r\n//       deviceDrawerStatus: false,\r\n//     });\r\n//   };\r\n\r\n//   // This function sets the state of \"deviceDrawerStatus\" to \"false\"\r\n//   // This funtion is passed to the child component \"DeviceDrawer\"\r\n//   // When clicking on the \"X\" symbol in \"DeviceDrawer\", this function will run\r\n//   closeDeviceDrawer = () => {\r\n//     this.setState({ deviceDrawerStatus: false });\r\n//   };\r\n\r\n//   // This function sets the state of \"networkDrawerStatus\" to \"false\"\r\n//   // This funtion is passed to the child component \"NetworkDrawer\"\r\n//   // When clicking on the \"X\" symbol in \"NetworkDrawer\", this function will run\r\n//   closeNetworkDrawer = () => {\r\n//     this.setState({ networkDrawerStatus: false });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         <div\r\n//           id=\"tester\"\r\n//           style={{\r\n//             padding: 10,\r\n//             position: \"absolute\",\r\n//             top: 10,\r\n//             left: 210,\r\n//             zIndex: 1,\r\n//             background: \"white\",\r\n//             height: 200,\r\n//             width: 200,\r\n//           }}\r\n//         >\r\n//           <p>IP: {this.state.deviceDetailsObject.id}</p>\r\n//           <p>Name: {this.state.deviceDetailsObject.name}</p>\r\n//           <p>Type: {this.state.deviceDetailsObject.type}</p>\r\n//           <p>OS: {this.state.deviceDetailsObject.os}</p>\r\n//           <p>Mac: {this.state.deviceDetailsObject.mac_addr}</p>\r\n//         </div>\r\n//         <Affix style={{ position: \"absolute\", top: 120, left: 10 }}>\r\n//           <Button type=\"primary\" onClick={this.handleNetworkStatistcsButton}>\r\n//             Show Network Statistics\r\n//           </Button>\r\n//         </Affix>\r\n\r\n//         <NetworkDrawer\r\n//           networkDetailObject={this.state.networkDetailObject}\r\n//           networkDrawerStatus={this.state.networkDrawerStatus}\r\n//           networkStatisticsObject={this.state.networkStatisticsObject}\r\n//           networkDeviceCounter={this.state.networkDeviceCounter}\r\n//           closeNetworkDrawerFunction={this.closeNetworkDrawer}\r\n//         />\r\n//         <DeviceDrawer\r\n//           deviceDetails={this.state.deviceDetailsObject}\r\n//           deviceDrawerStatus={this.state.deviceDrawerStatus}\r\n//           closeDeviceDrawerFunction={this.closeDeviceDrawer}\r\n//         />\r\n//         <ForceGraphComponent\r\n//           style={{ zIndex: -1 }}\r\n//           handleRightClick={this.handleRightClick}\r\n//           handleHover={this.handleHover}\r\n//           handleClick={this.FocusGraph}\r\n//         />\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// handleClick = (node) => {\r\n//   const getHostName = testingData.filter((thisDevice) =>\r\n//     thisDevice.id.includes(node.id)\r\n//   );\r\n//   getHostName.map((deviceDetails) => {\r\n//     // alert(deviceDetails.os);\r\n//     this.setState({ deviceDetailsObject: deviceDetails });\r\n//   });\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}