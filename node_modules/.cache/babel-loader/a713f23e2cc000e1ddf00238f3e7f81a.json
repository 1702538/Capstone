{"ast":null,"code":"var _jsxFileName = \"C:\\\\SourceTree\\\\capstone-project\\\\src\\\\NetworkTopology.js\",\n    _s2 = $RefreshSig$();\n\nimport \"antd/dist/antd.css\";\nimport React, { useState, useRef, useCallback } from \"react\";\nimport { Layout, Button, Affix } from \"antd\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport DeviceDrawer from \"./Components/DrawerDevice\";\nimport NetworkDrawer from \"./Components/DrawerNetwork\";\nimport * as THREE from \"three\";\nimport networkData from \"./Components/Data/network.json\";\nimport device_data from \"./Components/Data/device_data.json\";\nimport relation_data from \"./Components/Data/relation_data.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AppNetworkTopology() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [deviceDrawerStatus, setDeviceDrawerStatus] = useState(false);\n  const [networkDrawerStatus, setNetworkDrawerStatus] = useState(false); // networkDrawerStatus={this.state.networkDrawerStatus}\n\n  const [deviceDetails, setDeviceDetails] = useState({});\n  const [networkDetails, setNetworkDetails] = useState({});\n  const [groupByDevice, setGroupByDevice] = useState();\n  const [deviceCounter, setDeviceCounter] = useState();\n\n  const closeDeviceDrawer = () => {\n    setDeviceDrawerStatus(false);\n  };\n\n  const closeNetworkDrawer = () => {\n    setNetworkDrawerStatus(false);\n  };\n\n  const handleNetworkStatisticsButton = () => {\n    setDeviceDrawerStatus(false);\n    setNetworkDrawerStatus(true);\n    setNetworkDetails(networkData[0]);\n    setDeviceCounter(device_data.length);\n    setGroupByDevice(groupByDeviceType());\n  }; // const groupByDeviceType = device_data.reduce((thisData, dev) => {\n  //   thisData[dev.status] = thisData[dev.status] + 1 || 1;\n  //   return thisData;\n  // }, {});\n\n\n  const groupByDeviceType = () => {\n    var result = {};\n\n    for (var i = 0; i < device_data.length; i++) {\n      if (!result[device_data[i][\"status\"]]) {\n        result[device_data[i][\"status\"]] = 0;\n      }\n\n      result[device_data[i][\"status\"]]++;\n    }\n\n    return result;\n  };\n\n  const fgRef = useRef();\n  const zoomInNode = useCallback(node => {\n    setDeviceDrawerStatus(true);\n    setNetworkDrawerStatus(false);\n    setDeviceDetails(node); // Camera distance of node\n\n    const distance = 150;\n    const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n    fgRef.current.cameraPosition({\n      x: node.x * distRatio,\n      y: node.y * distRatio,\n      z: node.z * distRatio\n    }, // new position\n    node, // lookAt ({ x, y, z })\n    2000 // ms transition duration\n    );\n  }, [fgRef]);\n\n  const handleNodeHover = node => {\n    if (node) {\n      console.log(node);\n    } else {\n      console.log(\"Nothing\");\n    } // highlightNodes.clear();\n    // highlightLinks.clear();\n    // if (node) {\n    //   highlightNodes.add(node);\n    //   node.neighbors.forEach((neighbor) => highlightNodes.add(neighbor));\n    //   node.links.forEach((link) => highlightLinks.add(link));\n    // }\n\n  }; // const [highlightNodes, setHighlightNodes] = useState(new Set());\n  // const [highlightLinks, setHighlightLinks] = useState(new Set());\n  // const [hoverNode, setHoverNode] = useState(null);\n  // const updateHighlight = () => {\n  //   setHighlightNodes(highlightNodes);\n  //   setHighlightLinks(highlightLinks);\n  // };\n  // const handleNodeHover = (node) => {\n  //   highlightNodes.clear();\n  //   highlightLinks.clear();\n  //   if (node) {\n  //     highlightNodes.add(node);\n  //     node.neighbors.forEach((neighbor) => highlightNodes.add(neighbor));\n  //     node.links.forEach((link) => highlightLinks.add(link));\n  //   }\n  //   setHoverNode(node || null);\n  //   updateHighlight();\n  // };\n  // const handleLinkHover = (link) => {\n  //   highlightNodes.clear();\n  //   highlightLinks.clear();\n  //   if (link) {\n  //     highlightLinks.add(link);\n  //     highlightNodes.add(link.source);\n  //     highlightNodes.add(link.target);\n  //   }\n  //   updateHighlight();\n  // };\n\n\n  const {\n    useState,\n    useMemo,\n    useCallback\n  } = React;\n\n  const ExpandableGraph = _ref => {\n    _s();\n\n    let {\n      graphData\n    } = _ref;\n    const rootId = 0;\n    const nodesById = useMemo(() => {\n      const nodesById = Object.fromEntries(graphData.nodes.map(node => [node.id, node])); // link parent/children\n\n      graphData.nodes.forEach(node => {\n        node.collapsed = node.id !== rootId;\n        node.childLinks = [];\n      });\n      graphData.links.forEach(link => nodesById[link.source].childLinks.push(link));\n      return nodesById;\n    }, [graphData]);\n    const getPrunedTree = useCallback(() => {\n      const visibleNodes = [];\n      const visibleLinks = [];\n\n      (function traverseTree() {\n        let node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : nodesById[rootId];\n        visibleNodes.push(node);\n        if (node.collapsed) return;\n        visibleLinks.push(...node.childLinks);\n        node.childLinks.map(link => typeof link.target === \"object\" ? link.target : nodesById[link.target]) // get child node\n        .forEach(traverseTree);\n      })();\n\n      return {\n        nodes: visibleNodes,\n        links: visibleLinks\n      };\n    }, [nodesById]);\n    const [prunedTree, setPrunedTree] = useState(getPrunedTree());\n    const handleNodeClick = useCallback(node => {\n      node.collapsed = !node.collapsed; // toggle collapse state\n\n      setPrunedTree(getPrunedTree());\n    }, []);\n    return /*#__PURE__*/_jsxDEV(ForceGraph3D, {\n      graphData: prunedTree,\n      linkDirectionalParticles: 2,\n      nodeColor: node => !node.childLinks.length ? \"green\" : node.collapsed ? \"red\" : \"yellow\",\n      onNodeClick: handleNodeClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this);\n  };\n\n  _s(ExpandableGraph, \"5C788SkXDArg9YvgPcdLAnBuJh4=\");\n\n  return (\n    /*#__PURE__*/\n    // <div style={{ background: \"black\" }}>\n    //   <Layout style={{ marginLeft: 199, zIndex: -1 }}>\n    //     <ForceGraph3D\n    //       width={window.innerWidth - 199}\n    //       height={window.innerHeight - 1}\n    //       ref={fgRef}\n    //       graphData={{\n    //         nodes: device_data,\n    //         links: relation_data,\n    //       }}\n    //       nodeLabel={(node) =>\n    //         `<div style=\"background: #1F1E26; padding: 5px 10px 8px 10px; border-radius: 10px; user-select: none\">\n    //         <span>Name: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>${node.name}</b></span><br/>\n    //         <span>IP Addr: &nbsp;&nbsp;&nbsp;&nbsp;<b>${node.id}</b></span><br/>\n    //         <span>Mac Addr: &nbsp;<b>${node.mac_addr}</b></span>\n    //         </div>`\n    //       }\n    //       linkWidth={2}\n    //       onNodeRightClick={zoomInNode}\n    //       linkDirectionalParticles={1}\n    //       linkDirectionalParticleSpeed={0.01}\n    //       onNodeHover={handleNodeHover}\n    //       // onNodeHover={handleHover}\n    //       // onNodeDragEnd={(node) => {\n    //       //   node.fx = node.x;\n    //       //   node.fy = node.y;\n    //       //   node.fz = node.z;\n    //       // }}\n    //       nodeThreeObject={({ type, status }) => {\n    //         let imgTexture = null;\n    //         if (type === \"DB\") {\n    //           if (status === \"Active\") {\n    //             imgTexture = new THREE.TextureLoader().load(\n    //               \"assets/online_db.png\"\n    //             );\n    //           } else if (status === \"Inactive\") {\n    //             imgTexture = new THREE.TextureLoader().load(\n    //               \"assets/inactive_db.png\"\n    //             );\n    //           } else {\n    //             imgTexture = new THREE.TextureLoader().load(\n    //               \"assets/offline_db.png\"\n    //             );\n    //           }\n    //         } else if (type === \"PC\") {\n    //           if (status === \"Active\") {\n    //             imgTexture = new THREE.TextureLoader().load(\n    //               \"assets/online_pc.png\"\n    //             );\n    //           } else if (status === \"Inactive\") {\n    //             imgTexture = new THREE.TextureLoader().load(\n    //               \"assets/inactive_pc.png\"\n    //             );\n    //           } else {\n    //             imgTexture = new THREE.TextureLoader().load(\n    //               \"assets/offline_pc.png\"\n    //             );\n    //           }\n    //         } else if (type === \"Router\") {\n    //           if (status === \"Active\") {\n    //             imgTexture = new THREE.TextureLoader().load(\n    //               \"assets/online_router.png\"\n    //             );\n    //           } else if (status === \"Inactive\") {\n    //             imgTexture = new THREE.TextureLoader().load(\n    //               \"assets/inactive_router.png\"\n    //             );\n    //           } else {\n    //             imgTexture = new THREE.TextureLoader().load(\n    //               \"assets/offline_router.png\"\n    //             );\n    //           }\n    //         }\n    //         const material = new THREE.SpriteMaterial({ map: imgTexture });\n    //         const sprite = new THREE.Sprite(material);\n    //         sprite.scale.set(12, 12);\n    //         return sprite;\n    //       }}\n    //     />\n    //   </Layout>\n    //   <Affix style={{ position: \"absolute\", top: 120, left: 10 }}>\n    //     <Button type=\"primary\" onClick={handleNetworkStatisticsButton}>\n    //       Show Network Statistics\n    //     </Button>\n    //   </Affix>\n    //   <DeviceDrawer\n    //     deviceDrawerStatus={deviceDrawerStatus}\n    //     deviceDetails={deviceDetails}\n    //     closeDeviceDrawer={closeDeviceDrawer}\n    //   />\n    //   <NetworkDrawer\n    //     networkDrawerStatus={networkDrawerStatus}\n    //     networkDetails={networkDetails}\n    //     groupByDevice={groupByDevice}\n    //     deviceCounter={deviceCounter}\n    //     closeNetworkDrawer={closeNetworkDrawer}\n    //   />\n    // </div>\n    _jsxDEV(ExpandableGraph, {\n      graphData: {}\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s2(AppNetworkTopology, \"gSB3yNEAmOcWXVQzQPKHivva1RY=\");\n\n_c = AppNetworkTopology;\nexport default AppNetworkTopology; // const groupByDeviceType = device_data.reduce((thisData, dev) => {\n//   thisData[dev.status] = thisData[dev.status] + 1 || 1;\n//   return thisData;\n// }, {});\n// function FocusGraph() {\n//   const fgRef = React.useRef;\n//   const handleClick = React.useCallback(\n//     (node) => {\n//       const distance = 40;\n//       const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n//       fgRef.current.cameraPosition(\n//         { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio }, // new position\n//         node, // lookAt ({ x, y, z })\n//         3000 // camera transition duration (in ms)\n//       );\n//     },\n//     [fgRef]\n//   );\n// }\n// // ForceGraphComponent with React.memo implementation (Prevents unnecessary re-rendering)\n// const ForceGraphComponent = React.memo((props) => {\n//   console.log(\"Child rendered\"); // For verification purposes\n//   console.log(device_data);\n//   // Layout to add margin left to the Networok Topology Graph\n//   return (\n//     <Layout style={{ marginLeft: 199 }}>\n//       <ForceGraph3D\n//         width={window.innerWidth - 200}\n//         graphData={{\n//           nodes: device_data,\n//           links: relation_data,\n//         }}\n//         onNodeRightClick={props.handleRightClick}\n//         // linkDirectionalParticles={1}\n//         // linkDirectionalParticleSpeed={0.01}\n//         onNodeHover={props.handleHover}\n//         onNodeDragEnd={(node) => {\n//           node.fx = node.x;\n//           node.fy = node.y;\n//           node.fz = node.z;\n//         }}\n//         nodeThreeObject={({ type }) => {\n//           let imgTexture = null;\n//           if (type === \"DB\") {\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\n//           } else if (type === \"PC\") {\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\n//           } else if (type === \"Router\") {\n//             imgTexture = new THREE.TextureLoader().load(\n//               \"assets/img_router.png\"\n//             );\n//           }\n//           const material = new THREE.SpriteMaterial({ map: imgTexture });\n//           const sprite = new THREE.Sprite(material);\n//           sprite.scale.set(12, 12);\n//           return sprite;\n//         }}\n//       />\n//     </Layout>\n//   );\n// });\n// export default class AppNetworkTopology extends React.Component {\n//   // Initial state\n//   state = {\n//     deviceDrawerStatus: false,\n//     networkDrawerStatus: false,\n//     deviceDetailsObject: {},\n//     networkDetailObject: networkData[0],\n//     networkStatisticsObject: groupByDeviceType,\n//     networkDeviceCounter: device_data.length,\n//   };\n//   // shouldComponentUpdate = (nextProps, nextState) => {\n//   //   console.log(nextProps);\n//   //   console.log(nextState);\n//   //   return false;\n//   // };\n//   // On right-click on icon on network topology, the function will pass the object to handleRightClick()\n//   // This function wil then set the state of \"deviceDrawerStatus\" to \"true\"\n//   // This function will also set the state of \"networkDrawerStatus\" to false\n//   handleRightClick = (node) => {\n//     this.setState({\n//       deviceDetailsObject: node,\n//       deviceDrawerStatus: true,\n//       networkDrawerStatus: false,\n//     });\n//   };\n//   handleHover = (node) => {\n//     // console.log(this.state.deviceDetailsObject);\n//     if (node != null && node != this.state.deviceDetailsObject) {\n//       this.setState({\n//         deviceDetailsObject: node,\n//       });\n//     }\n//   };\n//   // This function set the state of \"networkDrawerStatus\" will be \"true\"\n//   // This function will also set the state of \"deviceDrawerStatus\" to false\n//   // This function will only be invoked when the \"Show Network Statistics\" button is pressed\n//   handleNetworkStatistcsButton = () => {\n//     this.setState({\n//       networkDrawerStatus: true,\n//       deviceDrawerStatus: false,\n//     });\n//   };\n//   // This function sets the state of \"deviceDrawerStatus\" to \"false\"\n//   // This funtion is passed to the child component \"DeviceDrawer\"\n//   // When clicking on the \"X\" symbol in \"DeviceDrawer\", this function will run\n//   closeDeviceDrawer = () => {\n//     this.setState({ deviceDrawerStatus: false });\n//   };\n//   // This function sets the state of \"networkDrawerStatus\" to \"false\"\n//   // This funtion is passed to the child component \"NetworkDrawer\"\n//   // When clicking on the \"X\" symbol in \"NetworkDrawer\", this function will run\n//   closeNetworkDrawer = () => {\n//     this.setState({ networkDrawerStatus: false });\n//   };\n//   render() {\n//     return (\n//       <div>\n//         <div\n//           id=\"tester\"\n//           style={{\n//             padding: 10,\n//             position: \"absolute\",\n//             top: 10,\n//             left: 210,\n//             zIndex: 1,\n//             background: \"white\",\n//             height: 200,\n//             width: 200,\n//           }}\n//         >\n//           <p>IP: {this.state.deviceDetailsObject.id}</p>\n//           <p>Name: {this.state.deviceDetailsObject.name}</p>\n//           <p>Type: {this.state.deviceDetailsObject.type}</p>\n//           <p>OS: {this.state.deviceDetailsObject.os}</p>\n//           <p>Mac: {this.state.deviceDetailsObject.mac_addr}</p>\n//         </div>\n//         <Affix style={{ position: \"absolute\", top: 120, left: 10 }}>\n//           <Button type=\"primary\" onClick={this.handleNetworkStatistcsButton}>\n//             Show Network Statistics\n//           </Button>\n//         </Affix>\n//         <NetworkDrawer\n//           networkDetailObject={this.state.networkDetailObject}\n//           networkDrawerStatus={this.state.networkDrawerStatus}\n//           networkStatisticsObject={this.state.networkStatisticsObject}\n//           networkDeviceCounter={this.state.networkDeviceCounter}\n//           closeNetworkDrawerFunction={this.closeNetworkDrawer}\n//         />\n//         <DeviceDrawer\n//           deviceDetails={this.state.deviceDetailsObject}\n//           deviceDrawerStatus={this.state.deviceDrawerStatus}\n//           closeDeviceDrawerFunction={this.closeDeviceDrawer}\n//         />\n//         <ForceGraphComponent\n//           style={{ zIndex: -1 }}\n//           handleRightClick={this.handleRightClick}\n//           handleHover={this.handleHover}\n//           handleClick={this.FocusGraph}\n//         />\n//       </div>\n//     );\n//   }\n// }\n// handleClick = (node) => {\n//   const getHostName = testingData.filter((thisDevice) =>\n//     thisDevice.id.includes(node.id)\n//   );\n//   getHostName.map((deviceDetails) => {\n//     // alert(deviceDetails.os);\n//     this.setState({ deviceDetailsObject: deviceDetails });\n//   });\n// };\n\nvar _c;\n\n$RefreshReg$(_c, \"AppNetworkTopology\");","map":{"version":3,"sources":["C:/SourceTree/capstone-project/src/NetworkTopology.js"],"names":["React","useState","useRef","useCallback","Layout","Button","Affix","ForceGraph3D","DeviceDrawer","NetworkDrawer","THREE","networkData","device_data","relation_data","AppNetworkTopology","deviceDrawerStatus","setDeviceDrawerStatus","networkDrawerStatus","setNetworkDrawerStatus","deviceDetails","setDeviceDetails","networkDetails","setNetworkDetails","groupByDevice","setGroupByDevice","deviceCounter","setDeviceCounter","closeDeviceDrawer","closeNetworkDrawer","handleNetworkStatisticsButton","length","groupByDeviceType","result","i","fgRef","zoomInNode","node","distance","distRatio","Math","hypot","x","y","z","current","cameraPosition","handleNodeHover","console","log","useMemo","ExpandableGraph","graphData","rootId","nodesById","Object","fromEntries","nodes","map","id","forEach","collapsed","childLinks","links","link","source","push","getPrunedTree","visibleNodes","visibleLinks","traverseTree","target","prunedTree","setPrunedTree","handleNodeClick"],"mappings":"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":["import \"antd/dist/antd.css\";\r\nimport React, { useState, useRef, useCallback } from \"react\";\r\nimport { Layout, Button, Affix } from \"antd\";\r\nimport { ForceGraph3D } from \"react-force-graph\";\r\nimport DeviceDrawer from \"./Components/DrawerDevice\";\r\nimport NetworkDrawer from \"./Components/DrawerNetwork\";\r\nimport * as THREE from \"three\";\r\nimport networkData from \"./Components/Data/network.json\";\r\nimport device_data from \"./Components/Data/device_data.json\";\r\nimport relation_data from \"./Components/Data/relation_data.json\";\r\n\r\nfunction AppNetworkTopology() {\r\n  const [deviceDrawerStatus, setDeviceDrawerStatus] = useState(false);\r\n  const [networkDrawerStatus, setNetworkDrawerStatus] = useState(false); // networkDrawerStatus={this.state.networkDrawerStatus}\r\n  const [deviceDetails, setDeviceDetails] = useState({});\r\n  const [networkDetails, setNetworkDetails] = useState({});\r\n  const [groupByDevice, setGroupByDevice] = useState();\r\n  const [deviceCounter, setDeviceCounter] = useState();\r\n\r\n  const closeDeviceDrawer = () => {\r\n    setDeviceDrawerStatus(false);\r\n  };\r\n\r\n  const closeNetworkDrawer = () => {\r\n    setNetworkDrawerStatus(false);\r\n  };\r\n\r\n  const handleNetworkStatisticsButton = () => {\r\n    setDeviceDrawerStatus(false);\r\n    setNetworkDrawerStatus(true);\r\n    setNetworkDetails(networkData[0]);\r\n    setDeviceCounter(device_data.length);\r\n    setGroupByDevice(groupByDeviceType());\r\n  };\r\n\r\n  // const groupByDeviceType = device_data.reduce((thisData, dev) => {\r\n  //   thisData[dev.status] = thisData[dev.status] + 1 || 1;\r\n  //   return thisData;\r\n  // }, {});\r\n\r\n  const groupByDeviceType = () => {\r\n    var result = {};\r\n    for (var i = 0; i < device_data.length; i++) {\r\n      if (!result[device_data[i][\"status\"]]) {\r\n        result[device_data[i][\"status\"]] = 0;\r\n      }\r\n      result[device_data[i][\"status\"]]++;\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const fgRef = useRef();\r\n  const zoomInNode = useCallback(\r\n    (node) => {\r\n      setDeviceDrawerStatus(true);\r\n      setNetworkDrawerStatus(false);\r\n      setDeviceDetails(node);\r\n\r\n      // Camera distance of node\r\n      const distance = 150;\r\n      const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\r\n\r\n      fgRef.current.cameraPosition(\r\n        {\r\n          x: node.x * distRatio,\r\n          y: node.y * distRatio,\r\n          z: node.z * distRatio,\r\n        }, // new position\r\n        node, // lookAt ({ x, y, z })\r\n        2000 // ms transition duration\r\n      );\r\n    },\r\n    [fgRef]\r\n  );\r\n\r\n  const handleNodeHover = (node) => {\r\n    if (node) {\r\n      console.log(node);\r\n    } else {\r\n      console.log(\"Nothing\");\r\n    }\r\n    // highlightNodes.clear();\r\n    // highlightLinks.clear();\r\n    // if (node) {\r\n    //   highlightNodes.add(node);\r\n    //   node.neighbors.forEach((neighbor) => highlightNodes.add(neighbor));\r\n    //   node.links.forEach((link) => highlightLinks.add(link));\r\n    // }\r\n  };\r\n\r\n  // const [highlightNodes, setHighlightNodes] = useState(new Set());\r\n  // const [highlightLinks, setHighlightLinks] = useState(new Set());\r\n  // const [hoverNode, setHoverNode] = useState(null);\r\n\r\n  // const updateHighlight = () => {\r\n  //   setHighlightNodes(highlightNodes);\r\n  //   setHighlightLinks(highlightLinks);\r\n  // };\r\n\r\n  // const handleNodeHover = (node) => {\r\n  //   highlightNodes.clear();\r\n  //   highlightLinks.clear();\r\n  //   if (node) {\r\n  //     highlightNodes.add(node);\r\n  //     node.neighbors.forEach((neighbor) => highlightNodes.add(neighbor));\r\n  //     node.links.forEach((link) => highlightLinks.add(link));\r\n  //   }\r\n\r\n  //   setHoverNode(node || null);\r\n  //   updateHighlight();\r\n  // };\r\n\r\n  // const handleLinkHover = (link) => {\r\n  //   highlightNodes.clear();\r\n  //   highlightLinks.clear();\r\n\r\n  //   if (link) {\r\n  //     highlightLinks.add(link);\r\n  //     highlightNodes.add(link.source);\r\n  //     highlightNodes.add(link.target);\r\n  //   }\r\n\r\n  //   updateHighlight();\r\n  // };\r\n\r\n  const { useState, useMemo, useCallback } = React;\r\n\r\n  const ExpandableGraph = ({ graphData }) => {\r\n    const rootId = 0;\r\n\r\n    const nodesById = useMemo(() => {\r\n      const nodesById = Object.fromEntries(\r\n        graphData.nodes.map((node) => [node.id, node])\r\n      );\r\n\r\n      // link parent/children\r\n      graphData.nodes.forEach((node) => {\r\n        node.collapsed = node.id !== rootId;\r\n        node.childLinks = [];\r\n      });\r\n      graphData.links.forEach((link) =>\r\n        nodesById[link.source].childLinks.push(link)\r\n      );\r\n\r\n      return nodesById;\r\n    }, [graphData]);\r\n\r\n    const getPrunedTree = useCallback(() => {\r\n      const visibleNodes = [];\r\n      const visibleLinks = [];\r\n      (function traverseTree(node = nodesById[rootId]) {\r\n        visibleNodes.push(node);\r\n        if (node.collapsed) return;\r\n        visibleLinks.push(...node.childLinks);\r\n        node.childLinks\r\n          .map((link) =>\r\n            typeof link.target === \"object\"\r\n              ? link.target\r\n              : nodesById[link.target]\r\n          ) // get child node\r\n          .forEach(traverseTree);\r\n      })();\r\n\r\n      return { nodes: visibleNodes, links: visibleLinks };\r\n    }, [nodesById]);\r\n\r\n    const [prunedTree, setPrunedTree] = useState(getPrunedTree());\r\n\r\n    const handleNodeClick = useCallback((node) => {\r\n      node.collapsed = !node.collapsed; // toggle collapse state\r\n      setPrunedTree(getPrunedTree());\r\n    }, []);\r\n\r\n    return (\r\n      <ForceGraph3D\r\n        graphData={prunedTree}\r\n        linkDirectionalParticles={2}\r\n        nodeColor={(node) =>\r\n          !node.childLinks.length ? \"green\" : node.collapsed ? \"red\" : \"yellow\"\r\n        }\r\n        onNodeClick={handleNodeClick}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    // <div style={{ background: \"black\" }}>\r\n    //   <Layout style={{ marginLeft: 199, zIndex: -1 }}>\r\n    //     <ForceGraph3D\r\n    //       width={window.innerWidth - 199}\r\n    //       height={window.innerHeight - 1}\r\n    //       ref={fgRef}\r\n    //       graphData={{\r\n    //         nodes: device_data,\r\n    //         links: relation_data,\r\n    //       }}\r\n    //       nodeLabel={(node) =>\r\n    //         `<div style=\"background: #1F1E26; padding: 5px 10px 8px 10px; border-radius: 10px; user-select: none\">\r\n    //         <span>Name: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>${node.name}</b></span><br/>\r\n    //         <span>IP Addr: &nbsp;&nbsp;&nbsp;&nbsp;<b>${node.id}</b></span><br/>\r\n    //         <span>Mac Addr: &nbsp;<b>${node.mac_addr}</b></span>\r\n    //         </div>`\r\n    //       }\r\n    //       linkWidth={2}\r\n    //       onNodeRightClick={zoomInNode}\r\n    //       linkDirectionalParticles={1}\r\n    //       linkDirectionalParticleSpeed={0.01}\r\n    //       onNodeHover={handleNodeHover}\r\n    //       // onNodeHover={handleHover}\r\n    //       // onNodeDragEnd={(node) => {\r\n    //       //   node.fx = node.x;\r\n    //       //   node.fy = node.y;\r\n    //       //   node.fz = node.z;\r\n    //       // }}\r\n    //       nodeThreeObject={({ type, status }) => {\r\n    //         let imgTexture = null;\r\n    //         if (type === \"DB\") {\r\n    //           if (status === \"Active\") {\r\n    //             imgTexture = new THREE.TextureLoader().load(\r\n    //               \"assets/online_db.png\"\r\n    //             );\r\n    //           } else if (status === \"Inactive\") {\r\n    //             imgTexture = new THREE.TextureLoader().load(\r\n    //               \"assets/inactive_db.png\"\r\n    //             );\r\n    //           } else {\r\n    //             imgTexture = new THREE.TextureLoader().load(\r\n    //               \"assets/offline_db.png\"\r\n    //             );\r\n    //           }\r\n    //         } else if (type === \"PC\") {\r\n    //           if (status === \"Active\") {\r\n    //             imgTexture = new THREE.TextureLoader().load(\r\n    //               \"assets/online_pc.png\"\r\n    //             );\r\n    //           } else if (status === \"Inactive\") {\r\n    //             imgTexture = new THREE.TextureLoader().load(\r\n    //               \"assets/inactive_pc.png\"\r\n    //             );\r\n    //           } else {\r\n    //             imgTexture = new THREE.TextureLoader().load(\r\n    //               \"assets/offline_pc.png\"\r\n    //             );\r\n    //           }\r\n    //         } else if (type === \"Router\") {\r\n    //           if (status === \"Active\") {\r\n    //             imgTexture = new THREE.TextureLoader().load(\r\n    //               \"assets/online_router.png\"\r\n    //             );\r\n    //           } else if (status === \"Inactive\") {\r\n    //             imgTexture = new THREE.TextureLoader().load(\r\n    //               \"assets/inactive_router.png\"\r\n    //             );\r\n    //           } else {\r\n    //             imgTexture = new THREE.TextureLoader().load(\r\n    //               \"assets/offline_router.png\"\r\n    //             );\r\n    //           }\r\n    //         }\r\n\r\n    //         const material = new THREE.SpriteMaterial({ map: imgTexture });\r\n    //         const sprite = new THREE.Sprite(material);\r\n    //         sprite.scale.set(12, 12);\r\n\r\n    //         return sprite;\r\n    //       }}\r\n    //     />\r\n    //   </Layout>\r\n    //   <Affix style={{ position: \"absolute\", top: 120, left: 10 }}>\r\n    //     <Button type=\"primary\" onClick={handleNetworkStatisticsButton}>\r\n    //       Show Network Statistics\r\n    //     </Button>\r\n    //   </Affix>\r\n\r\n    //   <DeviceDrawer\r\n    //     deviceDrawerStatus={deviceDrawerStatus}\r\n    //     deviceDetails={deviceDetails}\r\n    //     closeDeviceDrawer={closeDeviceDrawer}\r\n    //   />\r\n    //   <NetworkDrawer\r\n    //     networkDrawerStatus={networkDrawerStatus}\r\n    //     networkDetails={networkDetails}\r\n    //     groupByDevice={groupByDevice}\r\n    //     deviceCounter={deviceCounter}\r\n    //     closeNetworkDrawer={closeNetworkDrawer}\r\n    //   />\r\n    // </div>\r\n    <ExpandableGraph graphData={{}} />\r\n  );\r\n}\r\n\r\nexport default AppNetworkTopology;\r\n\r\n// const groupByDeviceType = device_data.reduce((thisData, dev) => {\r\n//   thisData[dev.status] = thisData[dev.status] + 1 || 1;\r\n//   return thisData;\r\n// }, {});\r\n\r\n// function FocusGraph() {\r\n//   const fgRef = React.useRef;\r\n\r\n//   const handleClick = React.useCallback(\r\n//     (node) => {\r\n//       const distance = 40;\r\n//       const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\r\n\r\n//       fgRef.current.cameraPosition(\r\n//         { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio }, // new position\r\n//         node, // lookAt ({ x, y, z })\r\n//         3000 // camera transition duration (in ms)\r\n//       );\r\n//     },\r\n//     [fgRef]\r\n//   );\r\n// }\r\n\r\n// // ForceGraphComponent with React.memo implementation (Prevents unnecessary re-rendering)\r\n// const ForceGraphComponent = React.memo((props) => {\r\n//   console.log(\"Child rendered\"); // For verification purposes\r\n//   console.log(device_data);\r\n\r\n//   // Layout to add margin left to the Networok Topology Graph\r\n//   return (\r\n//     <Layout style={{ marginLeft: 199 }}>\r\n//       <ForceGraph3D\r\n//         width={window.innerWidth - 200}\r\n//         graphData={{\r\n//           nodes: device_data,\r\n//           links: relation_data,\r\n//         }}\r\n//         onNodeRightClick={props.handleRightClick}\r\n//         // linkDirectionalParticles={1}\r\n//         // linkDirectionalParticleSpeed={0.01}\r\n//         onNodeHover={props.handleHover}\r\n//         onNodeDragEnd={(node) => {\r\n//           node.fx = node.x;\r\n//           node.fy = node.y;\r\n//           node.fz = node.z;\r\n//         }}\r\n//         nodeThreeObject={({ type }) => {\r\n//           let imgTexture = null;\r\n//           if (type === \"DB\") {\r\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\r\n//           } else if (type === \"PC\") {\r\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\r\n//           } else if (type === \"Router\") {\r\n//             imgTexture = new THREE.TextureLoader().load(\r\n//               \"assets/img_router.png\"\r\n//             );\r\n//           }\r\n\r\n//           const material = new THREE.SpriteMaterial({ map: imgTexture });\r\n//           const sprite = new THREE.Sprite(material);\r\n//           sprite.scale.set(12, 12);\r\n\r\n//           return sprite;\r\n//         }}\r\n//       />\r\n//     </Layout>\r\n//   );\r\n// });\r\n\r\n// export default class AppNetworkTopology extends React.Component {\r\n//   // Initial state\r\n//   state = {\r\n//     deviceDrawerStatus: false,\r\n//     networkDrawerStatus: false,\r\n//     deviceDetailsObject: {},\r\n//     networkDetailObject: networkData[0],\r\n//     networkStatisticsObject: groupByDeviceType,\r\n//     networkDeviceCounter: device_data.length,\r\n//   };\r\n\r\n//   // shouldComponentUpdate = (nextProps, nextState) => {\r\n//   //   console.log(nextProps);\r\n//   //   console.log(nextState);\r\n//   //   return false;\r\n//   // };\r\n\r\n//   // On right-click on icon on network topology, the function will pass the object to handleRightClick()\r\n//   // This function wil then set the state of \"deviceDrawerStatus\" to \"true\"\r\n//   // This function will also set the state of \"networkDrawerStatus\" to false\r\n//   handleRightClick = (node) => {\r\n//     this.setState({\r\n//       deviceDetailsObject: node,\r\n//       deviceDrawerStatus: true,\r\n//       networkDrawerStatus: false,\r\n//     });\r\n//   };\r\n\r\n//   handleHover = (node) => {\r\n//     // console.log(this.state.deviceDetailsObject);\r\n//     if (node != null && node != this.state.deviceDetailsObject) {\r\n//       this.setState({\r\n//         deviceDetailsObject: node,\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   // This function set the state of \"networkDrawerStatus\" will be \"true\"\r\n//   // This function will also set the state of \"deviceDrawerStatus\" to false\r\n//   // This function will only be invoked when the \"Show Network Statistics\" button is pressed\r\n//   handleNetworkStatistcsButton = () => {\r\n//     this.setState({\r\n//       networkDrawerStatus: true,\r\n//       deviceDrawerStatus: false,\r\n//     });\r\n//   };\r\n\r\n//   // This function sets the state of \"deviceDrawerStatus\" to \"false\"\r\n//   // This funtion is passed to the child component \"DeviceDrawer\"\r\n//   // When clicking on the \"X\" symbol in \"DeviceDrawer\", this function will run\r\n//   closeDeviceDrawer = () => {\r\n//     this.setState({ deviceDrawerStatus: false });\r\n//   };\r\n\r\n//   // This function sets the state of \"networkDrawerStatus\" to \"false\"\r\n//   // This funtion is passed to the child component \"NetworkDrawer\"\r\n//   // When clicking on the \"X\" symbol in \"NetworkDrawer\", this function will run\r\n//   closeNetworkDrawer = () => {\r\n//     this.setState({ networkDrawerStatus: false });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         <div\r\n//           id=\"tester\"\r\n//           style={{\r\n//             padding: 10,\r\n//             position: \"absolute\",\r\n//             top: 10,\r\n//             left: 210,\r\n//             zIndex: 1,\r\n//             background: \"white\",\r\n//             height: 200,\r\n//             width: 200,\r\n//           }}\r\n//         >\r\n//           <p>IP: {this.state.deviceDetailsObject.id}</p>\r\n//           <p>Name: {this.state.deviceDetailsObject.name}</p>\r\n//           <p>Type: {this.state.deviceDetailsObject.type}</p>\r\n//           <p>OS: {this.state.deviceDetailsObject.os}</p>\r\n//           <p>Mac: {this.state.deviceDetailsObject.mac_addr}</p>\r\n//         </div>\r\n//         <Affix style={{ position: \"absolute\", top: 120, left: 10 }}>\r\n//           <Button type=\"primary\" onClick={this.handleNetworkStatistcsButton}>\r\n//             Show Network Statistics\r\n//           </Button>\r\n//         </Affix>\r\n\r\n//         <NetworkDrawer\r\n//           networkDetailObject={this.state.networkDetailObject}\r\n//           networkDrawerStatus={this.state.networkDrawerStatus}\r\n//           networkStatisticsObject={this.state.networkStatisticsObject}\r\n//           networkDeviceCounter={this.state.networkDeviceCounter}\r\n//           closeNetworkDrawerFunction={this.closeNetworkDrawer}\r\n//         />\r\n//         <DeviceDrawer\r\n//           deviceDetails={this.state.deviceDetailsObject}\r\n//           deviceDrawerStatus={this.state.deviceDrawerStatus}\r\n//           closeDeviceDrawerFunction={this.closeDeviceDrawer}\r\n//         />\r\n//         <ForceGraphComponent\r\n//           style={{ zIndex: -1 }}\r\n//           handleRightClick={this.handleRightClick}\r\n//           handleHover={this.handleHover}\r\n//           handleClick={this.FocusGraph}\r\n//         />\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// handleClick = (node) => {\r\n//   const getHostName = testingData.filter((thisDevice) =>\r\n//     thisDevice.id.includes(node.id)\r\n//   );\r\n//   getHostName.map((deviceDetails) => {\r\n//     // alert(deviceDetails.os);\r\n//     this.setState({ deviceDetailsObject: deviceDetails });\r\n//   });\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}