{"ast":null,"code":"var _jsxFileName = \"C:\\\\Capstone\\\\capstone-project\\\\src\\\\NetworkTopology.js\",\n    _s = $RefreshSig$();\n\nimport \"antd/dist/antd.css\";\nimport { ForceGraph2D } from \"react-force-graph\";\nimport React, { useState, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AppNetworkTopology() {\n  _s();\n\n  const [count, setCount] = useState(0);\n\n  const increment = () => {\n    setCount(count + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n      graphData: {\n        nodes: [{\n          id: \"192.168.1.100\",\n          name: \"Server\",\n          val: 1\n        }, {\n          id: \"192.168.1.101\",\n          name: \"PC-1\",\n          val: 2\n        }, {\n          id: \"192.168.1.102\",\n          name: \"PC-2\",\n          val: 3\n        }],\n        links: [{\n          source: \"192.168.1.100\",\n          target: \"192.168.1.101\"\n        }, {\n          source: \"192.168.1.100\",\n          target: \"192.168.1.102\"\n        }, {\n          source: \"192.168.1.101\",\n          target: \"192.168.1.102\"\n        }]\n      },\n      nodeLabel: \"name\",\n      onNodeRightClick: increment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AppNetworkTopology, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");\n\n_c = AppNetworkTopology;\n\nfunction genRandomTree() {\n  let N = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 300;\n  let reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return {\n    nodes: [...Array(N).keys()].map(i => ({\n      id: i\n    })),\n    links: [...Array(N).keys()].filter(id => id).map(id => ({\n      [reverse ? \"target\" : \"source\"]: id,\n      [reverse ? \"source\" : \"target\"]: Math.round(Math.random() * (id - 1))\n    }))\n  };\n}\n\nexport default AppNetworkTopology;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppNetworkTopology\");","map":{"version":3,"sources":["C:/Capstone/capstone-project/src/NetworkTopology.js"],"names":["ForceGraph2D","React","useState","useCallback","AppNetworkTopology","count","setCount","increment","nodes","id","name","val","links","source","target","genRandomTree","N","reverse","Array","keys","map","i","filter","Math","round","random"],"mappings":";;;AAAA,OAAO,oBAAP;AACA,SAASA,YAAT,QAA6B,mBAA7B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;;;AAEA,SAASC,kBAAT,GAA8B;AAAA;;AAC5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,CAAD,CAAlC;;AACA,QAAMK,SAAS,GAAG,MAAM;AACtBD,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD,GAFD;;AAIA,sBACE;AAAA,2BACE,QAAC,YAAD;AACE,MAAA,SAAS,EAAE;AACTG,QAAAA,KAAK,EAAE,CACL;AACEC,UAAAA,EAAE,EAAE,eADN;AAEEC,UAAAA,IAAI,EAAE,QAFR;AAGEC,UAAAA,GAAG,EAAE;AAHP,SADK,EAML;AACEF,UAAAA,EAAE,EAAE,eADN;AAEEC,UAAAA,IAAI,EAAE,MAFR;AAGEC,UAAAA,GAAG,EAAE;AAHP,SANK,EAWL;AACEF,UAAAA,EAAE,EAAE,eADN;AAEEC,UAAAA,IAAI,EAAE,MAFR;AAGEC,UAAAA,GAAG,EAAE;AAHP,SAXK,CADE;AAkBTC,QAAAA,KAAK,EAAE,CACL;AACEC,UAAAA,MAAM,EAAE,eADV;AAEEC,UAAAA,MAAM,EAAE;AAFV,SADK,EAKL;AACED,UAAAA,MAAM,EAAE,eADV;AAEEC,UAAAA,MAAM,EAAE;AAFV,SALK,EASL;AACED,UAAAA,MAAM,EAAE,eADV;AAEEC,UAAAA,MAAM,EAAE;AAFV,SATK;AAlBE,OADb;AAkCE,MAAA,SAAS,EAAC,MAlCZ;AAmCE,MAAA,gBAAgB,EAAEP;AAnCpB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAyCD;;GA/CQH,kB;;KAAAA,kB;;AAiDT,SAASW,aAAT,GAAiD;AAAA,MAA1BC,CAA0B,uEAAtB,GAAsB;AAAA,MAAjBC,OAAiB,uEAAP,KAAO;AAC/C,SAAO;AACLT,IAAAA,KAAK,EAAE,CAAC,GAAGU,KAAK,CAACF,CAAD,CAAL,CAASG,IAAT,EAAJ,EAAqBC,GAArB,CAA0BC,CAAD,KAAQ;AAAEZ,MAAAA,EAAE,EAAEY;AAAN,KAAR,CAAzB,CADF;AAELT,IAAAA,KAAK,EAAE,CAAC,GAAGM,KAAK,CAACF,CAAD,CAAL,CAASG,IAAT,EAAJ,EACJG,MADI,CACIb,EAAD,IAAQA,EADX,EAEJW,GAFI,CAECX,EAAD,KAAS;AACZ,OAACQ,OAAO,GAAG,QAAH,GAAc,QAAtB,GAAiCR,EADrB;AAEZ,OAACQ,OAAO,GAAG,QAAH,GAAc,QAAtB,GAAiCM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBhB,EAAE,GAAG,CAAtB,CAAX;AAFrB,KAAT,CAFA;AAFF,GAAP;AASD;;AAED,eAAeL,kBAAf","sourcesContent":["import \"antd/dist/antd.css\";\nimport { ForceGraph2D } from \"react-force-graph\";\nimport React, { useState, useCallback } from \"react\";\n\nfunction AppNetworkTopology() {\n  const [count, setCount] = useState(0);\n  const increment = () => {\n    setCount(count + 1);\n  };\n\n  return (\n    <div>\n      <ForceGraph2D\n        graphData={{\n          nodes: [\n            {\n              id: \"192.168.1.100\",\n              name: \"Server\",\n              val: 1,\n            },\n            {\n              id: \"192.168.1.101\",\n              name: \"PC-1\",\n              val: 2,\n            },\n            {\n              id: \"192.168.1.102\",\n              name: \"PC-2\",\n              val: 3,\n            },\n          ],\n          links: [\n            {\n              source: \"192.168.1.100\",\n              target: \"192.168.1.101\",\n            },\n            {\n              source: \"192.168.1.100\",\n              target: \"192.168.1.102\",\n            },\n            {\n              source: \"192.168.1.101\",\n              target: \"192.168.1.102\",\n            },\n          ],\n        }}\n        nodeLabel=\"name\"\n        onNodeRightClick={increment}\n      />\n    </div>\n  );\n}\n\nfunction genRandomTree(N = 300, reverse = false) {\n  return {\n    nodes: [...Array(N).keys()].map((i) => ({ id: i })),\n    links: [...Array(N).keys()]\n      .filter((id) => id)\n      .map((id) => ({\n        [reverse ? \"target\" : \"source\"]: id,\n        [reverse ? \"source\" : \"target\"]: Math.round(Math.random() * (id - 1)),\n      })),\n  };\n}\n\nexport default AppNetworkTopology;\n"]},"metadata":{},"sourceType":"module"}