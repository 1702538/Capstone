{"ast":null,"code":"var _jsxFileName = \"C:\\\\SourceTree\\\\capstone-project\\\\src\\\\NetworkTopology.js\";\nimport \"antd/dist/antd.css\";\nimport React from \"react\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport DeviceDrawer from \"./Components/DrawerDevice\";\nimport NetworkDrawer from \"./Components/DrawerNetwork\";\nimport * as THREE from \"three\";\nimport networkData from \"./components/Data/network.json\"; // import testingData from \"./Components/Data/testdata.json\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class AppNetworkTopology extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      deviceDetailsObject: {},\n      deviceDrawerStatus: false,\n      networkDrawerStatus: false\n    };\n\n    this.handleRightClick = node => {\n      this.setState({\n        deviceDetailsObject: node,\n        deviceDrawerStatus: true\n      });\n    };\n\n    this.handleNetworkStatistcsButton = () => {\n      this.setState({\n        networkDrawerStatus: true\n      });\n    };\n\n    this.closeDeviceDrawer = () => {\n      this.setState({\n        deviceDrawerStatus: false\n      });\n    };\n\n    this.closeNetworkDrawer = () => {\n      this.setState({\n        networkDrawerStatus: false\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: networkData.ssid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleNetworkStatistcsButton,\n        children: \"Show Network Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NetworkDrawer, {\n        networkDrawerStatus: this.state.networkDrawerStatus,\n        closeNetworkDrawerFunction: this.closeNetworkDrawer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DeviceDrawer, {\n        deviceDetails: this.state.deviceDetailsObject,\n        deviceDrawerStatus: this.state.deviceDrawerStatus,\n        closeDeviceDrawerFunction: this.closeDeviceDrawer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ForceGraph3D, {\n        graphData: {\n          nodes: [{\n            id: \"192.168.1.100\",\n            name: \"DB-01\",\n            type: \"DB\",\n            value: \"1\",\n            os: \"Linux\",\n            mac_addr: \"aa:aa:aa:aa:aa:aa\",\n            subnet: \"255.255.255.0\",\n            gateway: \"192.168.1.1\"\n          }, {\n            id: \"192.168.1.101\",\n            name: \"PC-01\",\n            type: \"PC\",\n            value: \"1\",\n            os: \"Windows 10\",\n            mac_addr: \"bb:bb:bb:bb:bb:bb\",\n            subnet: \"255.255.255.0\",\n            gateway: \"192.168.1.1\"\n          }, {\n            id: \"192.168.1.102\",\n            name: \"PC-02\",\n            type: \"PC\",\n            value: \"1\",\n            os: \"Windows 10\",\n            mac_addr: \"cc:cc:cc:cc:cc:cc\",\n            subnet: \"255.255.255.0\",\n            gateway: \"192.168.1.1\"\n          }],\n          links: [{\n            source: \"192.168.1.100\",\n            target: \"192.168.1.101\"\n          }, {\n            source: \"192.168.1.101\",\n            target: \"192.168.1.102\"\n          }, {\n            source: \"192.168.1.100\",\n            target: \"192.168.1.102\"\n          }]\n        },\n        onNodeRightClick: this.handleRightClick,\n        linkDirectionalParticles: 1,\n        linkDirectionalParticleSpeed: 0.01,\n        onNodeDragEnd: node => {\n          node.fx = node.x;\n          node.fy = node.y;\n          node.fz = node.z;\n        },\n        nodeThreeObject: _ref => {\n          let {\n            type\n          } = _ref;\n          let imgTexture = null;\n\n          if (type === \"DB\") {\n            imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\n          } else if (type === \"PC\") {\n            imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\n          }\n\n          const material = new THREE.SpriteMaterial({\n            map: imgTexture\n          });\n          const sprite = new THREE.Sprite(material);\n          sprite.scale.set(12, 12);\n          return sprite;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  }\n\n} // handleClick = (node) => {\n//   const getHostName = testingData.filter((thisDevice) =>\n//     thisDevice.id.includes(node.id)\n//   );\n//   getHostName.map((deviceDetails) => {\n//     // alert(deviceDetails.os);\n//     this.setState({ deviceDetailsObject: deviceDetails });\n//   });\n// };\n// import NetworkDrawer from \"./Components/DrawerNetwork\";\n// function AppNetworkTopology() {\n//   const [name] = useState(\"Tarun\");\n//   const handleClick = (node) => {\n//     const getHostName = testingData.filter((thisDevice) =>\n//       thisDevice.id.includes(node.id)\n//     );\n//     getHostName.map((deviceDetails) => {\n//       alert(deviceDetails.os);\n//       return <DeviceDrawer name={name} />;\n//     });\n//   };\n//   return (\n//     <div>\n//       <DeviceDrawer />\n//       <ForceGraph3D\n//         graphData={{\n//           nodes: [\n//             {\n//               id: \"192.168.1.100\",\n//               name: \"DB-01\",\n//               type: \"DB\",\n//               value: \"1\",\n//               os: \"Linux\",\n//               mac_addr: \"aa:aa:aa:aa:aa:aa\",\n//             },\n//             {\n//               id: \"192.168.1.101\",\n//               name: \"PC-01\",\n//               type: \"PC\",\n//               value: \"1\",\n//               mac_addr: \"bb:bb:bb:bb:bb:bb\",\n//             },\n//             {\n//               id: \"192.168.1.102\",\n//               name: \"PC-02\",\n//               type: \"PC\",\n//               value: \"1\",\n//               mac_addr: \"cc:cc:cc:cc:cc:cc\",\n//             },\n//           ],\n//           links: [\n//             {\n//               source: \"192.168.1.100\",\n//               target: \"192.168.1.101\",\n//             },\n//             {\n//               source: \"192.168.1.101\",\n//               target: \"192.168.1.102\",\n//             },\n//             {\n//               source: \"192.168.1.100\",\n//               target: \"192.168.1.102\",\n//             },\n//           ],\n//         }}\n//         onNodeRightClick={handleClick}\n//         linkDirectionalParticles={1}\n//         linkDirectionalParticleSpeed={0.01}\n//         onNodeDragEnd={(node) => {\n//           node.fx = node.x;\n//           node.fy = node.y;\n//           node.fz = node.z;\n//         }}\n//         nodeThreeObject={({ type }) => {\n//           let imgTexture = null;\n//           if (type === \"DB\") {\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\n//           } else if (type === \"PC\") {\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\n//           }\n//           const material = new THREE.SpriteMaterial({ map: imgTexture });\n//           const sprite = new THREE.Sprite(material);\n//           sprite.scale.set(12, 12);\n//           return sprite;\n//         }}\n//       />\n//     </div>\n//   );\n// }\n// export default AppNetworkTopology;","map":{"version":3,"sources":["C:/SourceTree/capstone-project/src/NetworkTopology.js"],"names":["React","ForceGraph3D","DeviceDrawer","NetworkDrawer","THREE","networkData","AppNetworkTopology","Component","state","deviceDetailsObject","deviceDrawerStatus","networkDrawerStatus","handleRightClick","node","setState","handleNetworkStatistcsButton","closeDeviceDrawer","closeNetworkDrawer","render","ssid","nodes","id","name","type","value","os","mac_addr","subnet","gateway","links","source","target","fx","x","fy","y","fz","z","imgTexture","TextureLoader","load","material","SpriteMaterial","map","sprite","Sprite","scale","set"],"mappings":"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","sourcesContent":["import \"antd/dist/antd.css\";\r\nimport React from \"react\";\r\nimport { ForceGraph3D } from \"react-force-graph\";\r\nimport DeviceDrawer from \"./Components/DrawerDevice\";\r\nimport NetworkDrawer from \"./Components/DrawerNetwork\";\r\nimport * as THREE from \"three\";\r\nimport networkData from \"./components/Data/network.json\";\r\n// import testingData from \"./Components/Data/testdata.json\";\r\n\r\nexport default class AppNetworkTopology extends React.Component {\r\n  // Initial state for deviceDetailsObject & drawerStatus\r\n  state = {\r\n    deviceDetailsObject: {},\r\n    deviceDrawerStatus: false,\r\n    networkDrawerStatus: false,\r\n  };\r\n\r\n  // On right-click on icon on network topology, pass the object to handleRightClick()\r\n  // Set deviceDetailsObject as node\r\n  handleRightClick = (node) => {\r\n    this.setState({ deviceDetailsObject: node, deviceDrawerStatus: true });\r\n  };\r\n\r\n  // This function set the state of \"networkDrawerStatus\" will be \"true\"\r\n  // This function will be linked to the \"Show Network Statistics\" button\r\n  // When the state of \"networkDrawerStatus\", the \"NetworkDrawer\" will open (visible={true})\r\n  handleNetworkStatistcsButton = () => {\r\n    this.setState({ networkDrawerStatus: true });\r\n  };\r\n\r\n  // This function sets the state of \"deviceDrawerStatus\" to \"false\"\r\n  // This funtion is passed to the child component \"DeviceDrawer\"\r\n  // When clicking on the \"X\" symbol in \"DeviceDrawer\", this function will run\r\n  closeDeviceDrawer = () => {\r\n    this.setState({ deviceDrawerStatus: false });\r\n  };\r\n\r\n  // This function sets the state of \"networkDrawerStatus\" to \"false\"\r\n  // This funtion is passed to the child component \"NetworkDrawer\"\r\n  // When clicking on the \"X\" symbol in \"NetworkDrawer\", this function will run\r\n  closeNetworkDrawer = () => {\r\n    this.setState({ networkDrawerStatus: false });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p>{networkData.ssid}</p>\r\n        <button onClick={this.handleNetworkStatistcsButton}>\r\n          Show Network Statistics\r\n        </button>\r\n        <NetworkDrawer\r\n          networkDrawerStatus={this.state.networkDrawerStatus}\r\n          closeNetworkDrawerFunction={this.closeNetworkDrawer}\r\n        />\r\n        <DeviceDrawer\r\n          deviceDetails={this.state.deviceDetailsObject}\r\n          deviceDrawerStatus={this.state.deviceDrawerStatus}\r\n          closeDeviceDrawerFunction={this.closeDeviceDrawer}\r\n        />\r\n        <ForceGraph3D\r\n          graphData={{\r\n            nodes: [\r\n              {\r\n                id: \"192.168.1.100\",\r\n                name: \"DB-01\",\r\n                type: \"DB\",\r\n                value: \"1\",\r\n                os: \"Linux\",\r\n                mac_addr: \"aa:aa:aa:aa:aa:aa\",\r\n                subnet: \"255.255.255.0\",\r\n                gateway: \"192.168.1.1\",\r\n              },\r\n              {\r\n                id: \"192.168.1.101\",\r\n                name: \"PC-01\",\r\n                type: \"PC\",\r\n                value: \"1\",\r\n                os: \"Windows 10\",\r\n                mac_addr: \"bb:bb:bb:bb:bb:bb\",\r\n                subnet: \"255.255.255.0\",\r\n                gateway: \"192.168.1.1\",\r\n              },\r\n              {\r\n                id: \"192.168.1.102\",\r\n                name: \"PC-02\",\r\n                type: \"PC\",\r\n                value: \"1\",\r\n                os: \"Windows 10\",\r\n                mac_addr: \"cc:cc:cc:cc:cc:cc\",\r\n                subnet: \"255.255.255.0\",\r\n                gateway: \"192.168.1.1\",\r\n              },\r\n            ],\r\n            links: [\r\n              {\r\n                source: \"192.168.1.100\",\r\n                target: \"192.168.1.101\",\r\n              },\r\n              {\r\n                source: \"192.168.1.101\",\r\n                target: \"192.168.1.102\",\r\n              },\r\n              {\r\n                source: \"192.168.1.100\",\r\n                target: \"192.168.1.102\",\r\n              },\r\n            ],\r\n          }}\r\n          onNodeRightClick={this.handleRightClick}\r\n          linkDirectionalParticles={1}\r\n          linkDirectionalParticleSpeed={0.01}\r\n          onNodeDragEnd={(node) => {\r\n            node.fx = node.x;\r\n            node.fy = node.y;\r\n            node.fz = node.z;\r\n          }}\r\n          nodeThreeObject={({ type }) => {\r\n            let imgTexture = null;\r\n            if (type === \"DB\") {\r\n              imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\r\n            } else if (type === \"PC\") {\r\n              imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\r\n            }\r\n\r\n            const material = new THREE.SpriteMaterial({ map: imgTexture });\r\n            const sprite = new THREE.Sprite(material);\r\n            sprite.scale.set(12, 12);\r\n\r\n            return sprite;\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// handleClick = (node) => {\r\n//   const getHostName = testingData.filter((thisDevice) =>\r\n//     thisDevice.id.includes(node.id)\r\n//   );\r\n//   getHostName.map((deviceDetails) => {\r\n//     // alert(deviceDetails.os);\r\n//     this.setState({ deviceDetailsObject: deviceDetails });\r\n//   });\r\n// };\r\n\r\n// import NetworkDrawer from \"./Components/DrawerNetwork\";\r\n\r\n// function AppNetworkTopology() {\r\n//   const [name] = useState(\"Tarun\");\r\n\r\n//   const handleClick = (node) => {\r\n//     const getHostName = testingData.filter((thisDevice) =>\r\n//       thisDevice.id.includes(node.id)\r\n//     );\r\n//     getHostName.map((deviceDetails) => {\r\n//       alert(deviceDetails.os);\r\n//       return <DeviceDrawer name={name} />;\r\n//     });\r\n//   };\r\n//   return (\r\n//     <div>\r\n//       <DeviceDrawer />\r\n//       <ForceGraph3D\r\n//         graphData={{\r\n//           nodes: [\r\n//             {\r\n//               id: \"192.168.1.100\",\r\n//               name: \"DB-01\",\r\n//               type: \"DB\",\r\n//               value: \"1\",\r\n//               os: \"Linux\",\r\n//               mac_addr: \"aa:aa:aa:aa:aa:aa\",\r\n//             },\r\n//             {\r\n//               id: \"192.168.1.101\",\r\n//               name: \"PC-01\",\r\n//               type: \"PC\",\r\n//               value: \"1\",\r\n//               mac_addr: \"bb:bb:bb:bb:bb:bb\",\r\n//             },\r\n//             {\r\n//               id: \"192.168.1.102\",\r\n//               name: \"PC-02\",\r\n//               type: \"PC\",\r\n//               value: \"1\",\r\n//               mac_addr: \"cc:cc:cc:cc:cc:cc\",\r\n//             },\r\n//           ],\r\n//           links: [\r\n//             {\r\n//               source: \"192.168.1.100\",\r\n//               target: \"192.168.1.101\",\r\n//             },\r\n//             {\r\n//               source: \"192.168.1.101\",\r\n//               target: \"192.168.1.102\",\r\n//             },\r\n//             {\r\n//               source: \"192.168.1.100\",\r\n//               target: \"192.168.1.102\",\r\n//             },\r\n//           ],\r\n//         }}\r\n//         onNodeRightClick={handleClick}\r\n//         linkDirectionalParticles={1}\r\n//         linkDirectionalParticleSpeed={0.01}\r\n//         onNodeDragEnd={(node) => {\r\n//           node.fx = node.x;\r\n//           node.fy = node.y;\r\n//           node.fz = node.z;\r\n//         }}\r\n//         nodeThreeObject={({ type }) => {\r\n//           let imgTexture = null;\r\n//           if (type === \"DB\") {\r\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\r\n//           } else if (type === \"PC\") {\r\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\r\n//           }\r\n\r\n//           const material = new THREE.SpriteMaterial({ map: imgTexture });\r\n//           const sprite = new THREE.Sprite(material);\r\n//           sprite.scale.set(12, 12);\r\n\r\n//           return sprite;\r\n//         }}\r\n//       />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default AppNetworkTopology;\r\n"]},"metadata":{},"sourceType":"module"}