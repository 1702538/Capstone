{"ast":null,"code":"const {\n  faker\n} = require(\"@faker-js/faker\");\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nfunction GenerateMockDataAlert() {\n  let rawdata = fs.readFileSync(path.resolve(__dirname, \"alert_temp.json\"));\n  let alerts_data = JSON.parse(rawdata);\n  var type = [\"a\", \"b\", \"c\"];\n  alerts_data.unshift({\n    timestamp: faker.time.recent(),\n    type: type[Math.floor(Math.random() * 3)]\n  });\n  fs.writeFileSync(path.resolve(__dirname, \"alert_temp.json\"), JSON.stringify(alerts_data, null, 2), \"utf-8\");\n  return {\n    alerts: alerts_data\n  };\n}\n\n_c = GenerateMockDataAlert;\nmodule.exports = GenerateMockDataAlert; //var employees = alerts;\n//   var type = [\"a\", \"b\", \"c\"];\n//   for (var id = 1; id <= 5; id++) {\n//     employees.push({\n//       timestamp: faker.time.recent(),\n//       type: type[Math.floor(Math.random() * 3)],\n//     });\n//   }\n\nvar _c;\n\n$RefreshReg$(_c, \"GenerateMockDataAlert\");","map":{"version":3,"sources":["C:/SourceTree/capstone-project/src/Components/Data/AlertDataGenerator.js"],"names":["faker","require","fs","path","GenerateMockDataAlert","rawdata","readFileSync","resolve","__dirname","alerts_data","JSON","parse","type","unshift","timestamp","time","recent","Math","floor","random","writeFileSync","stringify","alerts","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAYC,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AAEA,SAASG,qBAAT,GAAiC;AAC/B,MAAIC,OAAO,GAAGH,EAAE,CAACI,YAAH,CAAgBH,IAAI,CAACI,OAAL,CAAaC,SAAb,EAAwB,iBAAxB,CAAhB,CAAd;AACA,MAAIC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWN,OAAX,CAAlB;AAEA,MAAIO,IAAI,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAX;AAEAH,EAAAA,WAAW,CAACI,OAAZ,CAAoB;AAClBC,IAAAA,SAAS,EAAEd,KAAK,CAACe,IAAN,CAAWC,MAAX,EADO;AAElBJ,IAAAA,IAAI,EAAEA,IAAI,CAACK,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAD;AAFQ,GAApB;AAKAjB,EAAAA,EAAE,CAACkB,aAAH,CACEjB,IAAI,CAACI,OAAL,CAAaC,SAAb,EAAwB,iBAAxB,CADF,EAEEE,IAAI,CAACW,SAAL,CAAeZ,WAAf,EAA4B,IAA5B,EAAkC,CAAlC,CAFF,EAGE,OAHF;AAMA,SAAO;AAAEa,IAAAA,MAAM,EAAEb;AAAV,GAAP;AACD;;KAlBQL,qB;AAmBTmB,MAAM,CAACC,OAAP,GAAiBpB,qBAAjB,C,CAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["const { faker } = require(\"@faker-js/faker\");\r\nconst fs = require(\"fs\");\r\nconst path = require(\"path\");\r\n\r\nfunction GenerateMockDataAlert() {\r\n  let rawdata = fs.readFileSync(path.resolve(__dirname, \"alert_temp.json\"));\r\n  let alerts_data = JSON.parse(rawdata);\r\n\r\n  var type = [\"a\", \"b\", \"c\"];\r\n\r\n  alerts_data.unshift({\r\n    timestamp: faker.time.recent(),\r\n    type: type[Math.floor(Math.random() * 3)],\r\n  });\r\n\r\n  fs.writeFileSync(\r\n    path.resolve(__dirname, \"alert_temp.json\"),\r\n    JSON.stringify(alerts_data, null, 2),\r\n    \"utf-8\"\r\n  );\r\n\r\n  return { alerts: alerts_data };\r\n}\r\nmodule.exports = GenerateMockDataAlert;\r\n\r\n//var employees = alerts;\r\n\r\n//   var type = [\"a\", \"b\", \"c\"];\r\n\r\n//   for (var id = 1; id <= 5; id++) {\r\n//     employees.push({\r\n//       timestamp: faker.time.recent(),\r\n//       type: type[Math.floor(Math.random() * 3)],\r\n//     });\r\n//   }\r\n"]},"metadata":{},"sourceType":"module"}