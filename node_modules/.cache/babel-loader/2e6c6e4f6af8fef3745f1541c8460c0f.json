{"ast":null,"code":"var _jsxFileName = \"C:\\\\SourceTree\\\\capstone-project\\\\src\\\\NetworkTopology.js\",\n    _s = $RefreshSig$();\n\nimport \"antd/dist/antd.css\";\nimport React from \"react\";\nimport { Layout, Button, Affix } from \"antd\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport DeviceDrawer from \"./Components/DrawerDevice\";\nimport NetworkDrawer from \"./Components/DrawerNetwork\";\nimport * as THREE from \"three\";\nimport networkData from \"./Components/Data/network.json\";\nimport device_data from \"./Components/Data/device_data.json\";\nimport relation_data from \"./Components/Data/relation_data.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst groupByDeviceType = device_data.reduce((thisData, dev) => {\n  thisData[dev.status] = thisData[dev.status] + 1 || 1;\n  return thisData;\n}, {});\n\nfunction FocusGraph() {\n  _s();\n\n  const fgRef = React.useRef;\n  const handleClick = React.useCallback(node => {\n    // Aim at node from outside it\n    const distance = 40;\n    const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n    fgRef.current.cameraPosition({\n      x: node.x * distRatio,\n      y: node.y * distRatio,\n      z: node.z * distRatio\n    }, // new position\n    node, // lookAt ({ x, y, z })\n    3000 // ms transition duration\n    );\n  }, [fgRef]);\n} // ForceGraphComponent with React.memo implementation (Prevents unnecessary re-rendering)\n\n\n_s(FocusGraph, \"PRIOWs9bezaAbp8UlGmbaZMoYYA=\");\n\n_c = FocusGraph;\nconst ForceGraphComponent = /*#__PURE__*/React.memo(_c2 = props => {\n  console.log(\"Child rendered\"); // For verification purposes\n\n  console.log(device_data); // Layout to add margin left to the Networok Topology Graph\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    style: {\n      marginLeft: 199\n    },\n    children: /*#__PURE__*/_jsxDEV(ForceGraph3D, {\n      width: window.innerWidth - 200,\n      graphData: {\n        nodes: device_data,\n        links: relation_data\n      },\n      onNodeRightClick: props.handleRightClick // linkDirectionalParticles={1}\n      // linkDirectionalParticleSpeed={0.01}\n      ,\n      onNodeHover: props.handleHover,\n      onNodeDragEnd: node => {\n        node.fx = node.x;\n        node.fy = node.y;\n        node.fz = node.z;\n      },\n      nodeThreeObject: _ref => {\n        let {\n          type\n        } = _ref;\n        let imgTexture = null;\n\n        if (type === \"DB\") {\n          imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\n        } else if (type === \"PC\") {\n          imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\n        } else if (type === \"Router\") {\n          imgTexture = new THREE.TextureLoader().load(\"assets/img_router.png\");\n        }\n\n        const material = new THREE.SpriteMaterial({\n          map: imgTexture\n        });\n        const sprite = new THREE.Sprite(material);\n        sprite.scale.set(12, 12);\n        return sprite;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n});\n_c3 = ForceGraphComponent;\nexport default class AppNetworkTopology extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      deviceDrawerStatus: false,\n      networkDrawerStatus: false,\n      deviceDetailsObject: {},\n      networkDetailObject: networkData[0],\n      networkStatisticsObject: groupByDeviceType,\n      networkDeviceCounter: device_data.length\n    };\n\n    this.handleRightClick = node => {\n      this.setState({\n        deviceDetailsObject: node,\n        deviceDrawerStatus: true,\n        networkDrawerStatus: false\n      });\n    };\n\n    this.handleHover = node => {\n      if (node != null || node !== node) {\n        this.setState({\n          deviceDetailsObject: node\n        });\n      }\n    };\n\n    this.handleNetworkStatistcsButton = () => {\n      this.setState({\n        networkDrawerStatus: true,\n        deviceDrawerStatus: false\n      });\n    };\n\n    this.closeDeviceDrawer = () => {\n      this.setState({\n        deviceDrawerStatus: false\n      });\n    };\n\n    this.closeNetworkDrawer = () => {\n      this.setState({\n        networkDrawerStatus: false\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"tester\",\n        style: {\n          position: \"absolute\",\n          top: 10,\n          left: 210,\n          zIndex: 1,\n          background: \"white\",\n          height: 100,\n          width: 100\n        },\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.state.deviceDetailsObject.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Affix, {\n        style: {\n          position: \"absolute\",\n          top: 120,\n          left: 10\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          onClick: this.handleNetworkStatistcsButton,\n          children: \"Show Network Statistics\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NetworkDrawer, {\n        networkDetailObject: this.state.networkDetailObject,\n        networkDrawerStatus: this.state.networkDrawerStatus,\n        networkStatisticsObject: this.state.networkStatisticsObject,\n        networkDeviceCounter: this.state.networkDeviceCounter,\n        closeNetworkDrawerFunction: this.closeNetworkDrawer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DeviceDrawer, {\n        deviceDetails: this.state.deviceDetailsObject,\n        deviceDrawerStatus: this.state.deviceDrawerStatus,\n        closeDeviceDrawerFunction: this.closeDeviceDrawer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ForceGraphComponent, {\n        ref: this.fgRef,\n        style: {\n          zIndex: -1\n        },\n        handleRightClick: this.handleRightClick,\n        handleHover: this.handleHover,\n        handleClick: this.FocusGraph\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this);\n  }\n\n} // handleClick = (node) => {\n//   const getHostName = testingData.filter((thisDevice) =>\n//     thisDevice.id.includes(node.id)\n//   );\n//   getHostName.map((deviceDetails) => {\n//     // alert(deviceDetails.os);\n//     this.setState({ deviceDetailsObject: deviceDetails });\n//   });\n// };\n// import NetworkDrawer from \"./Components/DrawerNetwork\";\n// function AppNetworkTopology() {\n//   const [name] = useState(\"Tarun\");\n//   const handleClick = (node) => {\n//     const getHostName = testingData.filter((thisDevice) =>\n//       thisDevice.id.includes(node.id)\n//     );\n//     getHostName.map((deviceDetails) => {\n//       alert(deviceDetails.os);\n//       return <DeviceDrawer name={name} />;\n//     });\n//   };\n//   return (\n//     <div>\n//       <DeviceDrawer />\n//       <ForceGraph3D\n//         graphData={{\n//           nodes: [\n//             {\n//               id: \"192.168.1.100\",\n//               name: \"DB-01\",\n//               type: \"DB\",\n//               value: \"1\",\n//               os: \"Linux\",\n//               mac_addr: \"aa:aa:aa:aa:aa:aa\",\n//             },\n//             {\n//               id: \"192.168.1.101\",\n//               name: \"PC-01\",\n//               type: \"PC\",\n//               value: \"1\",\n//               mac_addr: \"bb:bb:bb:bb:bb:bb\",\n//             },\n//             {\n//               id: \"192.168.1.102\",\n//               name: \"PC-02\",\n//               type: \"PC\",\n//               value: \"1\",\n//               mac_addr: \"cc:cc:cc:cc:cc:cc\",\n//             },\n//           ],\n//           links: [\n//             {\n//               source: \"192.168.1.100\",\n//               target: \"192.168.1.101\",\n//             },\n//             {\n//               source: \"192.168.1.101\",\n//               target: \"192.168.1.102\",\n//             },\n//             {\n//               source: \"192.168.1.100\",\n//               target: \"192.168.1.102\",\n//             },\n//           ],\n//         }}\n//         onNodeRightClick={handleClick}\n//         linkDirectionalParticles={1}\n//         linkDirectionalParticleSpeed={0.01}\n//         onNodeDragEnd={(node) => {\n//           node.fx = node.x;\n//           node.fy = node.y;\n//           node.fz = node.z;\n//         }}\n//         nodeThreeObject={({ type }) => {\n//           let imgTexture = null;\n//           if (type === \"DB\") {\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\n//           } else if (type === \"PC\") {\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\n//           }\n//           const material = new THREE.SpriteMaterial({ map: imgTexture });\n//           const sprite = new THREE.Sprite(material);\n//           sprite.scale.set(12, 12);\n//           return sprite;\n//         }}\n//       />\n//     </div>\n//   );\n// }\n// export default AppNetworkTopology;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"FocusGraph\");\n$RefreshReg$(_c2, \"ForceGraphComponent$React.memo\");\n$RefreshReg$(_c3, \"ForceGraphComponent\");","map":{"version":3,"sources":["C:/SourceTree/capstone-project/src/NetworkTopology.js"],"names":["React","Layout","Button","Affix","ForceGraph3D","DeviceDrawer","NetworkDrawer","THREE","networkData","device_data","relation_data","groupByDeviceType","reduce","thisData","dev","status","FocusGraph","fgRef","useRef","handleClick","useCallback","node","distance","distRatio","Math","hypot","x","y","z","current","cameraPosition","ForceGraphComponent","memo","props","console","log","marginLeft","window","innerWidth","nodes","links","handleRightClick","handleHover","fx","fy","fz","type","imgTexture","TextureLoader","load","material","SpriteMaterial","map","sprite","Sprite","scale","set","AppNetworkTopology","Component","state","deviceDrawerStatus","networkDrawerStatus","deviceDetailsObject","networkDetailObject","networkStatisticsObject","networkDeviceCounter","length","setState","handleNetworkStatistcsButton","closeDeviceDrawer","closeNetworkDrawer","render","position","top","left","zIndex","background","height","width","id"],"mappings":";;;AAAA,OAAO,oBAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,KAAzB,QAAsC,MAAtC;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,WAAP,MAAwB,gCAAxB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,OAAOC,aAAP,MAA0B,sCAA1B;;AAEA,MAAMC,iBAAiB,GAAGF,WAAW,CAACG,MAAZ,CAAmB,CAACC,QAAD,EAAWC,GAAX,KAAmB;AAC9DD,EAAAA,QAAQ,CAACC,GAAG,CAACC,MAAL,CAAR,GAAuBF,QAAQ,CAACC,GAAG,CAACC,MAAL,CAAR,GAAuB,CAAvB,IAA4B,CAAnD;AACA,SAAOF,QAAP;AACD,CAHyB,EAGvB,EAHuB,CAA1B;;AAKA,SAASG,UAAT,GAAsB;AAAA;;AACpB,QAAMC,KAAK,GAAGjB,KAAK,CAACkB,MAApB;AAEA,QAAMC,WAAW,GAAGnB,KAAK,CAACoB,WAAN,CACjBC,IAAD,IAAU;AACR;AACA,UAAMC,QAAQ,GAAG,EAAjB;AACA,UAAMC,SAAS,GAAG,IAAID,QAAQ,GAAGE,IAAI,CAACC,KAAL,CAAWJ,IAAI,CAACK,CAAhB,EAAmBL,IAAI,CAACM,CAAxB,EAA2BN,IAAI,CAACO,CAAhC,CAAjC;AAEAX,IAAAA,KAAK,CAACY,OAAN,CAAcC,cAAd,CACE;AAAEJ,MAAAA,CAAC,EAAEL,IAAI,CAACK,CAAL,GAASH,SAAd;AAAyBI,MAAAA,CAAC,EAAEN,IAAI,CAACM,CAAL,GAASJ,SAArC;AAAgDK,MAAAA,CAAC,EAAEP,IAAI,CAACO,CAAL,GAASL;AAA5D,KADF,EAC2E;AACzEF,IAAAA,IAFF,EAEQ;AACN,QAHF,CAGO;AAHP;AAKD,GAXiB,EAYlB,CAACJ,KAAD,CAZkB,CAApB;AAcD,C,CAED;;;GAnBSD,U;;KAAAA,U;AAoBT,MAAMe,mBAAmB,gBAAG/B,KAAK,CAACgC,IAAN,OAAYC,KAAD,IAAW;AAChDC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EADgD,CACjB;;AAC/BD,EAAAA,OAAO,CAACC,GAAR,CAAY1B,WAAZ,EAFgD,CAIhD;;AACA,sBACE,QAAC,MAAD;AAAQ,IAAA,KAAK,EAAE;AAAE2B,MAAAA,UAAU,EAAE;AAAd,KAAf;AAAA,2BACE,QAAC,YAAD;AACE,MAAA,KAAK,EAAEC,MAAM,CAACC,UAAP,GAAoB,GAD7B;AAEE,MAAA,SAAS,EAAE;AACTC,QAAAA,KAAK,EAAE9B,WADE;AAET+B,QAAAA,KAAK,EAAE9B;AAFE,OAFb;AAME,MAAA,gBAAgB,EAAEuB,KAAK,CAACQ,gBAN1B,CAOE;AACA;AARF;AASE,MAAA,WAAW,EAAER,KAAK,CAACS,WATrB;AAUE,MAAA,aAAa,EAAGrB,IAAD,IAAU;AACvBA,QAAAA,IAAI,CAACsB,EAAL,GAAUtB,IAAI,CAACK,CAAf;AACAL,QAAAA,IAAI,CAACuB,EAAL,GAAUvB,IAAI,CAACM,CAAf;AACAN,QAAAA,IAAI,CAACwB,EAAL,GAAUxB,IAAI,CAACO,CAAf;AACD,OAdH;AAeE,MAAA,eAAe,EAAE,QAAc;AAAA,YAAb;AAAEkB,UAAAA;AAAF,SAAa;AAC7B,YAAIC,UAAU,GAAG,IAAjB;;AACA,YAAID,IAAI,KAAK,IAAb,EAAmB;AACjBC,UAAAA,UAAU,GAAG,IAAIxC,KAAK,CAACyC,aAAV,GAA0BC,IAA1B,CAA+B,mBAA/B,CAAb;AACD,SAFD,MAEO,IAAIH,IAAI,KAAK,IAAb,EAAmB;AACxBC,UAAAA,UAAU,GAAG,IAAIxC,KAAK,CAACyC,aAAV,GAA0BC,IAA1B,CAA+B,mBAA/B,CAAb;AACD,SAFM,MAEA,IAAIH,IAAI,KAAK,QAAb,EAAuB;AAC5BC,UAAAA,UAAU,GAAG,IAAIxC,KAAK,CAACyC,aAAV,GAA0BC,IAA1B,CACX,uBADW,CAAb;AAGD;;AAED,cAAMC,QAAQ,GAAG,IAAI3C,KAAK,CAAC4C,cAAV,CAAyB;AAAEC,UAAAA,GAAG,EAAEL;AAAP,SAAzB,CAAjB;AACA,cAAMM,MAAM,GAAG,IAAI9C,KAAK,CAAC+C,MAAV,CAAiBJ,QAAjB,CAAf;AACAG,QAAAA,MAAM,CAACE,KAAP,CAAaC,GAAb,CAAiB,EAAjB,EAAqB,EAArB;AAEA,eAAOH,MAAP;AACD;AAhCH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAsCD,CA3C2B,CAA5B;MAAMtB,mB;AA6CN,eAAe,MAAM0B,kBAAN,SAAiCzD,KAAK,CAAC0D,SAAvC,CAAiD;AAAA;AAAA;AAAA,SAE9DC,KAF8D,GAEtD;AACNC,MAAAA,kBAAkB,EAAE,KADd;AAENC,MAAAA,mBAAmB,EAAE,KAFf;AAGNC,MAAAA,mBAAmB,EAAE,EAHf;AAINC,MAAAA,mBAAmB,EAAEvD,WAAW,CAAC,CAAD,CAJ1B;AAKNwD,MAAAA,uBAAuB,EAAErD,iBALnB;AAMNsD,MAAAA,oBAAoB,EAAExD,WAAW,CAACyD;AAN5B,KAFsD;;AAAA,SAoB9DzB,gBApB8D,GAoB1CpB,IAAD,IAAU;AAC3B,WAAK8C,QAAL,CAAc;AACZL,QAAAA,mBAAmB,EAAEzC,IADT;AAEZuC,QAAAA,kBAAkB,EAAE,IAFR;AAGZC,QAAAA,mBAAmB,EAAE;AAHT,OAAd;AAKD,KA1B6D;;AAAA,SA4B9DnB,WA5B8D,GA4B/CrB,IAAD,IAAU;AACtB,UAAIA,IAAI,IAAI,IAAR,IAAgBA,IAAI,KAAKA,IAA7B,EAAmC;AACjC,aAAK8C,QAAL,CAAc;AACZL,UAAAA,mBAAmB,EAAEzC;AADT,SAAd;AAGD;AACF,KAlC6D;;AAAA,SAuC9D+C,4BAvC8D,GAuC/B,MAAM;AACnC,WAAKD,QAAL,CAAc;AACZN,QAAAA,mBAAmB,EAAE,IADT;AAEZD,QAAAA,kBAAkB,EAAE;AAFR,OAAd;AAID,KA5C6D;;AAAA,SAiD9DS,iBAjD8D,GAiD1C,MAAM;AACxB,WAAKF,QAAL,CAAc;AAAEP,QAAAA,kBAAkB,EAAE;AAAtB,OAAd;AACD,KAnD6D;;AAAA,SAwD9DU,kBAxD8D,GAwDzC,MAAM;AACzB,WAAKH,QAAL,CAAc;AAAEN,QAAAA,mBAAmB,EAAE;AAAvB,OAAd;AACD,KA1D6D;AAAA;;AA4D9DU,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AACE,QAAA,EAAE,EAAC,QADL;AAEE,QAAA,KAAK,EAAE;AACLC,UAAAA,QAAQ,EAAE,UADL;AAELC,UAAAA,GAAG,EAAE,EAFA;AAGLC,UAAAA,IAAI,EAAE,GAHD;AAILC,UAAAA,MAAM,EAAE,CAJH;AAKLC,UAAAA,UAAU,EAAE,OALP;AAMLC,UAAAA,MAAM,EAAE,GANH;AAOLC,UAAAA,KAAK,EAAE;AAPF,SAFT;AAAA,+BAYE;AAAA,oBAAI,KAAKnB,KAAL,CAAWG,mBAAX,CAA+BiB;AAAnC;AAAA;AAAA;AAAA;AAAA;AAZF;AAAA;AAAA;AAAA;AAAA,cADF,eAeE,QAAC,KAAD;AAAO,QAAA,KAAK,EAAE;AAAEP,UAAAA,QAAQ,EAAE,UAAZ;AAAwBC,UAAAA,GAAG,EAAE,GAA7B;AAAkCC,UAAAA,IAAI,EAAE;AAAxC,SAAd;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,SAAb;AAAuB,UAAA,OAAO,EAAE,KAAKN,4BAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAfF,eAqBE,QAAC,aAAD;AACE,QAAA,mBAAmB,EAAE,KAAKT,KAAL,CAAWI,mBADlC;AAEE,QAAA,mBAAmB,EAAE,KAAKJ,KAAL,CAAWE,mBAFlC;AAGE,QAAA,uBAAuB,EAAE,KAAKF,KAAL,CAAWK,uBAHtC;AAIE,QAAA,oBAAoB,EAAE,KAAKL,KAAL,CAAWM,oBAJnC;AAKE,QAAA,0BAA0B,EAAE,KAAKK;AALnC;AAAA;AAAA;AAAA;AAAA,cArBF,eA4BE,QAAC,YAAD;AACE,QAAA,aAAa,EAAE,KAAKX,KAAL,CAAWG,mBAD5B;AAEE,QAAA,kBAAkB,EAAE,KAAKH,KAAL,CAAWC,kBAFjC;AAGE,QAAA,yBAAyB,EAAE,KAAKS;AAHlC;AAAA;AAAA;AAAA;AAAA,cA5BF,eAiCE,QAAC,mBAAD;AACE,QAAA,GAAG,EAAE,KAAKpD,KADZ;AAEE,QAAA,KAAK,EAAE;AAAE0D,UAAAA,MAAM,EAAE,CAAC;AAAX,SAFT;AAGE,QAAA,gBAAgB,EAAE,KAAKlC,gBAHzB;AAIE,QAAA,WAAW,EAAE,KAAKC,WAJpB;AAKE,QAAA,WAAW,EAAE,KAAK1B;AALpB;AAAA;AAAA;AAAA;AAAA,cAjCF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA2CD;;AAxG6D,C,CA2GhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import \"antd/dist/antd.css\";\r\nimport React from \"react\";\r\nimport { Layout, Button, Affix } from \"antd\";\r\nimport { ForceGraph3D } from \"react-force-graph\";\r\nimport DeviceDrawer from \"./Components/DrawerDevice\";\r\nimport NetworkDrawer from \"./Components/DrawerNetwork\";\r\nimport * as THREE from \"three\";\r\nimport networkData from \"./Components/Data/network.json\";\r\nimport device_data from \"./Components/Data/device_data.json\";\r\nimport relation_data from \"./Components/Data/relation_data.json\";\r\n\r\nconst groupByDeviceType = device_data.reduce((thisData, dev) => {\r\n  thisData[dev.status] = thisData[dev.status] + 1 || 1;\r\n  return thisData;\r\n}, {});\r\n\r\nfunction FocusGraph() {\r\n  const fgRef = React.useRef;\r\n\r\n  const handleClick = React.useCallback(\r\n    (node) => {\r\n      // Aim at node from outside it\r\n      const distance = 40;\r\n      const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\r\n\r\n      fgRef.current.cameraPosition(\r\n        { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio }, // new position\r\n        node, // lookAt ({ x, y, z })\r\n        3000 // ms transition duration\r\n      );\r\n    },\r\n    [fgRef]\r\n  );\r\n}\r\n\r\n// ForceGraphComponent with React.memo implementation (Prevents unnecessary re-rendering)\r\nconst ForceGraphComponent = React.memo((props) => {\r\n  console.log(\"Child rendered\"); // For verification purposes\r\n  console.log(device_data);\r\n\r\n  // Layout to add margin left to the Networok Topology Graph\r\n  return (\r\n    <Layout style={{ marginLeft: 199 }}>\r\n      <ForceGraph3D\r\n        width={window.innerWidth - 200}\r\n        graphData={{\r\n          nodes: device_data,\r\n          links: relation_data,\r\n        }}\r\n        onNodeRightClick={props.handleRightClick}\r\n        // linkDirectionalParticles={1}\r\n        // linkDirectionalParticleSpeed={0.01}\r\n        onNodeHover={props.handleHover}\r\n        onNodeDragEnd={(node) => {\r\n          node.fx = node.x;\r\n          node.fy = node.y;\r\n          node.fz = node.z;\r\n        }}\r\n        nodeThreeObject={({ type }) => {\r\n          let imgTexture = null;\r\n          if (type === \"DB\") {\r\n            imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\r\n          } else if (type === \"PC\") {\r\n            imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\r\n          } else if (type === \"Router\") {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/img_router.png\"\r\n            );\r\n          }\r\n\r\n          const material = new THREE.SpriteMaterial({ map: imgTexture });\r\n          const sprite = new THREE.Sprite(material);\r\n          sprite.scale.set(12, 12);\r\n\r\n          return sprite;\r\n        }}\r\n      />\r\n    </Layout>\r\n  );\r\n});\r\n\r\nexport default class AppNetworkTopology extends React.Component {\r\n  // Initial state\r\n  state = {\r\n    deviceDrawerStatus: false,\r\n    networkDrawerStatus: false,\r\n    deviceDetailsObject: {},\r\n    networkDetailObject: networkData[0],\r\n    networkStatisticsObject: groupByDeviceType,\r\n    networkDeviceCounter: device_data.length,\r\n  };\r\n\r\n  // shouldComponentUpdate = (nextProps, nextState) => {\r\n  //   console.log(nextProps);\r\n  //   console.log(nextState);\r\n  //   return false;\r\n  // };\r\n\r\n  // On right-click on icon on network topology, the function will pass the object to handleRightClick()\r\n  // This function wil then set the state of \"deviceDrawerStatus\" to \"true\"\r\n  // This function will also set the state of \"networkDrawerStatus\" to false\r\n  handleRightClick = (node) => {\r\n    this.setState({\r\n      deviceDetailsObject: node,\r\n      deviceDrawerStatus: true,\r\n      networkDrawerStatus: false,\r\n    });\r\n  };\r\n\r\n  handleHover = (node) => {\r\n    if (node != null || node !== node) {\r\n      this.setState({\r\n        deviceDetailsObject: node,\r\n      });\r\n    }\r\n  };\r\n\r\n  // This function set the state of \"networkDrawerStatus\" will be \"true\"\r\n  // This function will also set the state of \"deviceDrawerStatus\" to false\r\n  // This function will only be invoked when the \"Show Network Statistics\" button is pressed\r\n  handleNetworkStatistcsButton = () => {\r\n    this.setState({\r\n      networkDrawerStatus: true,\r\n      deviceDrawerStatus: false,\r\n    });\r\n  };\r\n\r\n  // This function sets the state of \"deviceDrawerStatus\" to \"false\"\r\n  // This funtion is passed to the child component \"DeviceDrawer\"\r\n  // When clicking on the \"X\" symbol in \"DeviceDrawer\", this function will run\r\n  closeDeviceDrawer = () => {\r\n    this.setState({ deviceDrawerStatus: false });\r\n  };\r\n\r\n  // This function sets the state of \"networkDrawerStatus\" to \"false\"\r\n  // This funtion is passed to the child component \"NetworkDrawer\"\r\n  // When clicking on the \"X\" symbol in \"NetworkDrawer\", this function will run\r\n  closeNetworkDrawer = () => {\r\n    this.setState({ networkDrawerStatus: false });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div\r\n          id=\"tester\"\r\n          style={{\r\n            position: \"absolute\",\r\n            top: 10,\r\n            left: 210,\r\n            zIndex: 1,\r\n            background: \"white\",\r\n            height: 100,\r\n            width: 100,\r\n          }}\r\n        >\r\n          <p>{this.state.deviceDetailsObject.id}</p>\r\n        </div>\r\n        <Affix style={{ position: \"absolute\", top: 120, left: 10 }}>\r\n          <Button type=\"primary\" onClick={this.handleNetworkStatistcsButton}>\r\n            Show Network Statistics\r\n          </Button>\r\n        </Affix>\r\n\r\n        <NetworkDrawer\r\n          networkDetailObject={this.state.networkDetailObject}\r\n          networkDrawerStatus={this.state.networkDrawerStatus}\r\n          networkStatisticsObject={this.state.networkStatisticsObject}\r\n          networkDeviceCounter={this.state.networkDeviceCounter}\r\n          closeNetworkDrawerFunction={this.closeNetworkDrawer}\r\n        />\r\n        <DeviceDrawer\r\n          deviceDetails={this.state.deviceDetailsObject}\r\n          deviceDrawerStatus={this.state.deviceDrawerStatus}\r\n          closeDeviceDrawerFunction={this.closeDeviceDrawer}\r\n        />\r\n        <ForceGraphComponent\r\n          ref={this.fgRef}\r\n          style={{ zIndex: -1 }}\r\n          handleRightClick={this.handleRightClick}\r\n          handleHover={this.handleHover}\r\n          handleClick={this.FocusGraph}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// handleClick = (node) => {\r\n//   const getHostName = testingData.filter((thisDevice) =>\r\n//     thisDevice.id.includes(node.id)\r\n//   );\r\n//   getHostName.map((deviceDetails) => {\r\n//     // alert(deviceDetails.os);\r\n//     this.setState({ deviceDetailsObject: deviceDetails });\r\n//   });\r\n// };\r\n\r\n// import NetworkDrawer from \"./Components/DrawerNetwork\";\r\n\r\n// function AppNetworkTopology() {\r\n//   const [name] = useState(\"Tarun\");\r\n\r\n//   const handleClick = (node) => {\r\n//     const getHostName = testingData.filter((thisDevice) =>\r\n//       thisDevice.id.includes(node.id)\r\n//     );\r\n//     getHostName.map((deviceDetails) => {\r\n//       alert(deviceDetails.os);\r\n//       return <DeviceDrawer name={name} />;\r\n//     });\r\n//   };\r\n//   return (\r\n//     <div>\r\n//       <DeviceDrawer />\r\n//       <ForceGraph3D\r\n//         graphData={{\r\n//           nodes: [\r\n//             {\r\n//               id: \"192.168.1.100\",\r\n//               name: \"DB-01\",\r\n//               type: \"DB\",\r\n//               value: \"1\",\r\n//               os: \"Linux\",\r\n//               mac_addr: \"aa:aa:aa:aa:aa:aa\",\r\n//             },\r\n//             {\r\n//               id: \"192.168.1.101\",\r\n//               name: \"PC-01\",\r\n//               type: \"PC\",\r\n//               value: \"1\",\r\n//               mac_addr: \"bb:bb:bb:bb:bb:bb\",\r\n//             },\r\n//             {\r\n//               id: \"192.168.1.102\",\r\n//               name: \"PC-02\",\r\n//               type: \"PC\",\r\n//               value: \"1\",\r\n//               mac_addr: \"cc:cc:cc:cc:cc:cc\",\r\n//             },\r\n//           ],\r\n//           links: [\r\n//             {\r\n//               source: \"192.168.1.100\",\r\n//               target: \"192.168.1.101\",\r\n//             },\r\n//             {\r\n//               source: \"192.168.1.101\",\r\n//               target: \"192.168.1.102\",\r\n//             },\r\n//             {\r\n//               source: \"192.168.1.100\",\r\n//               target: \"192.168.1.102\",\r\n//             },\r\n//           ],\r\n//         }}\r\n//         onNodeRightClick={handleClick}\r\n//         linkDirectionalParticles={1}\r\n//         linkDirectionalParticleSpeed={0.01}\r\n//         onNodeDragEnd={(node) => {\r\n//           node.fx = node.x;\r\n//           node.fy = node.y;\r\n//           node.fz = node.z;\r\n//         }}\r\n//         nodeThreeObject={({ type }) => {\r\n//           let imgTexture = null;\r\n//           if (type === \"DB\") {\r\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\r\n//           } else if (type === \"PC\") {\r\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\r\n//           }\r\n\r\n//           const material = new THREE.SpriteMaterial({ map: imgTexture });\r\n//           const sprite = new THREE.Sprite(material);\r\n//           sprite.scale.set(12, 12);\r\n\r\n//           return sprite;\r\n//         }}\r\n//       />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default AppNetworkTopology;\r\n"]},"metadata":{},"sourceType":"module"}