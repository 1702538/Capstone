{"ast":null,"code":"const {\n  faker\n} = require(\"@faker-js/faker\");\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\"); // Function to generate mock alert data for the alert_temp.JSON file\n\n\nfunction GenerateMockDataAlert() {\n  // Using fs, find and read the data from alert_temp.json\n  let rawdata = fs.readFileSync(path.resolve(__dirname, \"alert_temp.json\")); // Store rawdata (as JSON) to alerts_data\n\n  let alerts_data = JSON.parse(rawdata); // Array of threats type\n\n  var threat_category = [\"Category A\", \"Category A\", \"Category A\"]; // Upon running this function, unshift (add to top of array) new threat alert\n\n  alerts_data.unshift({\n    timestamp: faker.time.recent(),\n    source: \"10.0.0.1\",\n    destination: \"192.168.1.1\",\n    protocol: \"TCP\",\n    application: \"Remote/MSRDP/SSL\",\n    threat_category: threat_category[Math.floor(Math.random() * 3)]\n  }); // Once function is done, write the new data (+ existing data) to alert_temp.json\n\n  fs.writeFileSync(path.resolve(__dirname, \"alert_temp.json\"), JSON.stringify(alerts_data, null, 2), \"utf-8\");\n  return {\n    alerts: alerts_data\n  };\n}\n\n_c = GenerateMockDataAlert;\nmodule.exports = GenerateMockDataAlert; //var employees = alerts;\n//   var type = [\"a\", \"b\", \"c\"];\n//   for (var id = 1; id <= 5; id++) {\n//     employees.push({\n//       timestamp: faker.time.recent(),\n//       type: type[Math.floor(Math.random() * 3)],\n//     });\n//   }\n\nvar _c;\n\n$RefreshReg$(_c, \"GenerateMockDataAlert\");","map":{"version":3,"sources":["C:/SourceTree/capstone-project/src/Components/Data/AlertDataGenerator.js"],"names":["faker","require","fs","path","GenerateMockDataAlert","rawdata","readFileSync","resolve","__dirname","alerts_data","JSON","parse","threat_category","unshift","timestamp","time","recent","source","destination","protocol","application","Math","floor","random","writeFileSync","stringify","alerts","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAYC,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB,C,CAEA;;;AACA,SAASG,qBAAT,GAAiC;AAC/B;AACA,MAAIC,OAAO,GAAGH,EAAE,CAACI,YAAH,CAAgBH,IAAI,CAACI,OAAL,CAAaC,SAAb,EAAwB,iBAAxB,CAAhB,CAAd,CAF+B,CAG/B;;AACA,MAAIC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWN,OAAX,CAAlB,CAJ+B,CAM/B;;AACA,MAAIO,eAAe,GAAG,CAAC,YAAD,EAAe,YAAf,EAA6B,YAA7B,CAAtB,CAP+B,CAS/B;;AACAH,EAAAA,WAAW,CAACI,OAAZ,CAAoB;AAClBC,IAAAA,SAAS,EAAEd,KAAK,CAACe,IAAN,CAAWC,MAAX,EADO;AAElBC,IAAAA,MAAM,EAAE,UAFU;AAGlBC,IAAAA,WAAW,EAAE,aAHK;AAIlBC,IAAAA,QAAQ,EAAE,KAJQ;AAKlBC,IAAAA,WAAW,EAAE,kBALK;AAMlBR,IAAAA,eAAe,EAAEA,eAAe,CAACS,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAD;AANd,GAApB,EAV+B,CAmB/B;;AACArB,EAAAA,EAAE,CAACsB,aAAH,CACErB,IAAI,CAACI,OAAL,CAAaC,SAAb,EAAwB,iBAAxB,CADF,EAEEE,IAAI,CAACe,SAAL,CAAehB,WAAf,EAA4B,IAA5B,EAAkC,CAAlC,CAFF,EAGE,OAHF;AAMA,SAAO;AAAEiB,IAAAA,MAAM,EAAEjB;AAAV,GAAP;AACD;;KA3BQL,qB;AA4BTuB,MAAM,CAACC,OAAP,GAAiBxB,qBAAjB,C,CAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["const { faker } = require(\"@faker-js/faker\");\r\nconst fs = require(\"fs\");\r\nconst path = require(\"path\");\r\n\r\n// Function to generate mock alert data for the alert_temp.JSON file\r\nfunction GenerateMockDataAlert() {\r\n  // Using fs, find and read the data from alert_temp.json\r\n  let rawdata = fs.readFileSync(path.resolve(__dirname, \"alert_temp.json\"));\r\n  // Store rawdata (as JSON) to alerts_data\r\n  let alerts_data = JSON.parse(rawdata);\r\n\r\n  // Array of threats type\r\n  var threat_category = [\"Category A\", \"Category A\", \"Category A\"];\r\n\r\n  // Upon running this function, unshift (add to top of array) new threat alert\r\n  alerts_data.unshift({\r\n    timestamp: faker.time.recent(),\r\n    source: \"10.0.0.1\",\r\n    destination: \"192.168.1.1\",\r\n    protocol: \"TCP\",\r\n    application: \"Remote/MSRDP/SSL\",\r\n    threat_category: threat_category[Math.floor(Math.random() * 3)],\r\n  });\r\n\r\n  // Once function is done, write the new data (+ existing data) to alert_temp.json\r\n  fs.writeFileSync(\r\n    path.resolve(__dirname, \"alert_temp.json\"),\r\n    JSON.stringify(alerts_data, null, 2),\r\n    \"utf-8\"\r\n  );\r\n\r\n  return { alerts: alerts_data };\r\n}\r\nmodule.exports = GenerateMockDataAlert;\r\n\r\n//var employees = alerts;\r\n\r\n//   var type = [\"a\", \"b\", \"c\"];\r\n\r\n//   for (var id = 1; id <= 5; id++) {\r\n//     employees.push({\r\n//       timestamp: faker.time.recent(),\r\n//       type: type[Math.floor(Math.random() * 3)],\r\n//     });\r\n//   }\r\n"]},"metadata":{},"sourceType":"module"}