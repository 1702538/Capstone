{"ast":null,"code":"var _jsxFileName = \"C:\\\\SourceTree\\\\capstone-project\\\\src\\\\NetworkTopology.js\";\nimport \"antd/dist/antd.css\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport React from \"react\";\nimport * as THREE from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AppNetworkTopology() {\n  const handleClick = node => {\n    alert(node.id);\n  }; // cross-link node objects\n\n\n  gData.links.forEach(link => {\n    const a = gData.nodes[link.source];\n    const b = gData.nodes[link.target];\n    !a.neighbors && (a.neighbors = []);\n    !b.neighbors && (b.neighbors = []);\n    a.neighbors.push(b);\n    b.neighbors.push(a);\n    !a.links && (a.links = []);\n    !b.links && (b.links = []);\n    a.links.push(link);\n    b.links.push(link);\n  }); // const imgs = [\"hosting.png\"];\n\n  const highlightNodes = new Set();\n  const highlightLinks = new Set();\n  let hoverNode = null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ForceGraph3D, {\n      graphData: {\n        nodes: [{\n          id: \"192.168.1.100\",\n          name: \"DB-01\",\n          type: \"DB\",\n          value: \"10\"\n        }, {\n          id: \"192.168.1.101\",\n          name: \"PC-01\",\n          type: \"PC\",\n          value: \"1\"\n        }, {\n          id: \"192.168.1.102\",\n          name: \"PC-02\",\n          type: \"PC\",\n          value: \"1\"\n        }],\n        links: [{\n          source: \"192.168.1.100\",\n          target: \"192.168.1.101\"\n        }, {\n          source: \"192.168.1.101\",\n          target: \"192.168.1.102\"\n        }, {\n          source: \"192.168.1.100\",\n          target: \"192.168.1.102\"\n        }]\n      },\n      onNodeHover: node => {\n        highlightNodes.clear();\n        highlightLinks.clear();\n\n        if (node) {\n          highlightNodes.add(node);\n          node.neighbors.forEach(neighbor => highlightNodes.add(neighbor));\n          node.links.forEach(link => highlightLinks.add(link));\n        }\n\n        hoverNode = node || null;\n      },\n      onLinkHover: link => {\n        highlightNodes.clear();\n        highlightLinks.clear();\n\n        if (link) {\n          highlightLinks.add(link);\n          highlightNodes.add(link.source);\n          highlightNodes.add(link.target);\n        }\n      },\n      onNodeRightClick: handleClick,\n      linkDirectionalParticles: 1,\n      linkDirectionalParticleSpeed: 0.01,\n      nodeThreeObject: _ref => {\n        let {\n          type\n        } = _ref;\n        let imgTexture = null;\n\n        if (type === \"DB\") {\n          imgTexture = new THREE.TextureLoader().load(`https://cdn-icons.flaticon.com/png/512/1043/premium/1043315.png?token=exp=1639038595~hmac=a9ae8e0051e2519aab494b49369ba6b8`);\n        } else {\n          imgTexture = new THREE.TextureLoader().load(`https://cdn-icons.flaticon.com/png/512/1043/premium/1043315.png?token=exp=1639038595~hmac=a9ae8e0051e2519aab494b49369ba6b8`);\n        }\n\n        const material = new THREE.SpriteMaterial({\n          map: imgTexture\n        });\n        const sprite = new THREE.Sprite(material);\n        sprite.scale.set(12, 12);\n        return sprite;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\n_c = AppNetworkTopology;\n\nfunction genRandomTree() {\n  let N = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 300;\n  let reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return {\n    nodes: [...Array(N).keys()].map(i => ({\n      id: i\n    })),\n    links: [...Array(N).keys()].filter(id => id).map(id => ({\n      [reverse ? \"target\" : \"source\"]: id,\n      [reverse ? \"source\" : \"target\"]: Math.round(Math.random() * (id - 1))\n    }))\n  };\n}\n\nexport default AppNetworkTopology;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppNetworkTopology\");","map":{"version":3,"sources":["C:/SourceTree/capstone-project/src/NetworkTopology.js"],"names":["ForceGraph3D","React","THREE","AppNetworkTopology","handleClick","node","alert","id","gData","links","forEach","link","a","nodes","source","b","target","neighbors","push","highlightNodes","Set","highlightLinks","hoverNode","name","type","value","clear","add","neighbor","imgTexture","TextureLoader","load","material","SpriteMaterial","map","sprite","Sprite","scale","set","genRandomTree","N","reverse","Array","keys","i","filter","Math","round","random"],"mappings":"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","sourcesContent":["import \"antd/dist/antd.css\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport React from \"react\";\nimport * as THREE from \"three\";\n\nfunction AppNetworkTopology() {\n  const handleClick = (node) => {\n    alert(node.id);\n  };\n\n  // cross-link node objects\n  gData.links.forEach((link) => {\n    const a = gData.nodes[link.source];\n    const b = gData.nodes[link.target];\n    !a.neighbors && (a.neighbors = []);\n    !b.neighbors && (b.neighbors = []);\n    a.neighbors.push(b);\n    b.neighbors.push(a);\n\n    !a.links && (a.links = []);\n    !b.links && (b.links = []);\n    a.links.push(link);\n    b.links.push(link);\n  });\n\n  // const imgs = [\"hosting.png\"];\n  const highlightNodes = new Set();\n  const highlightLinks = new Set();\n  let hoverNode = null;\n\n  return (\n    <div>\n      <ForceGraph3D\n        graphData={{\n          nodes: [\n            {\n              id: \"192.168.1.100\",\n              name: \"DB-01\",\n              type: \"DB\",\n              value: \"10\",\n            },\n            {\n              id: \"192.168.1.101\",\n              name: \"PC-01\",\n              type: \"PC\",\n              value: \"1\",\n            },\n            {\n              id: \"192.168.1.102\",\n              name: \"PC-02\",\n              type: \"PC\",\n              value: \"1\",\n            },\n          ],\n          links: [\n            {\n              source: \"192.168.1.100\",\n              target: \"192.168.1.101\",\n            },\n            {\n              source: \"192.168.1.101\",\n              target: \"192.168.1.102\",\n            },\n            {\n              source: \"192.168.1.100\",\n              target: \"192.168.1.102\",\n            },\n          ],\n        }}\n        onNodeHover={(node) => {\n          highlightNodes.clear();\n          highlightLinks.clear();\n          if (node) {\n            highlightNodes.add(node);\n            node.neighbors.forEach((neighbor) => highlightNodes.add(neighbor));\n            node.links.forEach((link) => highlightLinks.add(link));\n          }\n\n          hoverNode = node || null;\n        }}\n        onLinkHover={(link) => {\n          highlightNodes.clear();\n          highlightLinks.clear();\n\n          if (link) {\n            highlightLinks.add(link);\n            highlightNodes.add(link.source);\n            highlightNodes.add(link.target);\n          }\n        }}\n        onNodeRightClick={handleClick}\n        linkDirectionalParticles={1}\n        linkDirectionalParticleSpeed={0.01}\n        nodeThreeObject={({ type }) => {\n          let imgTexture = null;\n          if (type === \"DB\") {\n            imgTexture = new THREE.TextureLoader().load(\n              `https://cdn-icons.flaticon.com/png/512/1043/premium/1043315.png?token=exp=1639038595~hmac=a9ae8e0051e2519aab494b49369ba6b8`\n            );\n          } else {\n            imgTexture = new THREE.TextureLoader().load(\n              `https://cdn-icons.flaticon.com/png/512/1043/premium/1043315.png?token=exp=1639038595~hmac=a9ae8e0051e2519aab494b49369ba6b8`\n            );\n          }\n\n          const material = new THREE.SpriteMaterial({ map: imgTexture });\n          const sprite = new THREE.Sprite(material);\n          sprite.scale.set(12, 12);\n\n          return sprite;\n        }}\n      />\n    </div>\n  );\n}\n\nfunction genRandomTree(N = 300, reverse = false) {\n  return {\n    nodes: [...Array(N).keys()].map((i) => ({ id: i })),\n    links: [...Array(N).keys()]\n      .filter((id) => id)\n      .map((id) => ({\n        [reverse ? \"target\" : \"source\"]: id,\n        [reverse ? \"source\" : \"target\"]: Math.round(Math.random() * (id - 1)),\n      })),\n  };\n}\n\nexport default AppNetworkTopology;\n"]},"metadata":{},"sourceType":"module"}