{"ast":null,"code":"var _jsxFileName = \"C:\\\\SourceTree\\\\capstone-project\\\\src\\\\NetworkTopology.js\",\n    _s = $RefreshSig$();\n\nimport \"antd/dist/antd.css\";\nimport { Layout, Button, Affix } from \"antd\";\nimport React, { useState, useRef, useCallback, useEffect } from \"react\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport * as THREE from \"three\";\nimport networkData from \"./Components/Data/network.json\";\nimport device_data from \"./Components/Data/device_data.json\";\nimport relation_data from \"./Components/Data/relation_data.json\";\nimport DeviceDrawer from \"./Components/DrawerDevice\";\nimport NetworkDrawer from \"./Components/DrawerNetwork\"; // Functional Component for Network Topology Graph Page UI\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AppNetworkTopology() {\n  _s();\n\n  // UseState() functions for maintaining the states\n  const [deviceDrawerStatus, setDeviceDrawerStatus] = useState(false); // To open / close the Device Drawer component\n\n  const [networkDrawerStatus, setNetworkDrawerStatus] = useState(false); // To open / close the Network Drawer component\n\n  const [networkDetails, setNetworkDetails] = useState({}); // To store / set the network details for rendering\n\n  const [groupByDevice, setGroupByDevice] = useState(); // To store the number of devices by device type (for statistical boxes)\n\n  const [deviceCounter, setDeviceCounter] = useState(); // To store the total number devices (for statistical boxes)\n\n  const [hoverNode, setHoverNode] = useState(); // To store the details of the selected network node (Network Topology Graph)\n\n  const [deviceConnected, setDeviceConnected] = useState({}); // To store the adjacent devices (after user click on the network node)\n\n  const [alertData, setAlertData] = useState([]); // To store the information\n  // Run functions onload (similar to componentDidMount)\n\n  useEffect(() => {\n    setGroupByDevice(groupByDeviceType()); // Counts the number of devices (sort by statuses). Stores output into groupByDevice (via setGroupByDevice)\n\n    setDeviceCounter(device_data.length); // Store the number of devices (determined by length of device_data) into deviceCounter (via setDeviceCounter)\n\n    setNetworkDetails(networkData[0]); // Store the network details (determined by networkData[0]) into networkDetails (via setNetworkDetails)\n\n    getData(); // Retrieves alerts data from JSON Server and stores output into alertData (via setAlertData())\n  }, []); // getData() function that utilises the fetch API to retrieve data from the JSON Server\n  // After data is retrieved, data is stored in alertData (via setAlertData)\n\n  const getData = async () => {\n    await fetch(\"http://localhost:3001/alerts\").then(response => response.json()).then(data => setAlertData(data)).catch(err => console.log(err));\n  }; // Function to set the Device Drawer's \"visible\" state to \"true\"\n\n\n  const openDeviceDrawer = () => {\n    setDeviceDrawerStatus(true);\n  }; // Function to set the Device Drawer's \"visible\" state to \"false\"\n\n\n  const closeDeviceDrawer = () => {\n    setDeviceDrawerStatus(false);\n  }; // Function to set the Network Drawer's \"visible\" state to \"true\"\n\n\n  const openNetworkDrawer = () => {\n    setNetworkDrawerStatus(true);\n  }; // Function to set the Network Drawer's \"visible\" state to \"false\"\n\n\n  const closeNetworkDrawer = () => {\n    setNetworkDrawerStatus(false);\n  }; // Function to open the Network Drawer Component and closes the Device Drawer Component\n  // closeDeviceDrawer() - Closes the Device Drawer component\n  // openNetworkDrawer() - Opens the Network Drawer Component\n\n\n  const handleNetworkStatisticsButton = () => {\n    closeDeviceDrawer();\n    openNetworkDrawer();\n  }; // Function to sort the devices by statuses\n  // Returns array containing the number of devices by statuses\n\n\n  const groupByDeviceType = () => {\n    let result = {};\n\n    for (let i = 0; i < device_data.length; i++) {\n      if (!result[device_data[i][\"status\"]]) {\n        result[device_data[i][\"status\"]] = 0;\n      }\n\n      result[device_data[i][\"status\"]]++;\n    }\n\n    return result;\n  }; // Function that counts the number of adjacent devices connected to the selected network node\n\n\n  const connectedDeviceCounter = hoverNode => {\n    let connectedDeviceArray = [];\n\n    for (let d = 0; d < relation_data.length; d++) {\n      if (relation_data[d].source.id === hoverNode.id) {\n        connectedDeviceArray.push(relation_data[d].target.id);\n      } // else if (relation_data[d].target.id === hoverNode.id) {\n      //   connectedDeviceArray.push(relation_data[d].source.id);\n      // }\n\n    }\n\n    return connectedDeviceArray;\n  }; // graphUseRef hook to allow data persistence\n\n\n  const graphUseRef = useRef(); // Function to zoom towards the selected network node and opens Device Drawer Component\n  // setHoverNode() - Store the selected node's details into the hoverNode (via setHoverNode())\n  // openDeviceDrawer() - Opens the Device Drawer Component\n  // closeNetworkDrawer() - Closes the Network Drawer Component\n\n  const zoomInNode = useCallback(node => {\n    setHoverNode(node);\n    openDeviceDrawer();\n    closeNetworkDrawer();\n    setDeviceConnected(connectedDeviceCounter(node)); // Camera distance of node\n\n    const distance = 150;\n    const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n    graphUseRef.current.cameraPosition({\n      x: node.x * distRatio,\n      y: node.y * distRatio,\n      z: node.z * distRatio\n    }, // new position\n    node, // lookAt ({ x, y, z })\n    1500 // ms transition duration\n    );\n  }, [graphUseRef]); // Function that returns the \"selected\" PC icon based on status\n\n  function selectedNodePC(hoverNode) {\n    var _iconList$hoverNode$s;\n\n    const iconList = {\n      Active: \"assets/online_pc_selected.png\",\n      Inactive: \"assets/inactive_pc_selected.png\",\n      Offline: \"assets/offline_pc_selected.png\"\n    };\n    return (_iconList$hoverNode$s = iconList[hoverNode.status]) !== null && _iconList$hoverNode$s !== void 0 ? _iconList$hoverNode$s : \"NA\";\n  } // Function that returns the \"selected\" DB icon based on status\n\n\n  function selectedNodeDB(hoverNode) {\n    var _iconList$hoverNode$s2;\n\n    const iconList = {\n      Active: \"assets/online_db_selected.png\",\n      Inactive: \"assets/inactive_db_selected.png\",\n      Offline: \"assets/offline_db_selected.png\"\n    };\n    return (_iconList$hoverNode$s2 = iconList[hoverNode.status]) !== null && _iconList$hoverNode$s2 !== void 0 ? _iconList$hoverNode$s2 : \"NA\";\n  } // Function that returns the \"selected\" router icon based on status\n\n\n  function selectedNodeRouter(hoverNode) {\n    var _iconList$hoverNode$s3;\n\n    const iconList = {\n      Active: \"assets/online_router_selected.png\",\n      Inactive: \"assets/inactive_router_selected.png\",\n      Offline: \"assets/offline_router_selected.png\"\n    };\n    return (_iconList$hoverNode$s3 = iconList[hoverNode.status]) !== null && _iconList$hoverNode$s3 !== void 0 ? _iconList$hoverNode$s3 : \"NA\";\n  } // For updating of \"selected\" icons only\n  // Function that runs the respective function (based on device type)\n  // Returns icon URL based on device and status\n\n\n  function selectedNodeDeviceType(hoverNode) {\n    const deviceList = {\n      DB: selectedNodeDB(hoverNode),\n      PC: selectedNodePC(hoverNode),\n      Router: selectedNodeRouter(hoverNode)\n    };\n    return deviceList[hoverNode.type];\n  } // Function that returns the DB icon based on status\n\n\n  function nodeDB(hoverNode) {\n    var _iconList$hoverNode$s4;\n\n    const iconList = {\n      Active: \"assets/online_db.png\",\n      Inactive: \"assets/inactive_db.png\",\n      Offline: \"assets/offline_db.png\"\n    };\n    return (_iconList$hoverNode$s4 = iconList[hoverNode.status]) !== null && _iconList$hoverNode$s4 !== void 0 ? _iconList$hoverNode$s4 : \"NA\";\n  } // Function that returns the PC icon based on status\n\n\n  function nodePC(hoverNode) {\n    var _iconList$hoverNode$s5;\n\n    const iconList = {\n      Active: \"assets/online_pc.png\",\n      Inactive: \"assets/inactive_pc.png\",\n      Offline: \"assets/offline_pc.png\"\n    };\n    return (_iconList$hoverNode$s5 = iconList[hoverNode.status]) !== null && _iconList$hoverNode$s5 !== void 0 ? _iconList$hoverNode$s5 : \"NA\";\n  } // Function that returns the router icon based on status\n\n\n  function nodeRouter(hoverNode) {\n    var _iconList$hoverNode$s6;\n\n    const iconList = {\n      Active: \"assets/online_router.png\",\n      Inactive: \"assets/inactive_router.png\",\n      Offline: \"assets/offline_router.png\"\n    };\n    return (_iconList$hoverNode$s6 = iconList[hoverNode.status]) !== null && _iconList$hoverNode$s6 !== void 0 ? _iconList$hoverNode$s6 : \"NA\";\n  } // For updating of \"non-selected\" icons only\n  // Function that runs the respective function (based on device type)\n  // Returns icon URL based on device and status\n\n\n  function nodeDeviceType(hoverNode) {\n    const deviceList = {\n      DB: nodeDB(hoverNode),\n      PC: nodePC(hoverNode),\n      Router: nodeRouter(hoverNode)\n    };\n    return deviceList[hoverNode.type];\n  } // Function that updates all the icons in the Network Topology Graph Component\n\n\n  const updateNodeIcons = useCallback(node => {\n    let imgTexture = null; // Resets the imgTexture (image used for icon design)\n    // Update \"selected\" network node icon\n\n    if (node === hoverNode) imgTexture = new THREE.TextureLoader().load(selectedNodeDeviceType(node)); // Update other network node icon (not \"selected\")\n    else imgTexture = new THREE.TextureLoader().load(nodeDeviceType(node)); // Rendering of the sprite via THREE\n\n    const material = new THREE.SpriteMaterial({\n      map: imgTexture\n    });\n    const sprite = new THREE.Sprite(material);\n    sprite.scale.set(12, 12);\n    return sprite;\n  }, [hoverNode]);\n\n  function selectedFromPopover(ipAddr) {\n    alert(ipAddr.id); //var getNode = device_data.find((el) => el.id === ipAddr);\n    //zoomInNode(getNode);\n  } // <Layout style={{ marginLeft: 199, zIndex: -1 }}>\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Layout, {\n      children: /*#__PURE__*/_jsxDEV(ForceGraph3D, {\n        width: window.innerWidth,\n        height: window.innerHeight - 1,\n        ref: graphUseRef,\n        graphData: {\n          nodes: device_data,\n          links: relation_data\n        },\n        nodeLabel: node => `<div style=\"background: #1F1E26; padding: 5px 10px 8px 10px; border-radius: 10px; user-select: none\">\n            <span>Name: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>${node.name}</b></span><br/>\n            <span>IP Addr: &nbsp;&nbsp;&nbsp;&nbsp;<b>${node.id}</b></span><br/>\n            <span>Mac Addr: &nbsp;<b>${node.mac_addr}</b></span>\n            </div>`,\n        linkWidth: 1,\n        onNodeRightClick: zoomInNode // onNodeHover={handleNodeHover}\n        // linkDirectionalParticles={1}\n        // linkDirectionalParticleSpeed={0.01}\n        // onNodeHover={handleHover}\n        // onNodeDragEnd={(node) => {\n        //   node.fx = node.x;\n        //   node.fy = node.y;\n        //   node.fz = node.z;\n        // }}\n        ,\n        nodeThreeObject: updateNodeIcons\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Affix, {\n      style: {\n        position: \"absolute\",\n        top: 120,\n        left: 10,\n        zIndex: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: handleNetworkStatisticsButton,\n        children: \"Show Network Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        children: \"Show Network Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DeviceDrawer, {\n      deviceDrawerStatus: deviceDrawerStatus,\n      deviceDetails: hoverNode,\n      closeDeviceDrawer: closeDeviceDrawer,\n      alertData: alertData,\n      deviceConnected: deviceConnected,\n      selectedFromPopover: selectedFromPopover\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NetworkDrawer, {\n      networkDrawerStatus: networkDrawerStatus,\n      networkDetails: networkDetails,\n      groupByDevice: groupByDevice,\n      deviceCounter: deviceCounter,\n      closeNetworkDrawer: closeNetworkDrawer,\n      alertData: alertData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 255,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AppNetworkTopology, \"p7xKWseBnwYdBg/pxCNhyILbJzU=\");\n\n_c = AppNetworkTopology;\nexport default AppNetworkTopology;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppNetworkTopology\");","map":{"version":3,"sources":["C:/SourceTree/capstone-project/src/NetworkTopology.js"],"names":["Layout","Button","Affix","React","useState","useRef","useCallback","useEffect","ForceGraph3D","THREE","networkData","device_data","relation_data","DeviceDrawer","NetworkDrawer","AppNetworkTopology","deviceDrawerStatus","setDeviceDrawerStatus","networkDrawerStatus","setNetworkDrawerStatus","networkDetails","setNetworkDetails","groupByDevice","setGroupByDevice","deviceCounter","setDeviceCounter","hoverNode","setHoverNode","deviceConnected","setDeviceConnected","alertData","setAlertData","groupByDeviceType","length","getData","fetch","then","response","json","data","catch","err","console","log","openDeviceDrawer","closeDeviceDrawer","openNetworkDrawer","closeNetworkDrawer","handleNetworkStatisticsButton","result","i","connectedDeviceCounter","connectedDeviceArray","d","source","id","push","target","graphUseRef","zoomInNode","node","distance","distRatio","Math","hypot","x","y","z","current","cameraPosition","selectedNodePC","iconList","Active","Inactive","Offline","status","selectedNodeDB","selectedNodeRouter","selectedNodeDeviceType","deviceList","DB","PC","Router","type","nodeDB","nodePC","nodeRouter","nodeDeviceType","updateNodeIcons","imgTexture","TextureLoader","load","material","SpriteMaterial","map","sprite","Sprite","scale","set","selectedFromPopover","ipAddr","alert","window","innerWidth","innerHeight","nodes","links","name","mac_addr","position","top","left","zIndex"],"mappings":"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","sourcesContent":["import \"antd/dist/antd.css\";\r\nimport { Layout, Button, Affix } from \"antd\";\r\n\r\nimport React, { useState, useRef, useCallback, useEffect } from \"react\";\r\n\r\nimport { ForceGraph3D } from \"react-force-graph\";\r\nimport * as THREE from \"three\";\r\n\r\nimport networkData from \"./Components/Data/network.json\";\r\nimport device_data from \"./Components/Data/device_data.json\";\r\nimport relation_data from \"./Components/Data/relation_data.json\";\r\n\r\nimport DeviceDrawer from \"./Components/DrawerDevice\";\r\nimport NetworkDrawer from \"./Components/DrawerNetwork\";\r\n\r\n// Functional Component for Network Topology Graph Page UI\r\nfunction AppNetworkTopology() {\r\n  // UseState() functions for maintaining the states\r\n  const [deviceDrawerStatus, setDeviceDrawerStatus] = useState(false); // To open / close the Device Drawer component\r\n  const [networkDrawerStatus, setNetworkDrawerStatus] = useState(false); // To open / close the Network Drawer component\r\n  const [networkDetails, setNetworkDetails] = useState({}); // To store / set the network details for rendering\r\n  const [groupByDevice, setGroupByDevice] = useState(); // To store the number of devices by device type (for statistical boxes)\r\n  const [deviceCounter, setDeviceCounter] = useState(); // To store the total number devices (for statistical boxes)\r\n  const [hoverNode, setHoverNode] = useState(); // To store the details of the selected network node (Network Topology Graph)\r\n  const [deviceConnected, setDeviceConnected] = useState({}); // To store the adjacent devices (after user click on the network node)\r\n  const [alertData, setAlertData] = useState([]); // To store the information\r\n\r\n  // Run functions onload (similar to componentDidMount)\r\n  useEffect(() => {\r\n    setGroupByDevice(groupByDeviceType()); // Counts the number of devices (sort by statuses). Stores output into groupByDevice (via setGroupByDevice)\r\n    setDeviceCounter(device_data.length); // Store the number of devices (determined by length of device_data) into deviceCounter (via setDeviceCounter)\r\n    setNetworkDetails(networkData[0]); // Store the network details (determined by networkData[0]) into networkDetails (via setNetworkDetails)\r\n    getData(); // Retrieves alerts data from JSON Server and stores output into alertData (via setAlertData())\r\n  }, []);\r\n\r\n  // getData() function that utilises the fetch API to retrieve data from the JSON Server\r\n  // After data is retrieved, data is stored in alertData (via setAlertData)\r\n  const getData = async () => {\r\n    await fetch(\"http://localhost:3001/alerts\")\r\n      .then((response) => response.json())\r\n      .then((data) => setAlertData(data))\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  // Function to set the Device Drawer's \"visible\" state to \"true\"\r\n  const openDeviceDrawer = () => {\r\n    setDeviceDrawerStatus(true);\r\n  };\r\n\r\n  // Function to set the Device Drawer's \"visible\" state to \"false\"\r\n  const closeDeviceDrawer = () => {\r\n    setDeviceDrawerStatus(false);\r\n  };\r\n\r\n  // Function to set the Network Drawer's \"visible\" state to \"true\"\r\n  const openNetworkDrawer = () => {\r\n    setNetworkDrawerStatus(true);\r\n  };\r\n\r\n  // Function to set the Network Drawer's \"visible\" state to \"false\"\r\n  const closeNetworkDrawer = () => {\r\n    setNetworkDrawerStatus(false);\r\n  };\r\n\r\n  // Function to open the Network Drawer Component and closes the Device Drawer Component\r\n  // closeDeviceDrawer() - Closes the Device Drawer component\r\n  // openNetworkDrawer() - Opens the Network Drawer Component\r\n  const handleNetworkStatisticsButton = () => {\r\n    closeDeviceDrawer();\r\n    openNetworkDrawer();\r\n  };\r\n\r\n  // Function to sort the devices by statuses\r\n  // Returns array containing the number of devices by statuses\r\n  const groupByDeviceType = () => {\r\n    let result = {};\r\n    for (let i = 0; i < device_data.length; i++) {\r\n      if (!result[device_data[i][\"status\"]]) {\r\n        result[device_data[i][\"status\"]] = 0;\r\n      }\r\n      result[device_data[i][\"status\"]]++;\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // Function that counts the number of adjacent devices connected to the selected network node\r\n  const connectedDeviceCounter = (hoverNode) => {\r\n    let connectedDeviceArray = [];\r\n\r\n    for (let d = 0; d < relation_data.length; d++) {\r\n      if (relation_data[d].source.id === hoverNode.id) {\r\n        connectedDeviceArray.push(relation_data[d].target.id);\r\n      }\r\n      // else if (relation_data[d].target.id === hoverNode.id) {\r\n      //   connectedDeviceArray.push(relation_data[d].source.id);\r\n      // }\r\n    }\r\n    return connectedDeviceArray;\r\n  };\r\n\r\n  // graphUseRef hook to allow data persistence\r\n  const graphUseRef = useRef();\r\n\r\n  // Function to zoom towards the selected network node and opens Device Drawer Component\r\n  // setHoverNode() - Store the selected node's details into the hoverNode (via setHoverNode())\r\n  // openDeviceDrawer() - Opens the Device Drawer Component\r\n  // closeNetworkDrawer() - Closes the Network Drawer Component\r\n  const zoomInNode = useCallback(\r\n    (node) => {\r\n      setHoverNode(node);\r\n      openDeviceDrawer();\r\n      closeNetworkDrawer();\r\n      setDeviceConnected(connectedDeviceCounter(node));\r\n\r\n      // Camera distance of node\r\n      const distance = 150;\r\n      const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\r\n\r\n      graphUseRef.current.cameraPosition(\r\n        {\r\n          x: node.x * distRatio,\r\n          y: node.y * distRatio,\r\n          z: node.z * distRatio,\r\n        }, // new position\r\n        node, // lookAt ({ x, y, z })\r\n        1500 // ms transition duration\r\n      );\r\n    },\r\n    [graphUseRef]\r\n  );\r\n\r\n  // Function that returns the \"selected\" PC icon based on status\r\n  function selectedNodePC(hoverNode) {\r\n    const iconList = {\r\n      Active: \"assets/online_pc_selected.png\",\r\n      Inactive: \"assets/inactive_pc_selected.png\",\r\n      Offline: \"assets/offline_pc_selected.png\",\r\n    };\r\n\r\n    return iconList[hoverNode.status] ?? \"NA\";\r\n  }\r\n\r\n  // Function that returns the \"selected\" DB icon based on status\r\n  function selectedNodeDB(hoverNode) {\r\n    const iconList = {\r\n      Active: \"assets/online_db_selected.png\",\r\n      Inactive: \"assets/inactive_db_selected.png\",\r\n      Offline: \"assets/offline_db_selected.png\",\r\n    };\r\n\r\n    return iconList[hoverNode.status] ?? \"NA\";\r\n  }\r\n\r\n  // Function that returns the \"selected\" router icon based on status\r\n  function selectedNodeRouter(hoverNode) {\r\n    const iconList = {\r\n      Active: \"assets/online_router_selected.png\",\r\n      Inactive: \"assets/inactive_router_selected.png\",\r\n      Offline: \"assets/offline_router_selected.png\",\r\n    };\r\n\r\n    return iconList[hoverNode.status] ?? \"NA\";\r\n  }\r\n\r\n  // For updating of \"selected\" icons only\r\n  // Function that runs the respective function (based on device type)\r\n  // Returns icon URL based on device and status\r\n  function selectedNodeDeviceType(hoverNode) {\r\n    const deviceList = {\r\n      DB: selectedNodeDB(hoverNode),\r\n      PC: selectedNodePC(hoverNode),\r\n      Router: selectedNodeRouter(hoverNode),\r\n    };\r\n\r\n    return deviceList[hoverNode.type];\r\n  }\r\n\r\n  // Function that returns the DB icon based on status\r\n  function nodeDB(hoverNode) {\r\n    const iconList = {\r\n      Active: \"assets/online_db.png\",\r\n      Inactive: \"assets/inactive_db.png\",\r\n      Offline: \"assets/offline_db.png\",\r\n    };\r\n\r\n    return iconList[hoverNode.status] ?? \"NA\";\r\n  }\r\n\r\n  // Function that returns the PC icon based on status\r\n  function nodePC(hoverNode) {\r\n    const iconList = {\r\n      Active: \"assets/online_pc.png\",\r\n      Inactive: \"assets/inactive_pc.png\",\r\n      Offline: \"assets/offline_pc.png\",\r\n    };\r\n\r\n    return iconList[hoverNode.status] ?? \"NA\";\r\n  }\r\n\r\n  // Function that returns the router icon based on status\r\n  function nodeRouter(hoverNode) {\r\n    const iconList = {\r\n      Active: \"assets/online_router.png\",\r\n      Inactive: \"assets/inactive_router.png\",\r\n      Offline: \"assets/offline_router.png\",\r\n    };\r\n\r\n    return iconList[hoverNode.status] ?? \"NA\";\r\n  }\r\n\r\n  // For updating of \"non-selected\" icons only\r\n  // Function that runs the respective function (based on device type)\r\n  // Returns icon URL based on device and status\r\n  function nodeDeviceType(hoverNode) {\r\n    const deviceList = {\r\n      DB: nodeDB(hoverNode),\r\n      PC: nodePC(hoverNode),\r\n      Router: nodeRouter(hoverNode),\r\n    };\r\n\r\n    return deviceList[hoverNode.type];\r\n  }\r\n\r\n  // Function that updates all the icons in the Network Topology Graph Component\r\n  const updateNodeIcons = useCallback(\r\n    (node) => {\r\n      let imgTexture = null; // Resets the imgTexture (image used for icon design)\r\n\r\n      // Update \"selected\" network node icon\r\n      if (node === hoverNode)\r\n        imgTexture = new THREE.TextureLoader().load(\r\n          selectedNodeDeviceType(node)\r\n        );\r\n      // Update other network node icon (not \"selected\")\r\n      else imgTexture = new THREE.TextureLoader().load(nodeDeviceType(node));\r\n\r\n      // Rendering of the sprite via THREE\r\n      const material = new THREE.SpriteMaterial({ map: imgTexture });\r\n      const sprite = new THREE.Sprite(material);\r\n      sprite.scale.set(12, 12);\r\n      return sprite;\r\n    },\r\n    [hoverNode]\r\n  );\r\n\r\n  function selectedFromPopover(ipAddr) {\r\n    alert(ipAddr.id);\r\n    //var getNode = device_data.find((el) => el.id === ipAddr);\r\n    //zoomInNode(getNode);\r\n  }\r\n\r\n  // <Layout style={{ marginLeft: 199, zIndex: -1 }}>\r\n\r\n  return (\r\n    <div>\r\n      <Layout>\r\n        <ForceGraph3D\r\n          width={window.innerWidth}\r\n          height={window.innerHeight - 1}\r\n          ref={graphUseRef}\r\n          graphData={{\r\n            nodes: device_data,\r\n            links: relation_data,\r\n          }}\r\n          nodeLabel={(node) =>\r\n            `<div style=\"background: #1F1E26; padding: 5px 10px 8px 10px; border-radius: 10px; user-select: none\">\r\n            <span>Name: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>${node.name}</b></span><br/>\r\n            <span>IP Addr: &nbsp;&nbsp;&nbsp;&nbsp;<b>${node.id}</b></span><br/>\r\n            <span>Mac Addr: &nbsp;<b>${node.mac_addr}</b></span>\r\n            </div>`\r\n          }\r\n          linkWidth={1}\r\n          onNodeRightClick={zoomInNode}\r\n          // onNodeHover={handleNodeHover}\r\n          // linkDirectionalParticles={1}\r\n          // linkDirectionalParticleSpeed={0.01}\r\n          // onNodeHover={handleHover}\r\n          // onNodeDragEnd={(node) => {\r\n          //   node.fx = node.x;\r\n          //   node.fy = node.y;\r\n          //   node.fz = node.z;\r\n          // }}\r\n          nodeThreeObject={updateNodeIcons}\r\n        />\r\n      </Layout>\r\n      <Affix style={{ position: \"absolute\", top: 120, left: 10, zIndex: 1 }}>\r\n        <Button type=\"primary\" onClick={handleNetworkStatisticsButton}>\r\n          Show Network Statistics\r\n        </Button>\r\n        <br />\r\n        <Button type=\"primary\">Show Network Statistics</Button>\r\n      </Affix>\r\n\r\n      <DeviceDrawer\r\n        deviceDrawerStatus={deviceDrawerStatus}\r\n        deviceDetails={hoverNode}\r\n        closeDeviceDrawer={closeDeviceDrawer}\r\n        alertData={alertData}\r\n        deviceConnected={deviceConnected}\r\n        selectedFromPopover={selectedFromPopover}\r\n      />\r\n      <NetworkDrawer\r\n        networkDrawerStatus={networkDrawerStatus}\r\n        networkDetails={networkDetails}\r\n        groupByDevice={groupByDevice}\r\n        deviceCounter={deviceCounter}\r\n        closeNetworkDrawer={closeNetworkDrawer}\r\n        alertData={alertData}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppNetworkTopology;\r\n"]},"metadata":{},"sourceType":"module"}