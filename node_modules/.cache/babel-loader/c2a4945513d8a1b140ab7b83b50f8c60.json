{"ast":null,"code":"var _jsxFileName = \"C:\\\\SourceTree\\\\capstone-project\\\\src\\\\NetworkTopology.js\",\n    _s3 = $RefreshSig$();\n\nimport \"antd/dist/antd.css\";\nimport React, { useState, useRef, useCallback } from \"react\";\nimport { Layout, Button, Affix } from \"antd\";\nimport { ForceGraph3D } from \"react-force-graph\";\nimport DeviceDrawer from \"./Components/DrawerDevice\";\nimport NetworkDrawer from \"./Components/DrawerNetwork\";\nimport * as THREE from \"three\";\nimport networkData from \"./Components/Data/network.json\";\nimport device_data from \"./Components/Data/device_data.json\";\nimport relation_data from \"./Components/Data/relation_data.json\"; // const groupByDeviceType = device_data.reduce((thisData, dev) => {\n//   thisData[dev.status] = thisData[dev.status] + 1 || 1;\n//   return thisData;\n// }, {});\n// function FocusGraph() {\n//   const fgRef = React.useRef;\n//   const handleClick = React.useCallback(\n//     (node) => {\n//       const distance = 40;\n//       const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n//       fgRef.current.cameraPosition(\n//         { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio }, // new position\n//         node, // lookAt ({ x, y, z })\n//         3000 // camera transition duration (in ms)\n//       );\n//     },\n//     [fgRef]\n//   );\n// }\n// // ForceGraphComponent with React.memo implementation (Prevents unnecessary re-rendering)\n// const ForceGraphComponent = React.memo((props) => {\n//   console.log(\"Child rendered\"); // For verification purposes\n//   console.log(device_data);\n//   // Layout to add margin left to the Networok Topology Graph\n//   return (\n//     <Layout style={{ marginLeft: 199 }}>\n//       <ForceGraph3D\n//         width={window.innerWidth - 200}\n//         graphData={{\n//           nodes: device_data,\n//           links: relation_data,\n//         }}\n//         onNodeRightClick={props.handleRightClick}\n//         // linkDirectionalParticles={1}\n//         // linkDirectionalParticleSpeed={0.01}\n//         onNodeHover={props.handleHover}\n//         onNodeDragEnd={(node) => {\n//           node.fx = node.x;\n//           node.fy = node.y;\n//           node.fz = node.z;\n//         }}\n//         nodeThreeObject={({ type }) => {\n//           let imgTexture = null;\n//           if (type === \"DB\") {\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\n//           } else if (type === \"PC\") {\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\n//           } else if (type === \"Router\") {\n//             imgTexture = new THREE.TextureLoader().load(\n//               \"assets/img_router.png\"\n//             );\n//           }\n//           const material = new THREE.SpriteMaterial({ map: imgTexture });\n//           const sprite = new THREE.Sprite(material);\n//           sprite.scale.set(12, 12);\n//           return sprite;\n//         }}\n//       />\n//     </Layout>\n//   );\n// });\n// export default class AppNetworkTopology extends React.Component {\n//   // Initial state\n//   state = {\n//     deviceDrawerStatus: false,\n//     networkDrawerStatus: false,\n//     deviceDetailsObject: {},\n//     networkDetailObject: networkData[0],\n//     networkStatisticsObject: groupByDeviceType,\n//     networkDeviceCounter: device_data.length,\n//   };\n//   // shouldComponentUpdate = (nextProps, nextState) => {\n//   //   console.log(nextProps);\n//   //   console.log(nextState);\n//   //   return false;\n//   // };\n//   // On right-click on icon on network topology, the function will pass the object to handleRightClick()\n//   // This function wil then set the state of \"deviceDrawerStatus\" to \"true\"\n//   // This function will also set the state of \"networkDrawerStatus\" to false\n//   handleRightClick = (node) => {\n//     this.setState({\n//       deviceDetailsObject: node,\n//       deviceDrawerStatus: true,\n//       networkDrawerStatus: false,\n//     });\n//   };\n//   handleHover = (node) => {\n//     // console.log(this.state.deviceDetailsObject);\n//     if (node != null && node != this.state.deviceDetailsObject) {\n//       this.setState({\n//         deviceDetailsObject: node,\n//       });\n//     }\n//   };\n//   // This function set the state of \"networkDrawerStatus\" will be \"true\"\n//   // This function will also set the state of \"deviceDrawerStatus\" to false\n//   // This function will only be invoked when the \"Show Network Statistics\" button is pressed\n//   handleNetworkStatistcsButton = () => {\n//     this.setState({\n//       networkDrawerStatus: true,\n//       deviceDrawerStatus: false,\n//     });\n//   };\n//   // This function sets the state of \"deviceDrawerStatus\" to \"false\"\n//   // This funtion is passed to the child component \"DeviceDrawer\"\n//   // When clicking on the \"X\" symbol in \"DeviceDrawer\", this function will run\n//   closeDeviceDrawer = () => {\n//     this.setState({ deviceDrawerStatus: false });\n//   };\n//   // This function sets the state of \"networkDrawerStatus\" to \"false\"\n//   // This funtion is passed to the child component \"NetworkDrawer\"\n//   // When clicking on the \"X\" symbol in \"NetworkDrawer\", this function will run\n//   closeNetworkDrawer = () => {\n//     this.setState({ networkDrawerStatus: false });\n//   };\n//   render() {\n//     return (\n//       <div>\n//         <div\n//           id=\"tester\"\n//           style={{\n//             padding: 10,\n//             position: \"absolute\",\n//             top: 10,\n//             left: 210,\n//             zIndex: 1,\n//             background: \"white\",\n//             height: 200,\n//             width: 200,\n//           }}\n//         >\n//           <p>IP: {this.state.deviceDetailsObject.id}</p>\n//           <p>Name: {this.state.deviceDetailsObject.name}</p>\n//           <p>Type: {this.state.deviceDetailsObject.type}</p>\n//           <p>OS: {this.state.deviceDetailsObject.os}</p>\n//           <p>Mac: {this.state.deviceDetailsObject.mac_addr}</p>\n//         </div>\n//         <Affix style={{ position: \"absolute\", top: 120, left: 10 }}>\n//           <Button type=\"primary\" onClick={this.handleNetworkStatistcsButton}>\n//             Show Network Statistics\n//           </Button>\n//         </Affix>\n//         <NetworkDrawer\n//           networkDetailObject={this.state.networkDetailObject}\n//           networkDrawerStatus={this.state.networkDrawerStatus}\n//           networkStatisticsObject={this.state.networkStatisticsObject}\n//           networkDeviceCounter={this.state.networkDeviceCounter}\n//           closeNetworkDrawerFunction={this.closeNetworkDrawer}\n//         />\n//         <DeviceDrawer\n//           deviceDetails={this.state.deviceDetailsObject}\n//           deviceDrawerStatus={this.state.deviceDrawerStatus}\n//           closeDeviceDrawerFunction={this.closeDeviceDrawer}\n//         />\n//         <ForceGraphComponent\n//           style={{ zIndex: -1 }}\n//           handleRightClick={this.handleRightClick}\n//           handleHover={this.handleHover}\n//           handleClick={this.FocusGraph}\n//         />\n//       </div>\n//     );\n//   }\n// }\n// handleClick = (node) => {\n//   const getHostName = testingData.filter((thisDevice) =>\n//     thisDevice.id.includes(node.id)\n//   );\n//   getHostName.map((deviceDetails) => {\n//     // alert(deviceDetails.os);\n//     this.setState({ deviceDetailsObject: deviceDetails });\n//   });\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AppNetworkTopology() {\n  _s3();\n\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$();\n\n  const [deviceDrawerStatus, setDeviceDrawerStatus] = useState(false);\n  const [networkDrawerStatus, setNetworkDrawerStatus] = useState(false); // networkDrawerStatus={this.state.networkDrawerStatus}\n\n  const [deviceDetails, setDeviceDetails] = useState({});\n  const [networkDetails, setNetworkDetails] = useState({});\n  const [groupByDevice, setGroupByDevice] = useState();\n  const [deviceCounter, setDeviceCounter] = useState();\n\n  const closeDeviceDrawer = () => {\n    setDeviceDrawerStatus(false);\n  };\n\n  const closeNetworkDrawer = () => {\n    setNetworkDrawerStatus(false);\n  }; // const handleClick = (node) => {\n  //   setDeviceDrawerStatus(true);\n  //   setNetworkDrawerStatus(false);\n  //   setDeviceDetails(node);\n  // };\n\n\n  const handleNetworkStatisticsButton = () => {\n    setDeviceDrawerStatus(false);\n    setNetworkDrawerStatus(true);\n    setNetworkDetails(networkData[0]);\n    setDeviceCounter(device_data.length);\n    setGroupByDevice(groupByDeviceType);\n  };\n\n  const groupByDeviceType = device_data.reduce((thisData, dev) => {\n    thisData[dev.status] = thisData[dev.status] + 1 || 1;\n    return thisData;\n  }, {});\n  const fgRef = useRef();\n  const zoomInNode = useCallback(node => {\n    setDeviceDrawerStatus(true);\n    setNetworkDrawerStatus(false);\n    setDeviceDetails(node); // Aim at node from outside it\n\n    const distance = 120;\n    const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n    fgRef.current.cameraPosition({\n      x: node.x * distRatio,\n      y: node.y * distRatio,\n      z: node.z * distRatio\n    }, // new position\n    node, // lookAt ({ x, y, z })\n    3000 // ms transition duration\n    );\n  }, [fgRef]);\n\n  const ExpandableGraph = _ref => {\n    _s();\n\n    let {\n      graphData\n    } = _ref;\n    const rootId = 0;\n    const nodesById = useMemo(() => {\n      const nodesById = Object.fromEntries(graphData.nodes.map(node => [node.id, node])); // link parent/children\n\n      graphData.nodes.forEach(node => {\n        node.collapsed = node.id !== rootId;\n        node.childLinks = [];\n      });\n      graphData.links.forEach(link => nodesById[link.source].childLinks.push(link));\n      return nodesById;\n    }, [graphData]);\n    const getPrunedTree = useCallback(() => {\n      const visibleNodes = [];\n      const visibleLinks = [];\n\n      (function traverseTree() {\n        let node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : nodesById[rootId];\n        visibleNodes.push(node);\n        if (node.collapsed) return;\n        visibleLinks.push(...node.childLinks);\n        node.childLinks.map(link => typeof link.target === \"object\" ? link.target : nodesById[link.target]) // get child node\n        .forEach(traverseTree);\n      })();\n\n      return {\n        nodes: visibleNodes,\n        links: visibleLinks\n      };\n    }, [nodesById]);\n    const [prunedTree, setPrunedTree] = useState(getPrunedTree());\n    const handleNodeClick = useCallback(node => {\n      node.collapsed = !node.collapsed; // toggle collapse state\n\n      setPrunedTree(getPrunedTree());\n    }, []);\n    return /*#__PURE__*/_jsxDEV(ForceGraph3D, {\n      graphData: prunedTree,\n      linkDirectionalParticles: 2,\n      nodeColor: node => !node.childLinks.length ? \"green\" : node.collapsed ? \"red\" : \"yellow\",\n      onNodeClick: handleNodeClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this);\n  };\n\n  _s(ExpandableGraph, \"5C788SkXDArg9YvgPcdLAnBuJh4=\");\n\n  const NODE_R = 8;\n\n  const HighlightGraph = () => {\n    _s2();\n\n    const data = useMemo(() => {\n      const gData = genRandomTree(80); // cross-link node objects\n\n      gData.links.forEach(link => {\n        const a = gData.nodes[link.source];\n        const b = gData.nodes[link.target];\n        !a.neighbors && (a.neighbors = []);\n        !b.neighbors && (b.neighbors = []);\n        a.neighbors.push(b);\n        b.neighbors.push(a);\n        !a.links && (a.links = []);\n        !b.links && (b.links = []);\n        a.links.push(link);\n        b.links.push(link);\n      });\n      return gData;\n    }, []);\n    const [highlightNodes, setHighlightNodes] = useState(new Set());\n    const [highlightLinks, setHighlightLinks] = useState(new Set());\n    const [hoverNode, setHoverNode] = useState(null);\n\n    const updateHighlight = () => {\n      setHighlightNodes(highlightNodes);\n      setHighlightLinks(highlightLinks);\n    };\n\n    const handleNodeHover = node => {\n      highlightNodes.clear();\n      highlightLinks.clear();\n\n      if (node) {\n        highlightNodes.add(node);\n        node.neighbors.forEach(neighbor => highlightNodes.add(neighbor));\n        node.links.forEach(link => highlightLinks.add(link));\n      }\n\n      setHoverNode(node || null);\n      updateHighlight();\n    };\n\n    const handleLinkHover = link => {\n      highlightNodes.clear();\n      highlightLinks.clear();\n\n      if (link) {\n        highlightLinks.add(link);\n        highlightNodes.add(link.source);\n        highlightNodes.add(link.target);\n      }\n\n      updateHighlight();\n    };\n\n    const paintRing = useCallback((node, ctx) => {\n      // add ring just for highlighted nodes\n      ctx.beginPath();\n      ctx.arc(node.x, node.y, NODE_R * 1.4, 0, 2 * Math.PI, false);\n      ctx.fillStyle = node === hoverNode ? \"red\" : \"orange\";\n      ctx.fill();\n    }, [hoverNode]);\n    return /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n      graphData: data,\n      nodeRelSize: NODE_R,\n      autoPauseRedraw: false,\n      linkWidth: link => highlightLinks.has(link) ? 5 : 1,\n      linkDirectionalParticles: 4,\n      linkDirectionalParticleWidth: link => highlightLinks.has(link) ? 4 : 0,\n      nodeCanvasObjectMode: node => highlightNodes.has(node) ? \"before\" : undefined,\n      nodeCanvasObject: paintRing,\n      onNodeHover: handleNodeHover,\n      onLinkHover: handleLinkHover\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 7\n    }, this);\n  };\n\n  _s2(HighlightGraph, \"6tWwwRhh9rq2T6KKzRI7guIwbO0=\");\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Layout, {\n      style: {\n        marginLeft: 199\n      },\n      children: [\" \", /*#__PURE__*/_jsxDEV(ForceGraph3D, {\n        style: {\n          zIndex: -1\n        },\n        width: window.innerWidth - 200,\n        ref: fgRef,\n        graphData: {\n          nodes: device_data,\n          links: relation_data\n        },\n        onNodeRightClick: zoomInNode // linkDirectionalParticles={1}\n        // linkDirectionalParticleSpeed={0.01}\n        // onNodeHover={handleHover}\n        // onNodeDragEnd={(node) => {\n        //   node.fx = node.x;\n        //   node.fy = node.y;\n        //   node.fz = node.z;\n        // }}\n        ,\n        nodeThreeObject: _ref2 => {\n          let {\n            type\n          } = _ref2;\n          let imgTexture = null;\n\n          if (type === \"DB\") {\n            imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\n          } else if (type === \"PC\") {\n            imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\n          } else if (type === \"Router\") {\n            imgTexture = new THREE.TextureLoader().load(\"assets/img_router.png\");\n          }\n\n          const material = new THREE.SpriteMaterial({\n            map: imgTexture\n          });\n          const sprite = new THREE.Sprite(material);\n          sprite.scale.set(12, 12);\n          return sprite;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Affix, {\n      style: {\n        position: \"absolute\",\n        top: 120,\n        left: 10\n      },\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: handleNetworkStatisticsButton,\n        children: \"Show Network Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DeviceDrawer, {\n      deviceDrawerStatus: deviceDrawerStatus,\n      deviceDetails: deviceDetails,\n      closeDeviceDrawer: closeDeviceDrawer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NetworkDrawer, {\n      networkDrawerStatus: networkDrawerStatus // networkDrawerStatus={this.state.networkDrawerStatus}\n      ,\n      networkDetails: networkDetails // networkDetailObject={this.state.networkDetailObject}\n      ,\n      groupByDevice: groupByDevice // networkStatisticsObject={this.state.networkStatisticsObject}\n      ,\n      deviceCounter: deviceCounter // networkDeviceCounter={this.state.networkDeviceCounter}\n      ,\n      closeNetworkDrawer: closeNetworkDrawer // closeNetworkDrawerFunction={this.closeNetworkDrawer}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 406,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(AppNetworkTopology, \"gSB3yNEAmOcWXVQzQPKHivva1RY=\");\n\n_c = AppNetworkTopology;\nexport default AppNetworkTopology;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppNetworkTopology\");","map":{"version":3,"sources":["C:/SourceTree/capstone-project/src/NetworkTopology.js"],"names":["React","useState","useRef","useCallback","Layout","Button","Affix","ForceGraph3D","DeviceDrawer","NetworkDrawer","THREE","networkData","device_data","relation_data","AppNetworkTopology","deviceDrawerStatus","setDeviceDrawerStatus","networkDrawerStatus","setNetworkDrawerStatus","deviceDetails","setDeviceDetails","networkDetails","setNetworkDetails","groupByDevice","setGroupByDevice","deviceCounter","setDeviceCounter","closeDeviceDrawer","closeNetworkDrawer","handleNetworkStatisticsButton","length","groupByDeviceType","reduce","thisData","dev","status","fgRef","zoomInNode","node","distance","distRatio","Math","hypot","x","y","z","current","cameraPosition","ExpandableGraph","graphData","rootId","nodesById","useMemo","Object","fromEntries","nodes","map","id","forEach","collapsed","childLinks","links","link","source","push","getPrunedTree","visibleNodes","visibleLinks","traverseTree","target","prunedTree","setPrunedTree","handleNodeClick","NODE_R","HighlightGraph","data","gData","genRandomTree","a","b","neighbors","highlightNodes","setHighlightNodes","Set","highlightLinks","setHighlightLinks","hoverNode","setHoverNode","updateHighlight","handleNodeHover","clear","add","neighbor","handleLinkHover","paintRing","ctx","beginPath","arc","PI","fillStyle","fill","has","undefined","marginLeft","zIndex","window","innerWidth","type","imgTexture","TextureLoader","load","material","SpriteMaterial","sprite","Sprite","scale","set","position","top","left"],"mappings":";;;AAAA,OAAO,oBAAP;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,WAAlC,QAAqD,OAArD;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,KAAzB,QAAsC,MAAtC;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,WAAP,MAAwB,gCAAxB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,OAAOC,aAAP,MAA0B,skBAAT,GAA8B;AAAA;;AAAA;AAAA;;AAC5B,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8Cf,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAACgB,mBAAD,EAAsBC,sBAAtB,IAAgDjB,QAAQ,CAAC,KAAD,CAA9D,CAF4B,CAE2C;;AACvE,QAAM,CAACkB,aAAD,EAAgBC,gBAAhB,IAAoCnB,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACoB,cAAD,EAAiBC,iBAAjB,IAAsCrB,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACsB,aAAD,EAAgBC,gBAAhB,IAAoCvB,QAAQ,EAAlD;AACA,QAAM,CAACwB,aAAD,EAAgBC,gBAAhB,IAAoCzB,QAAQ,EAAlD;;AAEA,QAAM0B,iBAAiB,GAAG,MAAM;AAC9BX,IAAAA,qBAAqB,CAAC,KAAD,CAArB;AACD,GAFD;;AAIA,QAAMY,kBAAkB,GAAG,MAAM;AAC/BV,IAAAA,sBAAsB,CAAC,KAAD,CAAtB;AACD,GAFD,CAZ4B,CAgB5B;AACA;AACA;AACA;AACA;;;AAEA,QAAMW,6BAA6B,GAAG,MAAM;AAC1Cb,IAAAA,qBAAqB,CAAC,KAAD,CAArB;AACAE,IAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACAI,IAAAA,iBAAiB,CAACX,WAAW,CAAC,CAAD,CAAZ,CAAjB;AACAe,IAAAA,gBAAgB,CAACd,WAAW,CAACkB,MAAb,CAAhB;AACAN,IAAAA,gBAAgB,CAACO,iBAAD,CAAhB;AACD,GAND;;AAQA,QAAMA,iBAAiB,GAAGnB,WAAW,CAACoB,MAAZ,CAAmB,CAACC,QAAD,EAAWC,GAAX,KAAmB;AAC9DD,IAAAA,QAAQ,CAACC,GAAG,CAACC,MAAL,CAAR,GAAuBF,QAAQ,CAACC,GAAG,CAACC,MAAL,CAAR,GAAuB,CAAvB,IAA4B,CAAnD;AACA,WAAOF,QAAP;AACD,GAHyB,EAGvB,EAHuB,CAA1B;AAKA,QAAMG,KAAK,GAAGlC,MAAM,EAApB;AACA,QAAMmC,UAAU,GAAGlC,WAAW,CAC3BmC,IAAD,IAAU;AACRtB,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACAE,IAAAA,sBAAsB,CAAC,KAAD,CAAtB;AACAE,IAAAA,gBAAgB,CAACkB,IAAD,CAAhB,CAHQ,CAKR;;AACA,UAAMC,QAAQ,GAAG,GAAjB;AACA,UAAMC,SAAS,GAAG,IAAID,QAAQ,GAAGE,IAAI,CAACC,KAAL,CAAWJ,IAAI,CAACK,CAAhB,EAAmBL,IAAI,CAACM,CAAxB,EAA2BN,IAAI,CAACO,CAAhC,CAAjC;AAEAT,IAAAA,KAAK,CAACU,OAAN,CAAcC,cAAd,CACE;AAAEJ,MAAAA,CAAC,EAAEL,IAAI,CAACK,CAAL,GAASH,SAAd;AAAyBI,MAAAA,CAAC,EAAEN,IAAI,CAACM,CAAL,GAASJ,SAArC;AAAgDK,MAAAA,CAAC,EAAEP,IAAI,CAACO,CAAL,GAASL;AAA5D,KADF,EAC2E;AACzEF,IAAAA,IAFF,EAEQ;AACN,QAHF,CAGO;AAHP;AAKD,GAf2B,EAgB5B,CAACF,KAAD,CAhB4B,CAA9B;;AAmBA,QAAMY,eAAe,GAAG,QAAmB;AAAA;;AAAA,QAAlB;AAAEC,MAAAA;AAAF,KAAkB;AACzC,UAAMC,MAAM,GAAG,CAAf;AAEA,UAAMC,SAAS,GAAGC,OAAO,CAAC,MAAM;AAC9B,YAAMD,SAAS,GAAGE,MAAM,CAACC,WAAP,CAChBL,SAAS,CAACM,KAAV,CAAgBC,GAAhB,CAAqBlB,IAAD,IAAU,CAACA,IAAI,CAACmB,EAAN,EAAUnB,IAAV,CAA9B,CADgB,CAAlB,CAD8B,CAK9B;;AACAW,MAAAA,SAAS,CAACM,KAAV,CAAgBG,OAAhB,CAAyBpB,IAAD,IAAU;AAChCA,QAAAA,IAAI,CAACqB,SAAL,GAAiBrB,IAAI,CAACmB,EAAL,KAAYP,MAA7B;AACAZ,QAAAA,IAAI,CAACsB,UAAL,GAAkB,EAAlB;AACD,OAHD;AAIAX,MAAAA,SAAS,CAACY,KAAV,CAAgBH,OAAhB,CAAyBI,IAAD,IACtBX,SAAS,CAACW,IAAI,CAACC,MAAN,CAAT,CAAuBH,UAAvB,CAAkCI,IAAlC,CAAuCF,IAAvC,CADF;AAIA,aAAOX,SAAP;AACD,KAfwB,EAetB,CAACF,SAAD,CAfsB,CAAzB;AAiBA,UAAMgB,aAAa,GAAG9D,WAAW,CAAC,MAAM;AACtC,YAAM+D,YAAY,GAAG,EAArB;AACA,YAAMC,YAAY,GAAG,EAArB;;AACA,OAAC,SAASC,YAAT,GAAgD;AAAA,YAA1B9B,IAA0B,uEAAnBa,SAAS,CAACD,MAAD,CAAU;AAC/CgB,QAAAA,YAAY,CAACF,IAAb,CAAkB1B,IAAlB;AACA,YAAIA,IAAI,CAACqB,SAAT,EAAoB;AACpBQ,QAAAA,YAAY,CAACH,IAAb,CAAkB,GAAG1B,IAAI,CAACsB,UAA1B;AACAtB,QAAAA,IAAI,CAACsB,UAAL,CACGJ,GADH,CACQM,IAAD,IACH,OAAOA,IAAI,CAACO,MAAZ,KAAuB,QAAvB,GACIP,IAAI,CAACO,MADT,GAEIlB,SAAS,CAACW,IAAI,CAACO,MAAN,CAJjB,EAKI;AALJ,SAMGX,OANH,CAMWU,YANX;AAOD,OAXD;;AAaA,aAAO;AAAEb,QAAAA,KAAK,EAAEW,YAAT;AAAuBL,QAAAA,KAAK,EAAEM;AAA9B,OAAP;AACD,KAjBgC,EAiB9B,CAAChB,SAAD,CAjB8B,CAAjC;AAmBA,UAAM,CAACmB,UAAD,EAAaC,aAAb,IAA8BtE,QAAQ,CAACgE,aAAa,EAAd,CAA5C;AAEA,UAAMO,eAAe,GAAGrE,WAAW,CAAEmC,IAAD,IAAU;AAC5CA,MAAAA,IAAI,CAACqB,SAAL,GAAiB,CAACrB,IAAI,CAACqB,SAAvB,CAD4C,CACV;;AAClCY,MAAAA,aAAa,CAACN,aAAa,EAAd,CAAb;AACD,KAHkC,EAGhC,EAHgC,CAAnC;AAKA,wBACE,QAAC,YAAD;AACE,MAAA,SAAS,EAAEK,UADb;AAEE,MAAA,wBAAwB,EAAE,CAF5B;AAGE,MAAA,SAAS,EAAGhC,IAAD,IACT,CAACA,IAAI,CAACsB,UAAL,CAAgB9B,MAAjB,GAA0B,OAA1B,GAAoCQ,IAAI,CAACqB,SAAL,GAAiB,KAAjB,GAAyB,QAJjE;AAME,MAAA,WAAW,EAAEa;AANf;AAAA;AAAA;AAAA;AAAA,YADF;AAUD,GAxDD;;AAvD4B,KAuDtBxB,eAvDsB;;AAiH5B,QAAMyB,MAAM,GAAG,CAAf;;AACA,QAAMC,cAAc,GAAG,MAAM;AAAA;;AAC3B,UAAMC,IAAI,GAAGvB,OAAO,CAAC,MAAM;AACzB,YAAMwB,KAAK,GAAGC,aAAa,CAAC,EAAD,CAA3B,CADyB,CAGzB;;AACAD,MAAAA,KAAK,CAACf,KAAN,CAAYH,OAAZ,CAAqBI,IAAD,IAAU;AAC5B,cAAMgB,CAAC,GAAGF,KAAK,CAACrB,KAAN,CAAYO,IAAI,CAACC,MAAjB,CAAV;AACA,cAAMgB,CAAC,GAAGH,KAAK,CAACrB,KAAN,CAAYO,IAAI,CAACO,MAAjB,CAAV;AACA,SAACS,CAAC,CAACE,SAAH,KAAiBF,CAAC,CAACE,SAAF,GAAc,EAA/B;AACA,SAACD,CAAC,CAACC,SAAH,KAAiBD,CAAC,CAACC,SAAF,GAAc,EAA/B;AACAF,QAAAA,CAAC,CAACE,SAAF,CAAYhB,IAAZ,CAAiBe,CAAjB;AACAA,QAAAA,CAAC,CAACC,SAAF,CAAYhB,IAAZ,CAAiBc,CAAjB;AAEA,SAACA,CAAC,CAACjB,KAAH,KAAaiB,CAAC,CAACjB,KAAF,GAAU,EAAvB;AACA,SAACkB,CAAC,CAAClB,KAAH,KAAakB,CAAC,CAAClB,KAAF,GAAU,EAAvB;AACAiB,QAAAA,CAAC,CAACjB,KAAF,CAAQG,IAAR,CAAaF,IAAb;AACAiB,QAAAA,CAAC,CAAClB,KAAF,CAAQG,IAAR,CAAaF,IAAb;AACD,OAZD;AAcA,aAAOc,KAAP;AACD,KAnBmB,EAmBjB,EAnBiB,CAApB;AAqBA,UAAM,CAACK,cAAD,EAAiBC,iBAAjB,IAAsCjF,QAAQ,CAAC,IAAIkF,GAAJ,EAAD,CAApD;AACA,UAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCpF,QAAQ,CAAC,IAAIkF,GAAJ,EAAD,CAApD;AACA,UAAM,CAACG,SAAD,EAAYC,YAAZ,IAA4BtF,QAAQ,CAAC,IAAD,CAA1C;;AAEA,UAAMuF,eAAe,GAAG,MAAM;AAC5BN,MAAAA,iBAAiB,CAACD,cAAD,CAAjB;AACAI,MAAAA,iBAAiB,CAACD,cAAD,CAAjB;AACD,KAHD;;AAKA,UAAMK,eAAe,GAAInD,IAAD,IAAU;AAChC2C,MAAAA,cAAc,CAACS,KAAf;AACAN,MAAAA,cAAc,CAACM,KAAf;;AACA,UAAIpD,IAAJ,EAAU;AACR2C,QAAAA,cAAc,CAACU,GAAf,CAAmBrD,IAAnB;AACAA,QAAAA,IAAI,CAAC0C,SAAL,CAAetB,OAAf,CAAwBkC,QAAD,IAAcX,cAAc,CAACU,GAAf,CAAmBC,QAAnB,CAArC;AACAtD,QAAAA,IAAI,CAACuB,KAAL,CAAWH,OAAX,CAAoBI,IAAD,IAAUsB,cAAc,CAACO,GAAf,CAAmB7B,IAAnB,CAA7B;AACD;;AAEDyB,MAAAA,YAAY,CAACjD,IAAI,IAAI,IAAT,CAAZ;AACAkD,MAAAA,eAAe;AAChB,KAXD;;AAaA,UAAMK,eAAe,GAAI/B,IAAD,IAAU;AAChCmB,MAAAA,cAAc,CAACS,KAAf;AACAN,MAAAA,cAAc,CAACM,KAAf;;AAEA,UAAI5B,IAAJ,EAAU;AACRsB,QAAAA,cAAc,CAACO,GAAf,CAAmB7B,IAAnB;AACAmB,QAAAA,cAAc,CAACU,GAAf,CAAmB7B,IAAI,CAACC,MAAxB;AACAkB,QAAAA,cAAc,CAACU,GAAf,CAAmB7B,IAAI,CAACO,MAAxB;AACD;;AAEDmB,MAAAA,eAAe;AAChB,KAXD;;AAaA,UAAMM,SAAS,GAAG3F,WAAW,CAC3B,CAACmC,IAAD,EAAOyD,GAAP,KAAe;AACb;AACAA,MAAAA,GAAG,CAACC,SAAJ;AACAD,MAAAA,GAAG,CAACE,GAAJ,CAAQ3D,IAAI,CAACK,CAAb,EAAgBL,IAAI,CAACM,CAArB,EAAwB6B,MAAM,GAAG,GAAjC,EAAsC,CAAtC,EAAyC,IAAIhC,IAAI,CAACyD,EAAlD,EAAsD,KAAtD;AACAH,MAAAA,GAAG,CAACI,SAAJ,GAAgB7D,IAAI,KAAKgD,SAAT,GAAqB,KAArB,GAA6B,QAA7C;AACAS,MAAAA,GAAG,CAACK,IAAJ;AACD,KAP0B,EAQ3B,CAACd,SAAD,CAR2B,CAA7B;AAWA,wBACE,QAAC,YAAD;AACE,MAAA,SAAS,EAAEX,IADb;AAEE,MAAA,WAAW,EAAEF,MAFf;AAGE,MAAA,eAAe,EAAE,KAHnB;AAIE,MAAA,SAAS,EAAGX,IAAD,IAAWsB,cAAc,CAACiB,GAAf,CAAmBvC,IAAnB,IAA2B,CAA3B,GAA+B,CAJvD;AAKE,MAAA,wBAAwB,EAAE,CAL5B;AAME,MAAA,4BAA4B,EAAGA,IAAD,IAC5BsB,cAAc,CAACiB,GAAf,CAAmBvC,IAAnB,IAA2B,CAA3B,GAA+B,CAPnC;AASE,MAAA,oBAAoB,EAAGxB,IAAD,IACpB2C,cAAc,CAACoB,GAAf,CAAmB/D,IAAnB,IAA2B,QAA3B,GAAsCgE,SAV1C;AAYE,MAAA,gBAAgB,EAAER,SAZpB;AAaE,MAAA,WAAW,EAAEL,eAbf;AAcE,MAAA,WAAW,EAAEI;AAdf;AAAA;AAAA;AAAA;AAAA,YADF;AAkBD,GAtFD;;AAlH4B,MAkHtBnB,cAlHsB;;AA0M5B,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAE;AAAE6B,QAAAA,UAAU,EAAE;AAAd,OAAf;AAAA,iBACG,GADH,eAEE,QAAC,YAAD;AACE,QAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE,CAAC;AAAX,SADT;AAEE,QAAA,KAAK,EAAEC,MAAM,CAACC,UAAP,GAAoB,GAF7B;AAGE,QAAA,GAAG,EAAEtE,KAHP;AAIE,QAAA,SAAS,EAAE;AACTmB,UAAAA,KAAK,EAAE3C,WADE;AAETiD,UAAAA,KAAK,EAAEhD;AAFE,SAJb;AAQE,QAAA,gBAAgB,EAAEwB,UARpB,CASE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBF;AAiBE,QAAA,eAAe,EAAE,SAAc;AAAA,cAAb;AAAEsE,YAAAA;AAAF,WAAa;AAC7B,cAAIC,UAAU,GAAG,IAAjB;;AACA,cAAID,IAAI,KAAK,IAAb,EAAmB;AACjBC,YAAAA,UAAU,GAAG,IAAIlG,KAAK,CAACmG,aAAV,GAA0BC,IAA1B,CAA+B,mBAA/B,CAAb;AACD,WAFD,MAEO,IAAIH,IAAI,KAAK,IAAb,EAAmB;AACxBC,YAAAA,UAAU,GAAG,IAAIlG,KAAK,CAACmG,aAAV,GAA0BC,IAA1B,CAA+B,mBAA/B,CAAb;AACD,WAFM,MAEA,IAAIH,IAAI,KAAK,QAAb,EAAuB;AAC5BC,YAAAA,UAAU,GAAG,IAAIlG,KAAK,CAACmG,aAAV,GAA0BC,IAA1B,CACX,uBADW,CAAb;AAGD;;AAED,gBAAMC,QAAQ,GAAG,IAAIrG,KAAK,CAACsG,cAAV,CAAyB;AAAExD,YAAAA,GAAG,EAAEoD;AAAP,WAAzB,CAAjB;AACA,gBAAMK,MAAM,GAAG,IAAIvG,KAAK,CAACwG,MAAV,CAAiBH,QAAjB,CAAf;AACAE,UAAAA,MAAM,CAACE,KAAP,CAAaC,GAAb,CAAiB,EAAjB,EAAqB,EAArB;AAEA,iBAAOH,MAAP;AACD;AAlCH;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAwCE,QAAC,KAAD;AAAO,MAAA,KAAK,EAAE;AAAEI,QAAAA,QAAQ,EAAE,UAAZ;AAAwBC,QAAAA,GAAG,EAAE,GAA7B;AAAkCC,QAAAA,IAAI,EAAE;AAAxC,OAAd;AAAA,6BACE,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAC,SAAb;AAAuB,QAAA,OAAO,EAAE1F,6BAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAxCF,eA8CE,QAAC,YAAD;AACE,MAAA,kBAAkB,EAAEd,kBADtB;AAEE,MAAA,aAAa,EAAEI,aAFjB;AAGE,MAAA,iBAAiB,EAAEQ;AAHrB;AAAA;AAAA;AAAA;AAAA,YA9CF,eAmDE,QAAC,aAAD;AACE,MAAA,mBAAmB,EAAEV,mBADvB,CAC4C;AAD5C;AAEE,MAAA,cAAc,EAAEI,cAFlB,CAEkC;AAFlC;AAGE,MAAA,aAAa,EAAEE,aAHjB,CAGgC;AAHhC;AAIE,MAAA,aAAa,EAAEE,aAJjB,CAIgC;AAJhC;AAKE,MAAA,kBAAkB,EAAEG,kBALtB,CAK0C;;AAL1C;AAAA;AAAA;AAAA;AAAA,YAnDF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6DD;;IAvQQd,kB;;KAAAA,kB;AAyQT,eAAeA,kBAAf","sourcesContent":["import \"antd/dist/antd.css\";\r\nimport React, { useState, useRef, useCallback } from \"react\";\r\nimport { Layout, Button, Affix } from \"antd\";\r\nimport { ForceGraph3D } from \"react-force-graph\";\r\nimport DeviceDrawer from \"./Components/DrawerDevice\";\r\nimport NetworkDrawer from \"./Components/DrawerNetwork\";\r\nimport * as THREE from \"three\";\r\nimport networkData from \"./Components/Data/network.json\";\r\nimport device_data from \"./Components/Data/device_data.json\";\r\nimport relation_data from \"./Components/Data/relation_data.json\";\r\n\r\n// const groupByDeviceType = device_data.reduce((thisData, dev) => {\r\n//   thisData[dev.status] = thisData[dev.status] + 1 || 1;\r\n//   return thisData;\r\n// }, {});\r\n\r\n// function FocusGraph() {\r\n//   const fgRef = React.useRef;\r\n\r\n//   const handleClick = React.useCallback(\r\n//     (node) => {\r\n//       const distance = 40;\r\n//       const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\r\n\r\n//       fgRef.current.cameraPosition(\r\n//         { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio }, // new position\r\n//         node, // lookAt ({ x, y, z })\r\n//         3000 // camera transition duration (in ms)\r\n//       );\r\n//     },\r\n//     [fgRef]\r\n//   );\r\n// }\r\n\r\n// // ForceGraphComponent with React.memo implementation (Prevents unnecessary re-rendering)\r\n// const ForceGraphComponent = React.memo((props) => {\r\n//   console.log(\"Child rendered\"); // For verification purposes\r\n//   console.log(device_data);\r\n\r\n//   // Layout to add margin left to the Networok Topology Graph\r\n//   return (\r\n//     <Layout style={{ marginLeft: 199 }}>\r\n//       <ForceGraph3D\r\n//         width={window.innerWidth - 200}\r\n//         graphData={{\r\n//           nodes: device_data,\r\n//           links: relation_data,\r\n//         }}\r\n//         onNodeRightClick={props.handleRightClick}\r\n//         // linkDirectionalParticles={1}\r\n//         // linkDirectionalParticleSpeed={0.01}\r\n//         onNodeHover={props.handleHover}\r\n//         onNodeDragEnd={(node) => {\r\n//           node.fx = node.x;\r\n//           node.fy = node.y;\r\n//           node.fz = node.z;\r\n//         }}\r\n//         nodeThreeObject={({ type }) => {\r\n//           let imgTexture = null;\r\n//           if (type === \"DB\") {\r\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\r\n//           } else if (type === \"PC\") {\r\n//             imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\r\n//           } else if (type === \"Router\") {\r\n//             imgTexture = new THREE.TextureLoader().load(\r\n//               \"assets/img_router.png\"\r\n//             );\r\n//           }\r\n\r\n//           const material = new THREE.SpriteMaterial({ map: imgTexture });\r\n//           const sprite = new THREE.Sprite(material);\r\n//           sprite.scale.set(12, 12);\r\n\r\n//           return sprite;\r\n//         }}\r\n//       />\r\n//     </Layout>\r\n//   );\r\n// });\r\n\r\n// export default class AppNetworkTopology extends React.Component {\r\n//   // Initial state\r\n//   state = {\r\n//     deviceDrawerStatus: false,\r\n//     networkDrawerStatus: false,\r\n//     deviceDetailsObject: {},\r\n//     networkDetailObject: networkData[0],\r\n//     networkStatisticsObject: groupByDeviceType,\r\n//     networkDeviceCounter: device_data.length,\r\n//   };\r\n\r\n//   // shouldComponentUpdate = (nextProps, nextState) => {\r\n//   //   console.log(nextProps);\r\n//   //   console.log(nextState);\r\n//   //   return false;\r\n//   // };\r\n\r\n//   // On right-click on icon on network topology, the function will pass the object to handleRightClick()\r\n//   // This function wil then set the state of \"deviceDrawerStatus\" to \"true\"\r\n//   // This function will also set the state of \"networkDrawerStatus\" to false\r\n//   handleRightClick = (node) => {\r\n//     this.setState({\r\n//       deviceDetailsObject: node,\r\n//       deviceDrawerStatus: true,\r\n//       networkDrawerStatus: false,\r\n//     });\r\n//   };\r\n\r\n//   handleHover = (node) => {\r\n//     // console.log(this.state.deviceDetailsObject);\r\n//     if (node != null && node != this.state.deviceDetailsObject) {\r\n//       this.setState({\r\n//         deviceDetailsObject: node,\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   // This function set the state of \"networkDrawerStatus\" will be \"true\"\r\n//   // This function will also set the state of \"deviceDrawerStatus\" to false\r\n//   // This function will only be invoked when the \"Show Network Statistics\" button is pressed\r\n//   handleNetworkStatistcsButton = () => {\r\n//     this.setState({\r\n//       networkDrawerStatus: true,\r\n//       deviceDrawerStatus: false,\r\n//     });\r\n//   };\r\n\r\n//   // This function sets the state of \"deviceDrawerStatus\" to \"false\"\r\n//   // This funtion is passed to the child component \"DeviceDrawer\"\r\n//   // When clicking on the \"X\" symbol in \"DeviceDrawer\", this function will run\r\n//   closeDeviceDrawer = () => {\r\n//     this.setState({ deviceDrawerStatus: false });\r\n//   };\r\n\r\n//   // This function sets the state of \"networkDrawerStatus\" to \"false\"\r\n//   // This funtion is passed to the child component \"NetworkDrawer\"\r\n//   // When clicking on the \"X\" symbol in \"NetworkDrawer\", this function will run\r\n//   closeNetworkDrawer = () => {\r\n//     this.setState({ networkDrawerStatus: false });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         <div\r\n//           id=\"tester\"\r\n//           style={{\r\n//             padding: 10,\r\n//             position: \"absolute\",\r\n//             top: 10,\r\n//             left: 210,\r\n//             zIndex: 1,\r\n//             background: \"white\",\r\n//             height: 200,\r\n//             width: 200,\r\n//           }}\r\n//         >\r\n//           <p>IP: {this.state.deviceDetailsObject.id}</p>\r\n//           <p>Name: {this.state.deviceDetailsObject.name}</p>\r\n//           <p>Type: {this.state.deviceDetailsObject.type}</p>\r\n//           <p>OS: {this.state.deviceDetailsObject.os}</p>\r\n//           <p>Mac: {this.state.deviceDetailsObject.mac_addr}</p>\r\n//         </div>\r\n//         <Affix style={{ position: \"absolute\", top: 120, left: 10 }}>\r\n//           <Button type=\"primary\" onClick={this.handleNetworkStatistcsButton}>\r\n//             Show Network Statistics\r\n//           </Button>\r\n//         </Affix>\r\n\r\n//         <NetworkDrawer\r\n//           networkDetailObject={this.state.networkDetailObject}\r\n//           networkDrawerStatus={this.state.networkDrawerStatus}\r\n//           networkStatisticsObject={this.state.networkStatisticsObject}\r\n//           networkDeviceCounter={this.state.networkDeviceCounter}\r\n//           closeNetworkDrawerFunction={this.closeNetworkDrawer}\r\n//         />\r\n//         <DeviceDrawer\r\n//           deviceDetails={this.state.deviceDetailsObject}\r\n//           deviceDrawerStatus={this.state.deviceDrawerStatus}\r\n//           closeDeviceDrawerFunction={this.closeDeviceDrawer}\r\n//         />\r\n//         <ForceGraphComponent\r\n//           style={{ zIndex: -1 }}\r\n//           handleRightClick={this.handleRightClick}\r\n//           handleHover={this.handleHover}\r\n//           handleClick={this.FocusGraph}\r\n//         />\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// handleClick = (node) => {\r\n//   const getHostName = testingData.filter((thisDevice) =>\r\n//     thisDevice.id.includes(node.id)\r\n//   );\r\n//   getHostName.map((deviceDetails) => {\r\n//     // alert(deviceDetails.os);\r\n//     this.setState({ deviceDetailsObject: deviceDetails });\r\n//   });\r\n// };\r\n\r\nfunction AppNetworkTopology() {\r\n  const [deviceDrawerStatus, setDeviceDrawerStatus] = useState(false);\r\n  const [networkDrawerStatus, setNetworkDrawerStatus] = useState(false); // networkDrawerStatus={this.state.networkDrawerStatus}\r\n  const [deviceDetails, setDeviceDetails] = useState({});\r\n  const [networkDetails, setNetworkDetails] = useState({});\r\n  const [groupByDevice, setGroupByDevice] = useState();\r\n  const [deviceCounter, setDeviceCounter] = useState();\r\n\r\n  const closeDeviceDrawer = () => {\r\n    setDeviceDrawerStatus(false);\r\n  };\r\n\r\n  const closeNetworkDrawer = () => {\r\n    setNetworkDrawerStatus(false);\r\n  };\r\n\r\n  // const handleClick = (node) => {\r\n  //   setDeviceDrawerStatus(true);\r\n  //   setNetworkDrawerStatus(false);\r\n  //   setDeviceDetails(node);\r\n  // };\r\n\r\n  const handleNetworkStatisticsButton = () => {\r\n    setDeviceDrawerStatus(false);\r\n    setNetworkDrawerStatus(true);\r\n    setNetworkDetails(networkData[0]);\r\n    setDeviceCounter(device_data.length);\r\n    setGroupByDevice(groupByDeviceType);\r\n  };\r\n\r\n  const groupByDeviceType = device_data.reduce((thisData, dev) => {\r\n    thisData[dev.status] = thisData[dev.status] + 1 || 1;\r\n    return thisData;\r\n  }, {});\r\n\r\n  const fgRef = useRef();\r\n  const zoomInNode = useCallback(\r\n    (node) => {\r\n      setDeviceDrawerStatus(true);\r\n      setNetworkDrawerStatus(false);\r\n      setDeviceDetails(node);\r\n\r\n      // Aim at node from outside it\r\n      const distance = 120;\r\n      const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\r\n\r\n      fgRef.current.cameraPosition(\r\n        { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio }, // new position\r\n        node, // lookAt ({ x, y, z })\r\n        3000 // ms transition duration\r\n      );\r\n    },\r\n    [fgRef]\r\n  );\r\n\r\n  const ExpandableGraph = ({ graphData }) => {\r\n    const rootId = 0;\r\n\r\n    const nodesById = useMemo(() => {\r\n      const nodesById = Object.fromEntries(\r\n        graphData.nodes.map((node) => [node.id, node])\r\n      );\r\n\r\n      // link parent/children\r\n      graphData.nodes.forEach((node) => {\r\n        node.collapsed = node.id !== rootId;\r\n        node.childLinks = [];\r\n      });\r\n      graphData.links.forEach((link) =>\r\n        nodesById[link.source].childLinks.push(link)\r\n      );\r\n\r\n      return nodesById;\r\n    }, [graphData]);\r\n\r\n    const getPrunedTree = useCallback(() => {\r\n      const visibleNodes = [];\r\n      const visibleLinks = [];\r\n      (function traverseTree(node = nodesById[rootId]) {\r\n        visibleNodes.push(node);\r\n        if (node.collapsed) return;\r\n        visibleLinks.push(...node.childLinks);\r\n        node.childLinks\r\n          .map((link) =>\r\n            typeof link.target === \"object\"\r\n              ? link.target\r\n              : nodesById[link.target]\r\n          ) // get child node\r\n          .forEach(traverseTree);\r\n      })();\r\n\r\n      return { nodes: visibleNodes, links: visibleLinks };\r\n    }, [nodesById]);\r\n\r\n    const [prunedTree, setPrunedTree] = useState(getPrunedTree());\r\n\r\n    const handleNodeClick = useCallback((node) => {\r\n      node.collapsed = !node.collapsed; // toggle collapse state\r\n      setPrunedTree(getPrunedTree());\r\n    }, []);\r\n\r\n    return (\r\n      <ForceGraph3D\r\n        graphData={prunedTree}\r\n        linkDirectionalParticles={2}\r\n        nodeColor={(node) =>\r\n          !node.childLinks.length ? \"green\" : node.collapsed ? \"red\" : \"yellow\"\r\n        }\r\n        onNodeClick={handleNodeClick}\r\n      />\r\n    );\r\n  };\r\n\r\n  const NODE_R = 8;\r\n  const HighlightGraph = () => {\r\n    const data = useMemo(() => {\r\n      const gData = genRandomTree(80);\r\n\r\n      // cross-link node objects\r\n      gData.links.forEach((link) => {\r\n        const a = gData.nodes[link.source];\r\n        const b = gData.nodes[link.target];\r\n        !a.neighbors && (a.neighbors = []);\r\n        !b.neighbors && (b.neighbors = []);\r\n        a.neighbors.push(b);\r\n        b.neighbors.push(a);\r\n\r\n        !a.links && (a.links = []);\r\n        !b.links && (b.links = []);\r\n        a.links.push(link);\r\n        b.links.push(link);\r\n      });\r\n\r\n      return gData;\r\n    }, []);\r\n\r\n    const [highlightNodes, setHighlightNodes] = useState(new Set());\r\n    const [highlightLinks, setHighlightLinks] = useState(new Set());\r\n    const [hoverNode, setHoverNode] = useState(null);\r\n\r\n    const updateHighlight = () => {\r\n      setHighlightNodes(highlightNodes);\r\n      setHighlightLinks(highlightLinks);\r\n    };\r\n\r\n    const handleNodeHover = (node) => {\r\n      highlightNodes.clear();\r\n      highlightLinks.clear();\r\n      if (node) {\r\n        highlightNodes.add(node);\r\n        node.neighbors.forEach((neighbor) => highlightNodes.add(neighbor));\r\n        node.links.forEach((link) => highlightLinks.add(link));\r\n      }\r\n\r\n      setHoverNode(node || null);\r\n      updateHighlight();\r\n    };\r\n\r\n    const handleLinkHover = (link) => {\r\n      highlightNodes.clear();\r\n      highlightLinks.clear();\r\n\r\n      if (link) {\r\n        highlightLinks.add(link);\r\n        highlightNodes.add(link.source);\r\n        highlightNodes.add(link.target);\r\n      }\r\n\r\n      updateHighlight();\r\n    };\r\n\r\n    const paintRing = useCallback(\r\n      (node, ctx) => {\r\n        // add ring just for highlighted nodes\r\n        ctx.beginPath();\r\n        ctx.arc(node.x, node.y, NODE_R * 1.4, 0, 2 * Math.PI, false);\r\n        ctx.fillStyle = node === hoverNode ? \"red\" : \"orange\";\r\n        ctx.fill();\r\n      },\r\n      [hoverNode]\r\n    );\r\n\r\n    return (\r\n      <ForceGraph2D\r\n        graphData={data}\r\n        nodeRelSize={NODE_R}\r\n        autoPauseRedraw={false}\r\n        linkWidth={(link) => (highlightLinks.has(link) ? 5 : 1)}\r\n        linkDirectionalParticles={4}\r\n        linkDirectionalParticleWidth={(link) =>\r\n          highlightLinks.has(link) ? 4 : 0\r\n        }\r\n        nodeCanvasObjectMode={(node) =>\r\n          highlightNodes.has(node) ? \"before\" : undefined\r\n        }\r\n        nodeCanvasObject={paintRing}\r\n        onNodeHover={handleNodeHover}\r\n        onLinkHover={handleLinkHover}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Layout style={{ marginLeft: 199 }}>\r\n        {\" \"}\r\n        <ForceGraph3D\r\n          style={{ zIndex: -1 }}\r\n          width={window.innerWidth - 200}\r\n          ref={fgRef}\r\n          graphData={{\r\n            nodes: device_data,\r\n            links: relation_data,\r\n          }}\r\n          onNodeRightClick={zoomInNode}\r\n          // linkDirectionalParticles={1}\r\n          // linkDirectionalParticleSpeed={0.01}\r\n          // onNodeHover={handleHover}\r\n          // onNodeDragEnd={(node) => {\r\n          //   node.fx = node.x;\r\n          //   node.fy = node.y;\r\n          //   node.fz = node.z;\r\n          // }}\r\n          nodeThreeObject={({ type }) => {\r\n            let imgTexture = null;\r\n            if (type === \"DB\") {\r\n              imgTexture = new THREE.TextureLoader().load(\"assets/img_db.png\");\r\n            } else if (type === \"PC\") {\r\n              imgTexture = new THREE.TextureLoader().load(\"assets/img_pc.png\");\r\n            } else if (type === \"Router\") {\r\n              imgTexture = new THREE.TextureLoader().load(\r\n                \"assets/img_router.png\"\r\n              );\r\n            }\r\n\r\n            const material = new THREE.SpriteMaterial({ map: imgTexture });\r\n            const sprite = new THREE.Sprite(material);\r\n            sprite.scale.set(12, 12);\r\n\r\n            return sprite;\r\n          }}\r\n        />\r\n      </Layout>\r\n      <Affix style={{ position: \"absolute\", top: 120, left: 10 }}>\r\n        <Button type=\"primary\" onClick={handleNetworkStatisticsButton}>\r\n          Show Network Statistics\r\n        </Button>\r\n      </Affix>\r\n\r\n      <DeviceDrawer\r\n        deviceDrawerStatus={deviceDrawerStatus}\r\n        deviceDetails={deviceDetails}\r\n        closeDeviceDrawer={closeDeviceDrawer}\r\n      />\r\n      <NetworkDrawer\r\n        networkDrawerStatus={networkDrawerStatus} // networkDrawerStatus={this.state.networkDrawerStatus}\r\n        networkDetails={networkDetails} // networkDetailObject={this.state.networkDetailObject}\r\n        groupByDevice={groupByDevice} // networkStatisticsObject={this.state.networkStatisticsObject}\r\n        deviceCounter={deviceCounter} // networkDeviceCounter={this.state.networkDeviceCounter}\r\n        closeNetworkDrawer={closeNetworkDrawer} // closeNetworkDrawerFunction={this.closeNetworkDrawer}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppNetworkTopology;\r\n"]},"metadata":{},"sourceType":"module"}