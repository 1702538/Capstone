[{"C:\\GitHub\\Capstone\\src\\index.js":"1","C:\\GitHub\\Capstone\\src\\App.js":"2","C:\\GitHub\\Capstone\\src\\reportWebVitals.js":"3","C:\\GitHub\\Capstone\\src\\ManageDevices.js":"4","C:\\GitHub\\Capstone\\src\\NetworkTopology.js":"5","C:\\GitHub\\Capstone\\src\\Components\\MenuNavigation.js":"6","C:\\GitHub\\Capstone\\src\\Components\\DrawerNetwork.js":"7","C:\\GitHub\\Capstone\\src\\Components\\DrawerManage.js":"8","C:\\GitHub\\Capstone\\src\\Components\\DrawerDevice.js":"9","C:\\GitHub\\Capstone\\src\\Components\\CardEmergingThreats.js":"10","C:\\GitHub\\Capstone\\src\\Components\\Card.js":"11","C:\\GitHub\\Capstone\\src\\Components\\Statistics.js":"12","C:\\GitHub\\Capstone\\src\\Components\\TableThreats.js":"13","C:\\GitHub\\Capstone\\src\\Components\\StatisticsDevice.js":"14","C:\\GitHub\\Capstone\\src\\Components\\FormDeviceManage.js":"15","C:\\GitHub\\Capstone\\src\\Components\\Card_Device.js":"16"},{"size":517,"mtime":1656814947225,"results":"17","hashOfConfig":"18"},{"size":786,"mtime":1656814947194,"results":"19","hashOfConfig":"18"},{"size":375,"mtime":1656814947226,"results":"20","hashOfConfig":"18"},{"size":5495,"mtime":1656814947224,"results":"21","hashOfConfig":"18"},{"size":12063,"mtime":1656814947224,"results":"22","hashOfConfig":"18"},{"size":1537,"mtime":1656814947219,"results":"23","hashOfConfig":"18"},{"size":2462,"mtime":1656814947219,"results":"24","hashOfConfig":"18"},{"size":1446,"mtime":1656814947217,"results":"25","hashOfConfig":"18"},{"size":1843,"mtime":1656814947216,"results":"26","hashOfConfig":"18"},{"size":3515,"mtime":1656814947198,"results":"27","hashOfConfig":"18"},{"size":2035,"mtime":1656814947197,"results":"28","hashOfConfig":"18"},{"size":1975,"mtime":1656814947219,"results":"29","hashOfConfig":"18"},{"size":2661,"mtime":1656814947221,"results":"30","hashOfConfig":"18"},{"size":1561,"mtime":1656814947221,"results":"31","hashOfConfig":"18"},{"size":4521,"mtime":1656814947219,"results":"32","hashOfConfig":"18"},{"size":3335,"mtime":1656814947198,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"a1kaaw",{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},"C:\\GitHub\\Capstone\\src\\index.js",[],"C:\\GitHub\\Capstone\\src\\App.js",["75"],"import \"antd/dist/antd.css\";\r\nimport NetworkDrawer from \"./Components/DrawerNetwork\";\r\nimport NavigationMenu from \"./Components/MenuNavigation\";\r\nimport AppNetworkTopology from \"./NetworkTopology\";\r\nimport AppDeviceManager from \"./ManageDevices\";\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Router>\r\n        <div>\r\n          <NavigationMenu />\r\n          <Routes>\r\n            {/* <Route path=\"/\" element={<NetworkDrawer />} /> */}\r\n            <Route path=\"/\" element={<AppNetworkTopology />} />\r\n            <Route path=\"/manage\" element={<AppDeviceManager />} />\r\n          </Routes>\r\n        </div>\r\n      </Router>\r\n      {/* <AppNetworkTopology /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\GitHub\\Capstone\\src\\reportWebVitals.js",[],"C:\\GitHub\\Capstone\\src\\ManageDevices.js",["76","77"],"import \"antd/dist/antd.css\";\r\nimport \"./index.css\";\r\nimport React, { useState } from \"react\";\r\nimport { Form, Layout, Table, Space, Popconfirm } from \"antd\";\r\n\r\nimport ManageDrawer from \"./Components/DrawerManage\";\r\nimport device_data from \"./Components/Data/device_data.json\";\r\n\r\n// Functional Component for Network Topology Graph Page UI\r\nfunction AppManageDevice() {\r\n  // UseState() functions for maintaining the states\r\n  const [manageDrawerStatus, setManageDrawerStatus] = useState(false); // To open / close the Manage Device Drawer Component\r\n  const [manageDeviceDetails, setManageDeviceDetails] = useState({}); // To store the device details for rendering\r\n  const [thisDeviceData, updateDeviceTableData] = useState(device_data); // To maintain the state of the data (datasource) & update table data\r\n  const [deviceForm] = Form.useForm(); // To declare the variable for the Form component\r\n\r\n  // Declaring of columns for the Manage Device table\r\n  const columns = [\r\n    {\r\n      title: \"Action\",\r\n      key: \"action\",\r\n      width: 150,\r\n      render: (record) => (\r\n        <Space size=\"middle\">\r\n          <a onClick={() => onEditClick(record)}>Edit</a>\r\n          <Popconfirm\r\n            title=\"Are you sure?\"\r\n            okText=\"Yes\"\r\n            cancelText=\"No\"\r\n            placement=\"bottom\"\r\n            onConfirm={() => deleteRow(record)}\r\n          >\r\n            <a>Remove</a>\r\n          </Popconfirm>\r\n        </Space>\r\n      ),\r\n    },\r\n    {\r\n      title: \"IP Address\",\r\n      dataIndex: \"id\",\r\n      key: \"id\",\r\n      width: 150,\r\n    },\r\n    {\r\n      title: \"Hostname\",\r\n      dataIndex: \"name\",\r\n      key: \"name\",\r\n      width: 150,\r\n    },\r\n    {\r\n      title: \"Device Type\",\r\n      dataIndex: \"type\",\r\n      key: \"type\",\r\n      width: 150,\r\n    },\r\n    {\r\n      title: \"OS Version\",\r\n      dataIndex: \"os\",\r\n      key: \"os\",\r\n      width: 150,\r\n    },\r\n    {\r\n      title: \"Mac Address\",\r\n      dataIndex: \"mac_addr\",\r\n      key: \"mac_addr\",\r\n      width: 150,\r\n    },\r\n    {\r\n      title: \"Ownership\",\r\n      dataIndex: \"ownership\",\r\n      key: \"ownership\",\r\n      width: 150,\r\n    },\r\n  ];\r\n\r\n  // Function to pass the selected device details to the Manage Device Drawer Component\r\n  // When user clicks on \"Edit\", two functions will run:\r\n  // - openManageDrawerStatus - To open device drawer\r\n  // - setManageDeviceDetails - Pass the record to FormDeviceMange page (for the Revert button)\r\n  // - setFormValue - Directly update the values in the Form component\r\n  const onEditClick = (record) => {\r\n    openManageDrawerStatus();\r\n    setManageDeviceDetails(record);\r\n    setFormValues(record);\r\n  };\r\n\r\n  // Function to set the Manage Device Drawer's \"visible\" state to true\r\n  const openManageDrawerStatus = () => {\r\n    setManageDrawerStatus(true);\r\n  };\r\n\r\n  // Function to set the Manage Device Drawer's \"visible\" state to false\r\n  const closeMangeDeviceDrawer = () => {\r\n    setManageDrawerStatus(false);\r\n  };\r\n\r\n  // Function to set the values in the Form component (passed in from the state)\r\n  const setFormValues = (record) => {\r\n    deviceForm.setFieldsValue({\r\n      hostname: record.name,\r\n      device_type: record.type,\r\n      os_version: record.os,\r\n      mac_address: record.mac_addr,\r\n      ownership: record.ownership,\r\n    });\r\n  };\r\n\r\n  // To update the values in the table based on the new data\r\n  const updatedFormValues = (updated) => {\r\n    // Sample console log for verification only\r\n    console.log(\r\n      \"Updated hostname to\",\r\n      updated.hostname,\r\n      \"where IP Address is\",\r\n      manageDeviceDetails.id\r\n    );\r\n\r\n    updateTableValues(updated);\r\n  };\r\n\r\n  // Function to update the table with the updated values from the user\r\n  // This function iterate through all the rows in the data until it find the correct row\r\n  function updateTableValues(updated) {\r\n    for (var i = 0; i < thisDeviceData.length; i++) {\r\n      if (thisDeviceData[i].id === manageDeviceDetails.id) {\r\n        thisDeviceData[i].name = updated.hostname;\r\n        thisDeviceData[i].type = updated.device_type;\r\n        thisDeviceData[i].os = updated.os_version;\r\n        thisDeviceData[i].mac_addr = updated.mac_address;\r\n        thisDeviceData[i].ownership = updated.ownership;\r\n        break;\r\n      }\r\n    }\r\n    updateDeviceTableData([...thisDeviceData]);\r\n    console.log(\"Table Updated:\", thisDeviceData[i].name);\r\n    console.log(thisDeviceData);\r\n  }\r\n\r\n  // Function to delete the record from the data\r\n  // This function iterates through all the rows in the data until it finds the correct row\r\n  function deleteRow(recordToDelete) {\r\n    for (var i = 0; i < thisDeviceData.length; i++) {\r\n      if (thisDeviceData[i].id === recordToDelete.id) {\r\n        thisDeviceData.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n    console.log(recordToDelete.id, \"has been deleted\");\r\n    console.log(thisDeviceData);\r\n    updateDeviceTableData([...thisDeviceData]);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/* Manage Device Drawer Component */}\r\n      <ManageDrawer\r\n        manageDrawerStatus={manageDrawerStatus}\r\n        manageDeviceDetails={manageDeviceDetails}\r\n        closeMangeDeviceDrawer={closeMangeDeviceDrawer}\r\n        deviceForm={deviceForm}\r\n        updatedFormValues={updatedFormValues}\r\n      />\r\n      {/* Manage Device Table Component */}\r\n      <Layout style={{ marginLeft: 199 }}>\r\n        <Table dataSource={[...thisDeviceData]} columns={columns} />\r\n      </Layout>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppManageDevice;\r\n","C:\\GitHub\\Capstone\\src\\NetworkTopology.js",["78","79","80"],"import \"antd/dist/antd.css\";\r\nimport { Layout, Button, Affix } from \"antd\";\r\n\r\nimport React, { useState, useRef, useCallback, useEffect } from \"react\";\r\n\r\nimport { ForceGraph3D } from \"react-force-graph\";\r\nimport * as THREE from \"three\";\r\n\r\nimport networkData from \"./Components/Data/network.json\";\r\nimport device_data from \"./Components/Data/device_data.json\";\r\nimport relation_data from \"./Components/Data/relation_data.json\";\r\n\r\nimport DeviceDrawer from \"./Components/DrawerDevice\";\r\nimport NetworkDrawer from \"./Components/DrawerNetwork\";\r\n\r\n// Functional Component for Network Topology Graph Page UI\r\nfunction AppNetworkTopology() {\r\n  // UseState() functions for maintaining the states\r\n  const [deviceDrawerStatus, setDeviceDrawerStatus] = useState(false); // To open / close the Device Drawer component\r\n  const [networkDrawerStatus, setNetworkDrawerStatus] = useState(false); // To open / close the Network Drawer component\r\n  const [networkDetails, setNetworkDetails] = useState({}); // To store / set the network details for rendering\r\n  const [groupByDevice, setGroupByDevice] = useState(); // To store the number of devices by device type (for statistical boxes)\r\n  const [deviceCounter, setDeviceCounter] = useState(); // To store the total number devices (for statistical boxes)\r\n  const [hoverNode, setHoverNode] = useState(); // To store the details of the selected network node (Network Topology Graph)\r\n  const [deviceConnected, setDeviceConnected] = useState({}); // To store the adjacent devices (after user click on the network node)\r\n  const [alertData, setAlertData] = useState([]); // To store the alerts information\r\n  const [popoverSelectedNode, setPopoverSelectedNode] = useState({}); // To store the selected network node (selected from popover)\r\n\r\n  // Run functions onload (similar to componentDidMount)\r\n  useEffect(() => {\r\n    setGroupByDevice(groupByDeviceType()); // Counts the number of devices (sort by statuses). Stores output into groupByDevice (via setGroupByDevice)\r\n    setDeviceCounter(device_data.length); // Store the number of devices (determined by length of device_data) into deviceCounter (via setDeviceCounter)\r\n    setNetworkDetails(networkData[0]); // Store the network details (determined by networkData[0]) into networkDetails (via setNetworkDetails)\r\n    getData(); // Retrieves alerts data from JSON Server and stores output into alertData (via setAlertData())\r\n  }, []);\r\n\r\n  // getData() function that utilises the fetch API to retrieve data from the JSON Server\r\n  // After data is retrieved, data is stored in alertData (via setAlertData)\r\n  const getData = async () => {\r\n    await fetch(\"http://localhost:3001/alerts\")\r\n      .then((response) => response.json())\r\n      .then((data) => setAlertData(data))\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  // Function to set the Device Drawer's \"visible\" state to \"true\"\r\n  const openDeviceDrawer = () => {\r\n    setDeviceDrawerStatus(true);\r\n  };\r\n\r\n  // Function to set the Device Drawer's \"visible\" state to \"false\"\r\n  const closeDeviceDrawer = () => {\r\n    setDeviceDrawerStatus(false);\r\n  };\r\n\r\n  // Function to set the Network Drawer's \"visible\" state to \"true\"\r\n  const openNetworkDrawer = () => {\r\n    setNetworkDrawerStatus(true);\r\n  };\r\n\r\n  // Function to set the Network Drawer's \"visible\" state to \"false\"\r\n  const closeNetworkDrawer = () => {\r\n    setNetworkDrawerStatus(false);\r\n  };\r\n\r\n  // Function to open the Network Drawer Component and closes the Device Drawer Component\r\n  // closeDeviceDrawer() - Closes the Device Drawer component\r\n  // openNetworkDrawer() - Opens the Network Drawer Component\r\n  const handleNetworkStatisticsButton = () => {\r\n    closeDeviceDrawer();\r\n    openNetworkDrawer();\r\n  };\r\n\r\n  // Function to sort the devices by statuses\r\n  // Returns array containing the number of devices by statuses\r\n  const groupByDeviceType = () => {\r\n    let result = {};\r\n    for (let i = 0; i < device_data.length; i++) {\r\n      if (!result[device_data[i][\"status\"]]) {\r\n        result[device_data[i][\"status\"]] = 0;\r\n      }\r\n      result[device_data[i][\"status\"]]++;\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // Function that counts the number of adjacent devices connected to the selected network node\r\n  const connectedDeviceCounter = (hoverNode) => {\r\n    let connectedDeviceArray = [];\r\n\r\n    for (let d = 0; d < relation_data.length; d++) {\r\n      if (relation_data[d].source.id === hoverNode.id) {\r\n        connectedDeviceArray.push(relation_data[d].target.id);\r\n      }\r\n      // else if (relation_data[d].target.id === hoverNode.id) {\r\n      //   connectedDeviceArray.push(relation_data[d].source.id);\r\n      // }\r\n    }\r\n    return connectedDeviceArray;\r\n  };\r\n\r\n  // graphUseRef hook to allow data persistence\r\n  const graphUseRef = useRef();\r\n\r\n  // Function to zoom towards the selected network node and opens Device Drawer Component\r\n  // setHoverNode() - Store the selected node's details into the hoverNode (via setHoverNode())\r\n  // openDeviceDrawer() - Opens the Device Drawer Component\r\n  // closeNetworkDrawer() - Closes the Network Drawer Component\r\n  const zoomInNode = useCallback(\r\n    (node) => {\r\n      setHoverNode(node);\r\n      openDeviceDrawer();\r\n      closeNetworkDrawer();\r\n      setDeviceConnected(connectedDeviceCounter(node));\r\n\r\n      //   // Camera distance of node\r\n      //   const distance = 150;\r\n      //   const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\r\n\r\n      //   graphUseRef.current.cameraPosition(\r\n      //     {\r\n      //       x: node.x * distRatio,\r\n      //       y: node.y * distRatio,\r\n      //       z: node.z * distRatio,\r\n      //     }, // new position\r\n      //     node, // lookAt ({ x, y, z })\r\n      //     1500 // ms transition duration\r\n      //   );\r\n      // },\r\n    },\r\n    [graphUseRef]\r\n  );\r\n\r\n  // Function that returns the \"selected\" PC icon based on status\r\n  function selectedNodePC(hoverNode) {\r\n    const iconList = {\r\n      Active: \"assets/online_pc_selected.png\",\r\n      Inactive: \"assets/inactive_pc_selected.png\",\r\n      Offline: \"assets/offline_pc_selected.png\",\r\n    };\r\n\r\n    return iconList[hoverNode.status] ?? \"NA\";\r\n  }\r\n\r\n  // Function that returns the \"selected\" DB icon based on status\r\n  function selectedNodeDB(hoverNode) {\r\n    const iconList = {\r\n      Active: \"assets/online_db_selected.png\",\r\n      Inactive: \"assets/inactive_db_selected.png\",\r\n      Offline: \"assets/offline_db_selected.png\",\r\n    };\r\n\r\n    return iconList[hoverNode.status] ?? \"NA\";\r\n  }\r\n\r\n  // Function that returns the \"selected\" router icon based on status\r\n  function selectedNodeRouter(hoverNode) {\r\n    const iconList = {\r\n      Active: \"assets/online_router_selected.png\",\r\n      Inactive: \"assets/inactive_router_selected.png\",\r\n      Offline: \"assets/offline_router_selected.png\",\r\n    };\r\n\r\n    return iconList[hoverNode.status] ?? \"NA\";\r\n  }\r\n\r\n  // For updating of \"selected\" icons only\r\n  // Function that runs the respective function (based on device type)\r\n  // Returns icon URL based on device and status\r\n  function selectedNodeDeviceType(hoverNode) {\r\n    const deviceList = {\r\n      DB: selectedNodeDB(hoverNode),\r\n      PC: selectedNodePC(hoverNode),\r\n      Router: selectedNodeRouter(hoverNode),\r\n    };\r\n\r\n    return deviceList[hoverNode.type];\r\n  }\r\n\r\n  // Function that returns the DB icon based on status\r\n  function nodeDB(hoverNode) {\r\n    const iconList = {\r\n      Active: \"assets/online_db.png\",\r\n      Inactive: \"assets/inactive_db.png\",\r\n      Offline: \"assets/offline_db.png\",\r\n    };\r\n\r\n    return iconList[hoverNode.status] ?? \"NA\";\r\n  }\r\n\r\n  // Function that returns the PC icon based on status\r\n  function nodePC(hoverNode) {\r\n    const iconList = {\r\n      Active: \"assets/online_pc.png\",\r\n      Inactive: \"assets/inactive_pc.png\",\r\n      Offline: \"assets/offline_pc.png\",\r\n    };\r\n\r\n    return iconList[hoverNode.status] ?? \"NA\";\r\n  }\r\n\r\n  // Function that returns the router icon based on status\r\n  function nodeRouter(hoverNode) {\r\n    const iconList = {\r\n      Active: \"assets/online_router.png\",\r\n      Inactive: \"assets/inactive_router.png\",\r\n      Offline: \"assets/offline_router.png\",\r\n    };\r\n\r\n    return iconList[hoverNode.status] ?? \"NA\";\r\n  }\r\n\r\n  // For updating of \"non-selected\" icons only\r\n  // Function that runs the respective function (based on device type)\r\n  // Returns icon URL based on device and status\r\n  function nodeDeviceType(hoverNode) {\r\n    const deviceList = {\r\n      DB: nodeDB(hoverNode),\r\n      PC: nodePC(hoverNode),\r\n      Router: nodeRouter(hoverNode),\r\n    };\r\n\r\n    return deviceList[hoverNode.type];\r\n  }\r\n\r\n  // Function that updates all the icons in the Network Topology Graph Component\r\n  const updateNodeIcons = useCallback(\r\n    (node) => {\r\n      let imgTexture = null; // Resets the imgTexture (image used for icon design)\r\n\r\n      // Update \"selected\" network node icon\r\n      if (node === hoverNode)\r\n        imgTexture = new THREE.TextureLoader().load(\r\n          selectedNodeDeviceType(node)\r\n        );\r\n      // Update other network node icon (not \"selected\")\r\n      else imgTexture = new THREE.TextureLoader().load(nodeDeviceType(node));\r\n\r\n      // Rendering of the sprite via THREE\r\n      const material = new THREE.SpriteMaterial({ map: imgTexture });\r\n      const sprite = new THREE.Sprite(material);\r\n      sprite.scale.set(12, 12);\r\n      return sprite;\r\n    },\r\n    [hoverNode]\r\n  );\r\n\r\n  // UseEffect hook to listen to changes to popoverSelectedNode\r\n  // The popoverSelectedNode variable is changed when user selects an IP address from the popover (Connected Devices List)\r\n  useEffect(() => {\r\n    if (popoverSelectedNode.id !== undefined) {\r\n      var newSelectedNode = device_data.find(\r\n        (el) => el.id === popoverSelectedNode.id\r\n      );\r\n      zoomInNode(newSelectedNode);\r\n    }\r\n  }, [popoverSelectedNode]);\r\n\r\n  return (\r\n    <div>\r\n      <Layout>\r\n        {/* Network Topology Graph Component */}\r\n        <ForceGraph3D\r\n          width={window.innerWidth}\r\n          height={window.innerHeight - 1}\r\n          ref={graphUseRef}\r\n          graphData={{\r\n            nodes: device_data,\r\n            links: relation_data,\r\n          }}\r\n          nodeLabel={(node) =>\r\n            `<div style=\"background: #1F1E26; padding: 5px 10px 8px 10px; border-radius: 10px; user-select: none\">\r\n            <span>Name: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>${node.name}</b></span><br/>\r\n            <span>IP Addr: &nbsp;&nbsp;&nbsp;&nbsp;<b>${node.id}</b></span><br/>\r\n            <span>Mac Addr: &nbsp;<b>${node.mac_addr}</b></span>\r\n            </div>`\r\n          }\r\n          linkWidth={1}\r\n          onNodeRightClick={zoomInNode}\r\n          // onNodeHover={handleNodeHover}\r\n          // linkDirectionalParticles={1}\r\n          // linkDirectionalParticleSpeed={0.01}\r\n          // onNodeHover={handleHover}\r\n          // onNodeDragEnd={(node) => {\r\n          //   node.fx = node.x;\r\n          //   node.fy = node.y;\r\n          //   node.fz = node.z;\r\n          // }}\r\n          nodeThreeObject={updateNodeIcons}\r\n        />\r\n      </Layout>\r\n      {/* Show Network Statistics Button */}\r\n      <Affix style={{ position: \"absolute\", top: 120, left: 10, zIndex: 1 }}>\r\n        <Button type=\"primary\" onClick={handleNetworkStatisticsButton}>\r\n          Show Network Statistics\r\n        </Button>\r\n      </Affix>\r\n      {/* Device Drawer Component */}\r\n      <DeviceDrawer\r\n        deviceDrawerStatus={deviceDrawerStatus}\r\n        deviceDetails={hoverNode}\r\n        closeDeviceDrawer={closeDeviceDrawer}\r\n        alertData={alertData}\r\n        deviceConnected={deviceConnected}\r\n        setPopoverSelectedNode={setPopoverSelectedNode}\r\n      />\r\n      {/* Network Drawer Component */}\r\n      <NetworkDrawer\r\n        networkDrawerStatus={networkDrawerStatus}\r\n        networkDetails={networkDetails}\r\n        groupByDevice={groupByDevice}\r\n        deviceCounter={deviceCounter}\r\n        closeNetworkDrawer={closeNetworkDrawer}\r\n        alertData={alertData}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppNetworkTopology;\r\n","C:\\GitHub\\Capstone\\src\\Components\\MenuNavigation.js",["81"],"import React from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Layout, Menu } from \"antd\";\r\nimport { DesktopOutlined } from \"@ant-design/icons\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass NavigationMenu extends React.Component {\r\n  state = {\r\n    current: \"Home\",\r\n  };\r\n\r\n  handleClick = (e) => {\r\n    console.log(\"click \", e);\r\n    this.setState({ current: e.key });\r\n  };\r\n\r\n  render() {\r\n    const { current } = this.state;\r\n    const { Sider } = Layout;\r\n    return (\r\n      <div style={{ position: \"absolute\", zIndex: 1 }}>\r\n        <Layout hasSider>\r\n          <Sider\r\n            style={{\r\n              overflow: \"none\",\r\n              height: \"100vh\",\r\n              position: \"fixed\",\r\n              left: 0,\r\n              top: 0,\r\n              bottom: 0,\r\n            }}\r\n          >\r\n            <Menu\r\n              onClick={this.handleClick}\r\n              defaultSelectedKeys={[\"network\"]}\r\n              // selectedKeys={[current]}\r\n              mode=\"inline\"\r\n            >\r\n              <Menu.Item key=\"network\" icon={<DesktopOutlined />}>\r\n                <Link to=\"/\">\r\n                  <span>Network Topology</span>\r\n                </Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"manage\" icon={<DesktopOutlined />}>\r\n                <Link to=\"/manage\">\r\n                  <span>Manage Devices</span>\r\n                </Link>\r\n              </Menu.Item>\r\n            </Menu>\r\n          </Sider>\r\n        </Layout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavigationMenu;\r\n","C:\\GitHub\\Capstone\\src\\Components\\DrawerNetwork.js",["82","83"],"import React, { useState } from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Drawer, Button, Col, Row } from \"antd\";\r\nimport TestCard from \"./Card\";\r\nimport EmergingThreatsCard from \"./CardEmergingThreats\";\r\nimport StatisticsBoxes from \"./Statistics\";\r\nimport ThreatsTable from \"./TableThreats\";\r\nimport relation_data from \"./Data/relation_data.json\";\r\n\r\nfunction NetworkDrawer({\r\n  networkDetails,\r\n  networkDrawerStatus,\r\n  closeNetworkDrawer,\r\n  groupByDevice,\r\n  deviceCounter,\r\n  alertData,\r\n}) {\r\n  let thisIsTest = [];\r\n  for (let a = 0; a < relation_data.length; a++) {\r\n    thisIsTest.push(relation_data[a][\"source\"]);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Drawer\r\n        title={\r\n          <div>\r\n            Home / <b>Network Statistics</b>\r\n          </div>\r\n        }\r\n        style={{ color: \"white\" }}\r\n        maskStyle={{\r\n          color: \"white\",\r\n        }}\r\n        headerStyle={{\r\n          backgroundColor: \"#16151B\",\r\n          borderBottomWidth: 0,\r\n        }}\r\n        bodyStyle={{\r\n          backgroundColor: \"#16151B\",\r\n          color: \"white\",\r\n        }}\r\n        width={\"650px\"}\r\n        placement=\"right\"\r\n        closable={true}\r\n        mask={false}\r\n        keyboard={true}\r\n        visible={networkDrawerStatus}\r\n        onClose={closeNetworkDrawer}\r\n      >\r\n        <div>\r\n          <Row gutter={25}>\r\n            <Col span={12}>\r\n              <TestCard networkDetails={networkDetails} alertData={alertData} />\r\n            </Col>\r\n            <Col span={12}>\r\n              <EmergingThreatsCard alertData={alertData} />\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n        <br />\r\n        <StatisticsBoxes\r\n          networkDeviceCounter={deviceCounter}\r\n          networkStatisticsObject={groupByDevice}\r\n        />\r\n        <br />\r\n        <ThreatsTable alertData={alertData} />\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NetworkDrawer;\r\n\r\n// <div\r\n//       style={{\r\n//         display: \"block\",\r\n//         width: 700,\r\n//         padding: 30,\r\n//       }}\r\n//     >\r\n//       <h4>Test Drawer</h4>\r\n//       <Button\r\n//         type=\"primary\"\r\n//         onClick={() => {\r\n//           setVisible(true);\r\n//         }}\r\n//       >\r\n//         Open Drawer\r\n//       </Button>\r\n//       <br />\r\n//       <br />\r\n//       <Button\r\n//         type=\"primary\"\r\n//         onClick={() => {\r\n//           setVisible(false);\r\n//         }}\r\n//       >\r\n//         Close Drawer\r\n//       </Button>\r\n","C:\\GitHub\\Capstone\\src\\Components\\DrawerManage.js",["84","85","86","87"],"import React, { useRef } from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"../CustomCSS.css\";\r\nimport { Drawer, Button, Col, Row } from \"antd\";\r\nimport DeviceManageForm from \"./FormDeviceManage\";\r\n\r\nfunction ManageDrawer({\r\n  manageDrawerStatus,\r\n  manageDeviceDetails,\r\n  closeMangeDeviceDrawer,\r\n  deviceForm,\r\n  updatedFormValues,\r\n}) {\r\n  return (\r\n    <div>\r\n      <Drawer\r\n        title={\r\n          <div>\r\n            Home / <b>Manage Devices</b>\r\n          </div>\r\n        }\r\n        style={{ color: \"white\" }}\r\n        maskStyle={{\r\n          color: \"white\",\r\n        }}\r\n        headerStyle={{\r\n          backgroundColor: \"#16151B\",\r\n          borderBottomWidth: 0,\r\n        }}\r\n        bodyStyle={{\r\n          backgroundColor: \"#16151B\",\r\n          color: \"white\",\r\n        }}\r\n        width={\"500px\"}\r\n        placement=\"right\"\r\n        closable={true}\r\n        mask={false}\r\n        keyboard={true}\r\n        visible={manageDrawerStatus}\r\n        onClose={closeMangeDeviceDrawer}\r\n      >\r\n        <div>\r\n          <h2 className=\"manage-device-drawer-title\">\r\n            Edit Device Information ({manageDeviceDetails.id})\r\n          </h2>\r\n          <br />\r\n          <DeviceManageForm\r\n            manageDeviceDetails={manageDeviceDetails}\r\n            deviceForm={deviceForm}\r\n            updatedFormValues={updatedFormValues}\r\n          />\r\n        </div>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ManageDrawer;\r\n","C:\\GitHub\\Capstone\\src\\Components\\DrawerDevice.js",["88","89","90"],"import React, { useEffect, useState } from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Drawer, Button, Col, Row } from \"antd\";\r\nimport DeviceCard from \"./Card_Device\";\r\nimport EmergingThreatsCard from \"./CardEmergingThreats\";\r\nimport StatsDevice from \"./StatisticsDevice\";\r\nimport ThreatsTable from \"./TableThreats\";\r\n\r\n// Function to render the Drawer component to display the device information\r\nfunction DeviceDrawer({\r\n  deviceDetails,\r\n  deviceDrawerStatus,\r\n  closeDeviceDrawer,\r\n  alertData,\r\n  deviceConnected,\r\n  setPopoverSelectedNode,\r\n}) {\r\n  return (\r\n    <div>\r\n      <Drawer\r\n        title={\r\n          <div>\r\n            Home / <b>Device Statistics</b>\r\n          </div>\r\n        }\r\n        style={{ color: \"white\" }}\r\n        headerStyle={{\r\n          backgroundColor: \"#16151B\",\r\n          borderBlockColor: \"#16151B\",\r\n        }}\r\n        bodyStyle={{\r\n          backgroundColor: \"#16151B\",\r\n          color: \"white\",\r\n        }}\r\n        width={\"650px\"}\r\n        placement=\"right\"\r\n        closable={true}\r\n        mask={false}\r\n        keyboard={true}\r\n        visible={deviceDrawerStatus}\r\n        onClose={closeDeviceDrawer}\r\n      >\r\n        <div>\r\n          <Row gutter={25}>\r\n            <Col span={12}>\r\n              <DeviceCard\r\n                deviceDetails={deviceDetails}\r\n                deviceConnected={deviceConnected}\r\n                setPopoverSelectedNode={setPopoverSelectedNode}\r\n              />\r\n            </Col>\r\n            <Col span={12}>\r\n              <EmergingThreatsCard alertData={alertData} />\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n        <br />\r\n        <StatsDevice deviceDetails={deviceDetails} />\r\n        <br />\r\n        <ThreatsTable alertData={alertData} deviceDetails={deviceDetails} />\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeviceDrawer;\r\n","C:\\GitHub\\Capstone\\src\\Components\\CardEmergingThreats.js",[],"C:\\GitHub\\Capstone\\src\\Components\\Card.js",[],"C:\\GitHub\\Capstone\\src\\Components\\Statistics.js",[],"C:\\GitHub\\Capstone\\src\\Components\\TableThreats.js",["91"],"import { Table } from \"antd\";\r\n\r\nfunction ThreatsTable({ alertData, deviceDetails }) {\r\n  var date;\r\n\r\n  const month_array = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"Aug\",\r\n    \"Sept\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ];\r\n\r\n  if (deviceDetails !== undefined) {\r\n    alertData = alertData.filter((record) =>\r\n      record.destination.includes(deviceDetails.id)\r\n    );\r\n  }\r\n\r\n  Object.keys(alertData).forEach((key) => {\r\n    date = new Date(alertData[key][\"timestamp\"]);\r\n    alertData[key][\"timestamp\"] =\r\n      date.getDate() +\r\n      \" \" +\r\n      month_array[date.getMonth()] +\r\n      \" \" +\r\n      date.getFullYear() +\r\n      \" \" +\r\n      (date.getHours() < 10 ? \"0\" + date.getHours() : date.getHours()) +\r\n      \":\" +\r\n      (date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes()) +\r\n      \":\" +\r\n      (date.getSeconds() < 10 ? \"0\" + date.getSeconds() : date.getSeconds());\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <h3 style={{ color: \"white\" }}>Detected Cyber Security Threats</h3>\r\n      <Table\r\n        dataSource={alertData}\r\n        columns={columns}\r\n        pagination={{\r\n          defaultPageSize: 10,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst dataSource = [];\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Timestamp\",\r\n    dataIndex: \"timestamp\",\r\n    key: \"timestamp\",\r\n    sorter: (a, b) => a.timestamp - b.timestamp,\r\n  },\r\n  {\r\n    title: \"Source\",\r\n    dataIndex: \"source\",\r\n    key: \"source\",\r\n  },\r\n  {\r\n    title: \"Destination\",\r\n    dataIndex: \"destination\",\r\n    key: \"destination\",\r\n  },\r\n  {\r\n    title: \"Threat Info\",\r\n    dataIndex: \"threatinfo\",\r\n    render: (text, record) => (\r\n      <span>\r\n        <b>Threat Category: </b>\r\n        {record.threat_category} <br />\r\n        <b>Threat Name: </b>\r\n        {record.threat_name} <br />\r\n      </span>\r\n    ),\r\n    key: \"threat\",\r\n    filters: [\r\n      {\r\n        text: \"Policy Violation\",\r\n        value: \"Policy Violation\",\r\n      },\r\n      {\r\n        text: \"Suspicious\",\r\n        value: \"Suspicious\",\r\n      },\r\n    ],\r\n    onFilter: (value, record) => record.threat_category.includes(value),\r\n    filterMode: \"tree\",\r\n    filterSearch: true,\r\n  },\r\n  // {\r\n  //   title: \"Threat Type\",\r\n  //   dataIndex: \"threat\",\r\n  //   key: \"threat\",\r\n  //   filters: [\r\n  //     {\r\n  //       text: \"Trojan\",\r\n  //       value: \"Trojan\",\r\n  //     },\r\n  //     {\r\n  //       text: \"Rootkit\",\r\n  //       value: \"Rootkit\",\r\n  //     },\r\n  //   ],\r\n  //   onFilter: (value, record) => record.threat.includes(value),\r\n  //   filterMode: \"tree\",\r\n  //   filterSearch: true,\r\n  // },\r\n];\r\n\r\nexport default ThreatsTable;\r\n","C:\\GitHub\\Capstone\\src\\Components\\StatisticsDevice.js",[],"C:\\GitHub\\Capstone\\src\\Components\\FormDeviceManage.js",[],"C:\\GitHub\\Capstone\\src\\Components\\Card_Device.js",["92"],"import { Card, Space, Popover } from \"antd\";\r\n\r\n// Function to display the statistical data of devices\r\n// deviceDetails - Contains the device statistical data\r\n// deviceConnected - Contains the number of devices the node is connected to\r\nfunction DeviceCard({\r\n  deviceDetails,\r\n  deviceConnected,\r\n  setPopoverSelectedNode,\r\n}) {\r\n  return (\r\n    <div>\r\n      <Card\r\n        headStyle={{\r\n          color: \"white\",\r\n          background: \"#3E3D40\",\r\n        }}\r\n        title={<div>Device Details</div>}\r\n        style={{\r\n          width: \"100%\",\r\n          overflow: \"hidden\",\r\n          color: \"white\",\r\n          margin: \"0 auto\",\r\n        }}\r\n        bodyStyle={{ background: \"#1F1E26\" }}\r\n      >\r\n        <Space size={28}>\r\n          <p>Device Name</p>{\" \"}\r\n          <p>\r\n            <b>{deviceDetails.name}</b>\r\n          </p>\r\n        </Space>\r\n        <Space size={32}>\r\n          <p>Device Type</p>{\" \"}\r\n          <p>\r\n            <b>{deviceDetails.type}</b>\r\n          </p>\r\n        </Space>\r\n        <Space size={35}>\r\n          <p>OS Version</p>{\" \"}\r\n          <p>\r\n            <b>{deviceDetails.os}</b>\r\n          </p>\r\n        </Space>\r\n        <Space size={29}>\r\n          <p>Mac Address</p>{\" \"}\r\n          <p>\r\n            <b>{deviceDetails.mac_addr}</b>\r\n          </p>\r\n        </Space>\r\n        <Space size={18}>\r\n          <p id=\"abc\" style={{ whiteSpace: \"nowrap\" }}>\r\n            Connected Device(s)\r\n          </p>\r\n          <Space size={9}>\r\n            <Popover\r\n              title={\"Adjacent Device List\"}\r\n              placement={\"bottomLeft\"}\r\n              content={\r\n                deviceConnected.length > 0\r\n                  ? deviceConnected.map((id) => (\r\n                      <p>\r\n                        <a\r\n                          onClick={() => {\r\n                            setPopoverSelectedNode({ id });\r\n                          }}\r\n                        >\r\n                          {id}\r\n                        </a>\r\n                      </p>\r\n                    ))\r\n                  : null\r\n              }\r\n              trigger=\"hover\"\r\n            >\r\n              <p>\r\n                <b>\r\n                  {deviceConnected.length > 0 ? deviceConnected.length : 0}{\" \"}\r\n                  device(s)\r\n                </b>\r\n              </p>\r\n            </Popover>\r\n          </Space>\r\n        </Space>\r\n      </Card>\r\n      <Card\r\n        headStyle={{\r\n          color: deviceDetails.status !== \"Offline\" ? \"#16151b\" : \"white\",\r\n          textAlign: \"center\",\r\n          background:\r\n            deviceDetails.status === \"Active\"\r\n              ? \"#63D196\"\r\n              : deviceDetails.status === \"Inactive\"\r\n              ? \"#F9D14D\"\r\n              : \"#F1544D\",\r\n        }}\r\n        title={\r\n          <div>\r\n            {deviceDetails.status === \"Active\" ? (\r\n              <b>CONNECTED DEVICE</b>\r\n            ) : deviceDetails.status === \"Inactive\" ? (\r\n              <b>INACTIVE DEVICE</b>\r\n            ) : (\r\n              <b>DEVICE IS OFFLINE</b>\r\n            )}\r\n          </div>\r\n        }\r\n        style={{\r\n          width: \"100%\",\r\n          overflow: \"hidden\",\r\n          color: \"white\",\r\n          margin: \"0 auto\",\r\n        }}\r\n        bodyStyle={{ background: \"#16151b\" }}\r\n      ></Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeviceCard;\r\n",{"ruleId":"93","severity":1,"message":"94","line":2,"column":8,"nodeType":"95","messageId":"96","endLine":2,"endColumn":21},{"ruleId":"97","severity":1,"message":"98","line":25,"column":11,"nodeType":"99","endLine":25,"endColumn":50},{"ruleId":"97","severity":1,"message":"98","line":33,"column":13,"nodeType":"99","endLine":33,"endColumn":16},{"ruleId":"100","severity":1,"message":"101","line":131,"column":5,"nodeType":"102","endLine":131,"endColumn":18,"suggestions":"103"},{"ruleId":"100","severity":1,"message":"104","line":245,"column":5,"nodeType":"102","endLine":245,"endColumn":16,"suggestions":"105"},{"ruleId":"100","severity":1,"message":"106","line":257,"column":6,"nodeType":"102","endLine":257,"endColumn":27,"suggestions":"107"},{"ruleId":"93","severity":1,"message":"108","line":18,"column":13,"nodeType":"95","messageId":"96","endLine":18,"endColumn":20},{"ruleId":"93","severity":1,"message":"109","line":1,"column":17,"nodeType":"95","messageId":"96","endLine":1,"endColumn":25},{"ruleId":"93","severity":1,"message":"110","line":3,"column":18,"nodeType":"95","messageId":"96","endLine":3,"endColumn":24},{"ruleId":"93","severity":1,"message":"111","line":1,"column":17,"nodeType":"95","messageId":"96","endLine":1,"endColumn":23},{"ruleId":"93","severity":1,"message":"110","line":4,"column":18,"nodeType":"95","messageId":"96","endLine":4,"endColumn":24},{"ruleId":"93","severity":1,"message":"112","line":4,"column":26,"nodeType":"95","messageId":"96","endLine":4,"endColumn":29},{"ruleId":"93","severity":1,"message":"113","line":4,"column":31,"nodeType":"95","messageId":"96","endLine":4,"endColumn":34},{"ruleId":"93","severity":1,"message":"114","line":1,"column":17,"nodeType":"95","messageId":"96","endLine":1,"endColumn":26},{"ruleId":"93","severity":1,"message":"109","line":1,"column":28,"nodeType":"95","messageId":"96","endLine":1,"endColumn":36},{"ruleId":"93","severity":1,"message":"110","line":3,"column":18,"nodeType":"95","messageId":"96","endLine":3,"endColumn":24},{"ruleId":"93","severity":1,"message":"115","line":57,"column":7,"nodeType":"95","messageId":"96","endLine":57,"endColumn":17},{"ruleId":"97","severity":1,"message":"98","line":63,"column":25,"nodeType":"99","endLine":67,"endColumn":26},"no-unused-vars","'NetworkDrawer' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useCallback has an unnecessary dependency: 'graphUseRef'. Either exclude it or remove the dependency array.","ArrayExpression",["116"],"React Hook useCallback has missing dependencies: 'nodeDeviceType' and 'selectedNodeDeviceType'. Either include them or remove the dependency array.",["117"],"React Hook useEffect has a missing dependency: 'zoomInNode'. Either include it or remove the dependency array.",["118"],"'current' is assigned a value but never used.","'useState' is defined but never used.","'Button' is defined but never used.","'useRef' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'useEffect' is defined but never used.","'dataSource' is assigned a value but never used.",{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},"Update the dependencies array to be: []",{"range":"125","text":"126"},"Update the dependencies array to be: [hoverNode, nodeDeviceType, selectedNodeDeviceType]",{"range":"127","text":"128"},"Update the dependencies array to be: [popoverSelectedNode, zoomInNode]",{"range":"129","text":"130"},[5803,5816],"[]",[9393,9404],"[hoverNode, nodeDeviceType, selectedNodeDeviceType]",[9828,9849],"[popoverSelectedNode, zoomInNode]"]