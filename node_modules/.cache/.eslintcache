[{"C:\\SourceTree\\capstone-project\\src\\index.js":"1","C:\\SourceTree\\capstone-project\\src\\App.js":"2","C:\\SourceTree\\capstone-project\\src\\reportWebVitals.js":"3","C:\\SourceTree\\capstone-project\\src\\NetworkTopology.js":"4","C:\\SourceTree\\capstone-project\\src\\Components\\MenuNavigation.js":"5","C:\\SourceTree\\capstone-project\\src\\Components\\DrawerNetwork.js":"6","C:\\SourceTree\\capstone-project\\src\\Components\\TableThreats.js":"7","C:\\SourceTree\\capstone-project\\src\\Components\\CardEmergingThreats.js":"8","C:\\SourceTree\\capstone-project\\src\\Components\\Statistics.js":"9","C:\\SourceTree\\capstone-project\\src\\Components\\DrawerDevice.js":"10","C:\\SourceTree\\capstone-project\\src\\Components\\Card_Device.js":"11","C:\\SourceTree\\capstone-project\\src\\Components\\StatisticsDevice.js":"12","C:\\SourceTree\\capstone-project\\src\\ManageDevices.js":"13","C:\\SourceTree\\capstone-project\\src\\Components\\DrawerManage.js":"14","C:\\SourceTree\\capstone-project\\src\\Components\\FormDeviceManage.js":"15","C:\\SourceTree\\capstone-project\\src\\Components\\Data\\AlertDataGenerator.js":"16","C:\\SourceTree\\capstone-project\\src\\Components\\Card.js":"17"},{"size":500,"mtime":1637199890814,"results":"18","hashOfConfig":"19"},{"size":760,"mtime":1648431836808,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1637199890934,"results":"21","hashOfConfig":"19"},{"size":12063,"mtime":1650871223862,"results":"22","hashOfConfig":"19"},{"size":1537,"mtime":1648433939513,"results":"23","hashOfConfig":"19"},{"size":2362,"mtime":1649324002619,"results":"24","hashOfConfig":"19"},{"size":2661,"mtime":1650877135448,"results":"25","hashOfConfig":"19"},{"size":3515,"mtime":1650261679506,"results":"26","hashOfConfig":"19"},{"size":1975,"mtime":1647412049521,"results":"27","hashOfConfig":"19"},{"size":1777,"mtime":1650360115384,"results":"28","hashOfConfig":"19"},{"size":3335,"mtime":1650358190516,"results":"29","hashOfConfig":"19"},{"size":1561,"mtime":1649915577847,"results":"30","hashOfConfig":"19"},{"size":5324,"mtime":1650877115472,"results":"31","hashOfConfig":"19"},{"size":1388,"mtime":1645084392657,"results":"32","hashOfConfig":"19"},{"size":4521,"mtime":1650877557961,"results":"33","hashOfConfig":"19"},{"size":1593,"mtime":1648456833158,"results":"34","hashOfConfig":"19"},{"size":2035,"mtime":1649226727509,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1fyhh4p",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"38"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\SourceTree\\capstone-project\\src\\index.js",[],["80","81"],"C:\\SourceTree\\capstone-project\\src\\App.js",["82"],"import \"antd/dist/antd.css\";\nimport NetworkDrawer from \"./Components/DrawerNetwork\";\nimport NavigationMenu from \"./Components/MenuNavigation\";\nimport AppNetworkTopology from \"./NetworkTopology\";\nimport AppDeviceManager from \"./ManageDevices\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <div>\n          <NavigationMenu />\n          <Routes>\n            {/* <Route path=\"/\" element={<NetworkDrawer />} /> */}\n            <Route path=\"/\" element={<AppNetworkTopology />} />\n            <Route path=\"/manage\" element={<AppDeviceManager />} />\n          </Routes>\n        </div>\n      </Router>\n      {/* <AppNetworkTopology /> */}\n    </div>\n  );\n}\n\nexport default App;\n","C:\\SourceTree\\capstone-project\\src\\reportWebVitals.js",[],"C:\\SourceTree\\capstone-project\\src\\NetworkTopology.js",["83","84","85"],"import \"antd/dist/antd.css\";\r\nimport { Layout, Button, Affix } from \"antd\";\r\n\r\nimport React, { useState, useRef, useCallback, useEffect } from \"react\";\r\n\r\nimport { ForceGraph3D } from \"react-force-graph\";\r\nimport * as THREE from \"three\";\r\n\r\nimport networkData from \"./Components/Data/network.json\";\r\nimport device_data from \"./Components/Data/device_data.json\";\r\nimport relation_data from \"./Components/Data/relation_data.json\";\r\n\r\nimport DeviceDrawer from \"./Components/DrawerDevice\";\r\nimport NetworkDrawer from \"./Components/DrawerNetwork\";\r\n\r\n// Functional Component for Network Topology Graph Page UI\r\nfunction AppNetworkTopology() {\r\n  // UseState() functions for maintaining the states\r\n  const [deviceDrawerStatus, setDeviceDrawerStatus] = useState(false); // To open / close the Device Drawer component\r\n  const [networkDrawerStatus, setNetworkDrawerStatus] = useState(false); // To open / close the Network Drawer component\r\n  const [networkDetails, setNetworkDetails] = useState({}); // To store / set the network details for rendering\r\n  const [groupByDevice, setGroupByDevice] = useState(); // To store the number of devices by device type (for statistical boxes)\r\n  const [deviceCounter, setDeviceCounter] = useState(); // To store the total number devices (for statistical boxes)\r\n  const [hoverNode, setHoverNode] = useState(); // To store the details of the selected network node (Network Topology Graph)\r\n  const [deviceConnected, setDeviceConnected] = useState({}); // To store the adjacent devices (after user click on the network node)\r\n  const [alertData, setAlertData] = useState([]); // To store the alerts information\r\n  const [popoverSelectedNode, setPopoverSelectedNode] = useState({}); // To store the selected network node (selected from popover)\r\n\r\n  // Run functions onload (similar to componentDidMount)\r\n  useEffect(() => {\r\n    setGroupByDevice(groupByDeviceType()); // Counts the number of devices (sort by statuses). Stores output into groupByDevice (via setGroupByDevice)\r\n    setDeviceCounter(device_data.length); // Store the number of devices (determined by length of device_data) into deviceCounter (via setDeviceCounter)\r\n    setNetworkDetails(networkData[0]); // Store the network details (determined by networkData[0]) into networkDetails (via setNetworkDetails)\r\n    getData(); // Retrieves alerts data from JSON Server and stores output into alertData (via setAlertData())\r\n  }, []);\r\n\r\n  // getData() function that utilises the fetch API to retrieve data from the JSON Server\r\n  // After data is retrieved, data is stored in alertData (via setAlertData)\r\n  const getData = async () => {\r\n    await fetch(\"http://localhost:3001/alerts\")\r\n      .then((response) => response.json())\r\n      .then((data) => setAlertData(data))\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  // Function to set the Device Drawer's \"visible\" state to \"true\"\r\n  const openDeviceDrawer = () => {\r\n    setDeviceDrawerStatus(true);\r\n  };\r\n\r\n  // Function to set the Device Drawer's \"visible\" state to \"false\"\r\n  const closeDeviceDrawer = () => {\r\n    setDeviceDrawerStatus(false);\r\n  };\r\n\r\n  // Function to set the Network Drawer's \"visible\" state to \"true\"\r\n  const openNetworkDrawer = () => {\r\n    setNetworkDrawerStatus(true);\r\n  };\r\n\r\n  // Function to set the Network Drawer's \"visible\" state to \"false\"\r\n  const closeNetworkDrawer = () => {\r\n    setNetworkDrawerStatus(false);\r\n  };\r\n\r\n  // Function to open the Network Drawer Component and closes the Device Drawer Component\r\n  // closeDeviceDrawer() - Closes the Device Drawer component\r\n  // openNetworkDrawer() - Opens the Network Drawer Component\r\n  const handleNetworkStatisticsButton = () => {\r\n    closeDeviceDrawer();\r\n    openNetworkDrawer();\r\n  };\r\n\r\n  // Function to sort the devices by statuses\r\n  // Returns array containing the number of devices by statuses\r\n  const groupByDeviceType = () => {\r\n    let result = {};\r\n    for (let i = 0; i < device_data.length; i++) {\r\n      if (!result[device_data[i][\"status\"]]) {\r\n        result[device_data[i][\"status\"]] = 0;\r\n      }\r\n      result[device_data[i][\"status\"]]++;\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // Function that counts the number of adjacent devices connected to the selected network node\r\n  const connectedDeviceCounter = (hoverNode) => {\r\n    let connectedDeviceArray = [];\r\n\r\n    for (let d = 0; d < relation_data.length; d++) {\r\n      if (relation_data[d].source.id === hoverNode.id) {\r\n        connectedDeviceArray.push(relation_data[d].target.id);\r\n      }\r\n      // else if (relation_data[d].target.id === hoverNode.id) {\r\n      //   connectedDeviceArray.push(relation_data[d].source.id);\r\n      // }\r\n    }\r\n    return connectedDeviceArray;\r\n  };\r\n\r\n  // graphUseRef hook to allow data persistence\r\n  const graphUseRef = useRef();\r\n\r\n  // Function to zoom towards the selected network node and opens Device Drawer Component\r\n  // setHoverNode() - Store the selected node's details into the hoverNode (via setHoverNode())\r\n  // openDeviceDrawer() - Opens the Device Drawer Component\r\n  // closeNetworkDrawer() - Closes the Network Drawer Component\r\n  const zoomInNode = useCallback(\r\n    (node) => {\r\n      setHoverNode(node);\r\n      openDeviceDrawer();\r\n      closeNetworkDrawer();\r\n      setDeviceConnected(connectedDeviceCounter(node));\r\n\r\n      //   // Camera distance of node\r\n      //   const distance = 150;\r\n      //   const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\r\n\r\n      //   graphUseRef.current.cameraPosition(\r\n      //     {\r\n      //       x: node.x * distRatio,\r\n      //       y: node.y * distRatio,\r\n      //       z: node.z * distRatio,\r\n      //     }, // new position\r\n      //     node, // lookAt ({ x, y, z })\r\n      //     1500 // ms transition duration\r\n      //   );\r\n      // },\r\n    },\r\n    [graphUseRef]\r\n  );\r\n\r\n  // Function that returns the \"selected\" PC icon based on status\r\n  function selectedNodePC(hoverNode) {\r\n    const iconList = {\r\n      Active: \"assets/online_pc_selected.png\",\r\n      Inactive: \"assets/inactive_pc_selected.png\",\r\n      Offline: \"assets/offline_pc_selected.png\",\r\n    };\r\n\r\n    return iconList[hoverNode.status] ?? \"NA\";\r\n  }\r\n\r\n  // Function that returns the \"selected\" DB icon based on status\r\n  function selectedNodeDB(hoverNode) {\r\n    const iconList = {\r\n      Active: \"assets/online_db_selected.png\",\r\n      Inactive: \"assets/inactive_db_selected.png\",\r\n      Offline: \"assets/offline_db_selected.png\",\r\n    };\r\n\r\n    return iconList[hoverNode.status] ?? \"NA\";\r\n  }\r\n\r\n  // Function that returns the \"selected\" router icon based on status\r\n  function selectedNodeRouter(hoverNode) {\r\n    const iconList = {\r\n      Active: \"assets/online_router_selected.png\",\r\n      Inactive: \"assets/inactive_router_selected.png\",\r\n      Offline: \"assets/offline_router_selected.png\",\r\n    };\r\n\r\n    return iconList[hoverNode.status] ?? \"NA\";\r\n  }\r\n\r\n  // For updating of \"selected\" icons only\r\n  // Function that runs the respective function (based on device type)\r\n  // Returns icon URL based on device and status\r\n  function selectedNodeDeviceType(hoverNode) {\r\n    const deviceList = {\r\n      DB: selectedNodeDB(hoverNode),\r\n      PC: selectedNodePC(hoverNode),\r\n      Router: selectedNodeRouter(hoverNode),\r\n    };\r\n\r\n    return deviceList[hoverNode.type];\r\n  }\r\n\r\n  // Function that returns the DB icon based on status\r\n  function nodeDB(hoverNode) {\r\n    const iconList = {\r\n      Active: \"assets/online_db.png\",\r\n      Inactive: \"assets/inactive_db.png\",\r\n      Offline: \"assets/offline_db.png\",\r\n    };\r\n\r\n    return iconList[hoverNode.status] ?? \"NA\";\r\n  }\r\n\r\n  // Function that returns the PC icon based on status\r\n  function nodePC(hoverNode) {\r\n    const iconList = {\r\n      Active: \"assets/online_pc.png\",\r\n      Inactive: \"assets/inactive_pc.png\",\r\n      Offline: \"assets/offline_pc.png\",\r\n    };\r\n\r\n    return iconList[hoverNode.status] ?? \"NA\";\r\n  }\r\n\r\n  // Function that returns the router icon based on status\r\n  function nodeRouter(hoverNode) {\r\n    const iconList = {\r\n      Active: \"assets/online_router.png\",\r\n      Inactive: \"assets/inactive_router.png\",\r\n      Offline: \"assets/offline_router.png\",\r\n    };\r\n\r\n    return iconList[hoverNode.status] ?? \"NA\";\r\n  }\r\n\r\n  // For updating of \"non-selected\" icons only\r\n  // Function that runs the respective function (based on device type)\r\n  // Returns icon URL based on device and status\r\n  function nodeDeviceType(hoverNode) {\r\n    const deviceList = {\r\n      DB: nodeDB(hoverNode),\r\n      PC: nodePC(hoverNode),\r\n      Router: nodeRouter(hoverNode),\r\n    };\r\n\r\n    return deviceList[hoverNode.type];\r\n  }\r\n\r\n  // Function that updates all the icons in the Network Topology Graph Component\r\n  const updateNodeIcons = useCallback(\r\n    (node) => {\r\n      let imgTexture = null; // Resets the imgTexture (image used for icon design)\r\n\r\n      // Update \"selected\" network node icon\r\n      if (node === hoverNode)\r\n        imgTexture = new THREE.TextureLoader().load(\r\n          selectedNodeDeviceType(node)\r\n        );\r\n      // Update other network node icon (not \"selected\")\r\n      else imgTexture = new THREE.TextureLoader().load(nodeDeviceType(node));\r\n\r\n      // Rendering of the sprite via THREE\r\n      const material = new THREE.SpriteMaterial({ map: imgTexture });\r\n      const sprite = new THREE.Sprite(material);\r\n      sprite.scale.set(12, 12);\r\n      return sprite;\r\n    },\r\n    [hoverNode]\r\n  );\r\n\r\n  // UseEffect hook to listen to changes to popoverSelectedNode\r\n  // The popoverSelectedNode variable is changed when user selects an IP address from the popover (Connected Devices List)\r\n  useEffect(() => {\r\n    if (popoverSelectedNode.id !== undefined) {\r\n      var newSelectedNode = device_data.find(\r\n        (el) => el.id === popoverSelectedNode.id\r\n      );\r\n      zoomInNode(newSelectedNode);\r\n    }\r\n  }, [popoverSelectedNode]);\r\n\r\n  return (\r\n    <div>\r\n      <Layout>\r\n        {/* Network Topology Graph Component */}\r\n        <ForceGraph3D\r\n          width={window.innerWidth}\r\n          height={window.innerHeight - 1}\r\n          ref={graphUseRef}\r\n          graphData={{\r\n            nodes: device_data,\r\n            links: relation_data,\r\n          }}\r\n          nodeLabel={(node) =>\r\n            `<div style=\"background: #1F1E26; padding: 5px 10px 8px 10px; border-radius: 10px; user-select: none\">\r\n            <span>Name: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>${node.name}</b></span><br/>\r\n            <span>IP Addr: &nbsp;&nbsp;&nbsp;&nbsp;<b>${node.id}</b></span><br/>\r\n            <span>Mac Addr: &nbsp;<b>${node.mac_addr}</b></span>\r\n            </div>`\r\n          }\r\n          linkWidth={1}\r\n          onNodeRightClick={zoomInNode}\r\n          // onNodeHover={handleNodeHover}\r\n          // linkDirectionalParticles={1}\r\n          // linkDirectionalParticleSpeed={0.01}\r\n          // onNodeHover={handleHover}\r\n          // onNodeDragEnd={(node) => {\r\n          //   node.fx = node.x;\r\n          //   node.fy = node.y;\r\n          //   node.fz = node.z;\r\n          // }}\r\n          nodeThreeObject={updateNodeIcons}\r\n        />\r\n      </Layout>\r\n      {/* Show Network Statistics Button */}\r\n      <Affix style={{ position: \"absolute\", top: 120, left: 10, zIndex: 1 }}>\r\n        <Button type=\"primary\" onClick={handleNetworkStatisticsButton}>\r\n          Show Network Statistics\r\n        </Button>\r\n      </Affix>\r\n      {/* Device Drawer Component */}\r\n      <DeviceDrawer\r\n        deviceDrawerStatus={deviceDrawerStatus}\r\n        deviceDetails={hoverNode}\r\n        closeDeviceDrawer={closeDeviceDrawer}\r\n        alertData={alertData}\r\n        deviceConnected={deviceConnected}\r\n        setPopoverSelectedNode={setPopoverSelectedNode}\r\n      />\r\n      {/* Network Drawer Component */}\r\n      <NetworkDrawer\r\n        networkDrawerStatus={networkDrawerStatus}\r\n        networkDetails={networkDetails}\r\n        groupByDevice={groupByDevice}\r\n        deviceCounter={deviceCounter}\r\n        closeNetworkDrawer={closeNetworkDrawer}\r\n        alertData={alertData}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppNetworkTopology;\r\n","C:\\SourceTree\\capstone-project\\src\\Components\\MenuNavigation.js",["86"],"import React from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Layout, Menu } from \"antd\";\r\nimport { DesktopOutlined } from \"@ant-design/icons\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass NavigationMenu extends React.Component {\r\n  state = {\r\n    current: \"Home\",\r\n  };\r\n\r\n  handleClick = (e) => {\r\n    console.log(\"click \", e);\r\n    this.setState({ current: e.key });\r\n  };\r\n\r\n  render() {\r\n    const { current } = this.state;\r\n    const { Sider } = Layout;\r\n    return (\r\n      <div style={{ position: \"absolute\", zIndex: 1 }}>\r\n        <Layout hasSider>\r\n          <Sider\r\n            style={{\r\n              overflow: \"none\",\r\n              height: \"100vh\",\r\n              position: \"fixed\",\r\n              left: 0,\r\n              top: 0,\r\n              bottom: 0,\r\n            }}\r\n          >\r\n            <Menu\r\n              onClick={this.handleClick}\r\n              defaultSelectedKeys={[\"network\"]}\r\n              // selectedKeys={[current]}\r\n              mode=\"inline\"\r\n            >\r\n              <Menu.Item key=\"network\" icon={<DesktopOutlined />}>\r\n                <Link to=\"/\">\r\n                  <span>Network Topology</span>\r\n                </Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"manage\" icon={<DesktopOutlined />}>\r\n                <Link to=\"/manage\">\r\n                  <span>Manage Devices</span>\r\n                </Link>\r\n              </Menu.Item>\r\n            </Menu>\r\n          </Sider>\r\n        </Layout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavigationMenu;\r\n","C:\\SourceTree\\capstone-project\\src\\Components\\DrawerNetwork.js",["87","88"],"import React, { useState } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Drawer, Button, Col, Row } from \"antd\";\nimport TestCard from \"./Card\";\nimport EmergingThreatsCard from \"./CardEmergingThreats\";\nimport StatisticsBoxes from \"./Statistics\";\nimport ThreatsTable from \"./TableThreats\";\nimport relation_data from \"./Data/relation_data.json\";\n\nfunction NetworkDrawer({\n  networkDetails,\n  networkDrawerStatus,\n  closeNetworkDrawer,\n  groupByDevice,\n  deviceCounter,\n  alertData,\n}) {\n  let thisIsTest = [];\n  for (let a = 0; a < relation_data.length; a++) {\n    thisIsTest.push(relation_data[a][\"source\"]);\n  }\n\n  return (\n    <div>\n      <Drawer\n        title={\n          <div>\n            Home / <b>Network Statistics</b>\n          </div>\n        }\n        style={{ color: \"white\" }}\n        maskStyle={{\n          color: \"white\",\n        }}\n        headerStyle={{\n          backgroundColor: \"#16151B\",\n          borderBottomWidth: 0,\n        }}\n        bodyStyle={{\n          backgroundColor: \"#16151B\",\n          color: \"white\",\n        }}\n        width={\"650px\"}\n        placement=\"right\"\n        closable={true}\n        mask={false}\n        keyboard={true}\n        visible={networkDrawerStatus}\n        onClose={closeNetworkDrawer}\n      >\n        <div>\n          <Row gutter={25}>\n            <Col span={12}>\n              <TestCard networkDetails={networkDetails} alertData={alertData} />\n            </Col>\n            <Col span={12}>\n              <EmergingThreatsCard alertData={alertData} />\n            </Col>\n          </Row>\n        </div>\n        <br />\n        <StatisticsBoxes\n          networkDeviceCounter={deviceCounter}\n          networkStatisticsObject={groupByDevice}\n        />\n        <br />\n        <ThreatsTable alertData={alertData} />\n      </Drawer>\n    </div>\n  );\n}\n\nexport default NetworkDrawer;\n\n// <div\n//       style={{\n//         display: \"block\",\n//         width: 700,\n//         padding: 30,\n//       }}\n//     >\n//       <h4>Test Drawer</h4>\n//       <Button\n//         type=\"primary\"\n//         onClick={() => {\n//           setVisible(true);\n//         }}\n//       >\n//         Open Drawer\n//       </Button>\n//       <br />\n//       <br />\n//       <Button\n//         type=\"primary\"\n//         onClick={() => {\n//           setVisible(false);\n//         }}\n//       >\n//         Close Drawer\n//       </Button>\n","C:\\SourceTree\\capstone-project\\src\\Components\\TableThreats.js",["89"],"import { Table } from \"antd\";\r\n\r\nfunction ThreatsTable({ alertData, deviceDetails }) {\r\n  var date;\r\n\r\n  const month_array = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"Aug\",\r\n    \"Sept\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ];\r\n\r\n  if (deviceDetails !== undefined) {\r\n    alertData = alertData.filter((record) =>\r\n      record.destination.includes(deviceDetails.id)\r\n    );\r\n  }\r\n\r\n  Object.keys(alertData).forEach((key) => {\r\n    date = new Date(alertData[key][\"timestamp\"]);\r\n    alertData[key][\"timestamp\"] =\r\n      date.getDate() +\r\n      \" \" +\r\n      month_array[date.getMonth()] +\r\n      \" \" +\r\n      date.getFullYear() +\r\n      \" \" +\r\n      (date.getHours() < 10 ? \"0\" + date.getHours() : date.getHours()) +\r\n      \":\" +\r\n      (date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes()) +\r\n      \":\" +\r\n      (date.getSeconds() < 10 ? \"0\" + date.getSeconds() : date.getSeconds());\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <h3 style={{ color: \"white\" }}>Detected Cyber Security Threats</h3>\r\n      <Table\r\n        dataSource={alertData}\r\n        columns={columns}\r\n        pagination={{\r\n          defaultPageSize: 10,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst dataSource = [];\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Timestamp\",\r\n    dataIndex: \"timestamp\",\r\n    key: \"timestamp\",\r\n    sorter: (a, b) => a.timestamp - b.timestamp,\r\n  },\r\n  {\r\n    title: \"Source\",\r\n    dataIndex: \"source\",\r\n    key: \"source\",\r\n  },\r\n  {\r\n    title: \"Destination\",\r\n    dataIndex: \"destination\",\r\n    key: \"destination\",\r\n  },\r\n  {\r\n    title: \"Threat Info\",\r\n    dataIndex: \"threatinfo\",\r\n    render: (text, record) => (\r\n      <span>\r\n        <b>Threat Category: </b>\r\n        {record.threat_category} <br />\r\n        <b>Threat Name: </b>\r\n        {record.threat_name} <br />\r\n      </span>\r\n    ),\r\n    key: \"threat\",\r\n    filters: [\r\n      {\r\n        text: \"Policy Violation\",\r\n        value: \"Policy Violation\",\r\n      },\r\n      {\r\n        text: \"Suspicious\",\r\n        value: \"Suspicious\",\r\n      },\r\n    ],\r\n    onFilter: (value, record) => record.threat_category.includes(value),\r\n    filterMode: \"tree\",\r\n    filterSearch: true,\r\n  },\r\n  // {\r\n  //   title: \"Threat Type\",\r\n  //   dataIndex: \"threat\",\r\n  //   key: \"threat\",\r\n  //   filters: [\r\n  //     {\r\n  //       text: \"Trojan\",\r\n  //       value: \"Trojan\",\r\n  //     },\r\n  //     {\r\n  //       text: \"Rootkit\",\r\n  //       value: \"Rootkit\",\r\n  //     },\r\n  //   ],\r\n  //   onFilter: (value, record) => record.threat.includes(value),\r\n  //   filterMode: \"tree\",\r\n  //   filterSearch: true,\r\n  // },\r\n];\r\n\r\nexport default ThreatsTable;\r\n","C:\\SourceTree\\capstone-project\\src\\Components\\CardEmergingThreats.js",[],"C:\\SourceTree\\capstone-project\\src\\Components\\Statistics.js",[],"C:\\SourceTree\\capstone-project\\src\\Components\\DrawerDevice.js",["90","91","92"],"import React, { useEffect, useState } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Drawer, Button, Col, Row } from \"antd\";\nimport DeviceCard from \"./Card_Device\";\nimport EmergingThreatsCard from \"./CardEmergingThreats\";\nimport StatsDevice from \"./StatisticsDevice\";\nimport ThreatsTable from \"./TableThreats\";\n\n// Function to render the Drawer component to display the device information\nfunction DeviceDrawer({\n  deviceDetails,\n  deviceDrawerStatus,\n  closeDeviceDrawer,\n  alertData,\n  deviceConnected,\n  setPopoverSelectedNode,\n}) {\n  return (\n    <div>\n      <Drawer\n        title={\n          <div>\n            Home / <b>Device Statistics</b>\n          </div>\n        }\n        style={{ color: \"white\" }}\n        headerStyle={{\n          backgroundColor: \"#16151B\",\n          borderBlockColor: \"#16151B\",\n        }}\n        bodyStyle={{\n          backgroundColor: \"#16151B\",\n          color: \"white\",\n        }}\n        width={\"650px\"}\n        placement=\"right\"\n        closable={true}\n        mask={false}\n        keyboard={true}\n        visible={deviceDrawerStatus}\n        onClose={closeDeviceDrawer}\n      >\n        <div>\n          <Row gutter={25}>\n            <Col span={12}>\n              <DeviceCard\n                deviceDetails={deviceDetails}\n                deviceConnected={deviceConnected}\n                setPopoverSelectedNode={setPopoverSelectedNode}\n              />\n            </Col>\n            <Col span={12}>\n              <EmergingThreatsCard alertData={alertData} />\n            </Col>\n          </Row>\n        </div>\n        <br />\n        <StatsDevice deviceDetails={deviceDetails} />\n        <br />\n        <ThreatsTable alertData={alertData} deviceDetails={deviceDetails} />\n      </Drawer>\n    </div>\n  );\n}\n\nexport default DeviceDrawer;\n","C:\\SourceTree\\capstone-project\\src\\Components\\Card_Device.js",["93"],"import { Card, Space, Popover } from \"antd\";\r\n\r\n// Function to display the statistical data of devices\r\n// deviceDetails - Contains the device statistical data\r\n// deviceConnected - Contains the number of devices the node is connected to\r\nfunction DeviceCard({\r\n  deviceDetails,\r\n  deviceConnected,\r\n  setPopoverSelectedNode,\r\n}) {\r\n  return (\r\n    <div>\r\n      <Card\r\n        headStyle={{\r\n          color: \"white\",\r\n          background: \"#3E3D40\",\r\n        }}\r\n        title={<div>Device Details</div>}\r\n        style={{\r\n          width: \"100%\",\r\n          overflow: \"hidden\",\r\n          color: \"white\",\r\n          margin: \"0 auto\",\r\n        }}\r\n        bodyStyle={{ background: \"#1F1E26\" }}\r\n      >\r\n        <Space size={28}>\r\n          <p>Device Name</p>{\" \"}\r\n          <p>\r\n            <b>{deviceDetails.name}</b>\r\n          </p>\r\n        </Space>\r\n        <Space size={32}>\r\n          <p>Device Type</p>{\" \"}\r\n          <p>\r\n            <b>{deviceDetails.type}</b>\r\n          </p>\r\n        </Space>\r\n        <Space size={35}>\r\n          <p>OS Version</p>{\" \"}\r\n          <p>\r\n            <b>{deviceDetails.os}</b>\r\n          </p>\r\n        </Space>\r\n        <Space size={29}>\r\n          <p>Mac Address</p>{\" \"}\r\n          <p>\r\n            <b>{deviceDetails.mac_addr}</b>\r\n          </p>\r\n        </Space>\r\n        <Space size={18}>\r\n          <p id=\"abc\" style={{ whiteSpace: \"nowrap\" }}>\r\n            Connected Device(s)\r\n          </p>\r\n          <Space size={9}>\r\n            <Popover\r\n              title={\"Adjacent Device List\"}\r\n              placement={\"bottomLeft\"}\r\n              content={\r\n                deviceConnected.length > 0\r\n                  ? deviceConnected.map((id) => (\r\n                      <p>\r\n                        <a\r\n                          onClick={() => {\r\n                            setPopoverSelectedNode({ id });\r\n                          }}\r\n                        >\r\n                          {id}\r\n                        </a>\r\n                      </p>\r\n                    ))\r\n                  : null\r\n              }\r\n              trigger=\"hover\"\r\n            >\r\n              <p>\r\n                <b>\r\n                  {deviceConnected.length > 0 ? deviceConnected.length : 0}{\" \"}\r\n                  device(s)\r\n                </b>\r\n              </p>\r\n            </Popover>\r\n          </Space>\r\n        </Space>\r\n      </Card>\r\n      <Card\r\n        headStyle={{\r\n          color: deviceDetails.status !== \"Offline\" ? \"#16151b\" : \"white\",\r\n          textAlign: \"center\",\r\n          background:\r\n            deviceDetails.status === \"Active\"\r\n              ? \"#63D196\"\r\n              : deviceDetails.status === \"Inactive\"\r\n              ? \"#F9D14D\"\r\n              : \"#F1544D\",\r\n        }}\r\n        title={\r\n          <div>\r\n            {deviceDetails.status === \"Active\" ? (\r\n              <b>CONNECTED DEVICE</b>\r\n            ) : deviceDetails.status === \"Inactive\" ? (\r\n              <b>INACTIVE DEVICE</b>\r\n            ) : (\r\n              <b>DEVICE IS OFFLINE</b>\r\n            )}\r\n          </div>\r\n        }\r\n        style={{\r\n          width: \"100%\",\r\n          overflow: \"hidden\",\r\n          color: \"white\",\r\n          margin: \"0 auto\",\r\n        }}\r\n        bodyStyle={{ background: \"#16151b\" }}\r\n      ></Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeviceCard;\r\n","C:\\SourceTree\\capstone-project\\src\\Components\\StatisticsDevice.js",[],"C:\\SourceTree\\capstone-project\\src\\ManageDevices.js",["94","95"],"import \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport React, { useState } from \"react\";\nimport { Form, Layout, Table, Space, Popconfirm } from \"antd\";\n\nimport ManageDrawer from \"./Components/DrawerManage\";\nimport device_data from \"./Components/Data/device_data.json\";\n\n// Functional Component for Network Topology Graph Page UI\nfunction AppManageDevice() {\n  // UseState() functions for maintaining the states\n  const [manageDrawerStatus, setManageDrawerStatus] = useState(false); // To open / close the Manage Device Drawer Component\n  const [manageDeviceDetails, setManageDeviceDetails] = useState({}); // To store the device details for rendering\n  const [thisDeviceData, updateDeviceTableData] = useState(device_data); // To maintain the state of the data (datasource) & update table data\n  const [deviceForm] = Form.useForm(); // To declare the variable for the Form component\n\n  // Declaring of columns for the Manage Device table\n  const columns = [\n    {\n      title: \"Action\",\n      key: \"action\",\n      width: 150,\n      render: (record) => (\n        <Space size=\"middle\">\n          <a onClick={() => onEditClick(record)}>Edit</a>\n          <Popconfirm\n            title=\"Are you sure?\"\n            okText=\"Yes\"\n            cancelText=\"No\"\n            placement=\"bottom\"\n            onConfirm={() => deleteRow(record)}\n          >\n            <a>Remove</a>\n          </Popconfirm>\n        </Space>\n      ),\n    },\n    {\n      title: \"IP Address\",\n      dataIndex: \"id\",\n      key: \"id\",\n      width: 150,\n    },\n    {\n      title: \"Hostname\",\n      dataIndex: \"name\",\n      key: \"name\",\n      width: 150,\n    },\n    {\n      title: \"Device Type\",\n      dataIndex: \"type\",\n      key: \"type\",\n      width: 150,\n    },\n    {\n      title: \"OS Version\",\n      dataIndex: \"os\",\n      key: \"os\",\n      width: 150,\n    },\n    {\n      title: \"Mac Address\",\n      dataIndex: \"mac_addr\",\n      key: \"mac_addr\",\n      width: 150,\n    },\n    {\n      title: \"Ownership\",\n      dataIndex: \"ownership\",\n      key: \"ownership\",\n      width: 150,\n    },\n  ];\n\n  // Function to pass the selected device details to the Manage Device Drawer Component\n  // When user clicks on \"Edit\", two functions will run:\n  // - openManageDrawerStatus - To open device drawer\n  // - setManageDeviceDetails - Pass the record to FormDeviceMange page (for the Revert button)\n  // - setFormValue - Directly update the values in the Form component\n  const onEditClick = (record) => {\n    openManageDrawerStatus();\n    setManageDeviceDetails(record);\n    setFormValues(record);\n  };\n\n  // Function to set the Manage Device Drawer's \"visible\" state to true\n  const openManageDrawerStatus = () => {\n    setManageDrawerStatus(true);\n  };\n\n  // Function to set the Manage Device Drawer's \"visible\" state to false\n  const closeMangeDeviceDrawer = () => {\n    setManageDrawerStatus(false);\n  };\n\n  // Function to set the values in the Form component (passed in from the state)\n  const setFormValues = (record) => {\n    deviceForm.setFieldsValue({\n      hostname: record.name,\n      device_type: record.type,\n      os_version: record.os,\n      mac_address: record.mac_addr,\n      ownership: record.ownership,\n    });\n  };\n\n  // To update the values in the table based on the new data\n  const updatedFormValues = (updated) => {\n    // Sample console log for verification only\n    console.log(\n      \"Updated hostname to\",\n      updated.hostname,\n      \"where IP Address is\",\n      manageDeviceDetails.id\n    );\n\n    updateTableValues(updated);\n  };\n\n  // Function to update the table with the updated values from the user\n  // This function iterate through all the rows in the data until it find the correct row\n  function updateTableValues(updated) {\n    for (var i = 0; i < thisDeviceData.length; i++) {\n      if (thisDeviceData[i].id === manageDeviceDetails.id) {\n        thisDeviceData[i].name = updated.hostname;\n        thisDeviceData[i].type = updated.device_type;\n        thisDeviceData[i].os = updated.os_version;\n        thisDeviceData[i].mac_addr = updated.mac_address;\n        thisDeviceData[i].ownership = updated.ownership;\n        break;\n      }\n    }\n    updateDeviceTableData([...thisDeviceData]);\n    console.log(\"Table Updated:\", thisDeviceData[i].name);\n    console.log(thisDeviceData);\n  }\n\n  // Function to delete the record from the data\n  // This function iterates through all the rows in the data until it finds the correct row\n  function deleteRow(recordToDelete) {\n    for (var i = 0; i < thisDeviceData.length; i++) {\n      if (thisDeviceData[i].id === recordToDelete.id) {\n        thisDeviceData.splice(i, 1);\n        break;\n      }\n    }\n    console.log(recordToDelete.id, \"has been deleted\");\n    console.log(thisDeviceData);\n    updateDeviceTableData([...thisDeviceData]);\n  }\n\n  return (\n    <div>\n      {/* Manage Device Drawer Component */}\n      <ManageDrawer\n        manageDrawerStatus={manageDrawerStatus}\n        manageDeviceDetails={manageDeviceDetails}\n        closeMangeDeviceDrawer={closeMangeDeviceDrawer}\n        deviceForm={deviceForm}\n        updatedFormValues={updatedFormValues}\n      />\n      {/* Manage Device Table Component */}\n      <Layout style={{ marginLeft: 199 }}>\n        <Table dataSource={[...thisDeviceData]} columns={columns} />\n      </Layout>\n    </div>\n  );\n}\n\nexport default AppManageDevice;\n","C:\\SourceTree\\capstone-project\\src\\Components\\DrawerManage.js",["96","97","98","99"],"import React, { useRef } from \"react\";\nimport \"antd/dist/antd.css\";\nimport \"../CustomCSS.css\";\nimport { Drawer, Button, Col, Row } from \"antd\";\nimport DeviceManageForm from \"./FormDeviceManage\";\n\nfunction ManageDrawer({\n  manageDrawerStatus,\n  manageDeviceDetails,\n  closeMangeDeviceDrawer,\n  deviceForm,\n  updatedFormValues,\n}) {\n  return (\n    <div>\n      <Drawer\n        title={\n          <div>\n            Home / <b>Manage Devices</b>\n          </div>\n        }\n        style={{ color: \"white\" }}\n        maskStyle={{\n          color: \"white\",\n        }}\n        headerStyle={{\n          backgroundColor: \"#16151B\",\n          borderBottomWidth: 0,\n        }}\n        bodyStyle={{\n          backgroundColor: \"#16151B\",\n          color: \"white\",\n        }}\n        width={\"500px\"}\n        placement=\"right\"\n        closable={true}\n        mask={false}\n        keyboard={true}\n        visible={manageDrawerStatus}\n        onClose={closeMangeDeviceDrawer}\n      >\n        <div>\n          <h2 className=\"manage-device-drawer-title\">\n            Edit Device Information ({manageDeviceDetails.id})\n          </h2>\n          <br />\n          <DeviceManageForm\n            manageDeviceDetails={manageDeviceDetails}\n            deviceForm={deviceForm}\n            updatedFormValues={updatedFormValues}\n          />\n        </div>\n      </Drawer>\n    </div>\n  );\n}\n\nexport default ManageDrawer;\n","C:\\SourceTree\\capstone-project\\src\\Components\\FormDeviceManage.js",[],"C:\\SourceTree\\capstone-project\\src\\Components\\Data\\AlertDataGenerator.js",[],"C:\\SourceTree\\capstone-project\\src\\Components\\Card.js",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":2,"column":8,"nodeType":"106","messageId":"107","endLine":2,"endColumn":21},{"ruleId":"108","severity":1,"message":"109","line":131,"column":5,"nodeType":"110","endLine":131,"endColumn":18,"suggestions":"111"},{"ruleId":"108","severity":1,"message":"112","line":245,"column":5,"nodeType":"110","endLine":245,"endColumn":16,"suggestions":"113"},{"ruleId":"108","severity":1,"message":"114","line":257,"column":6,"nodeType":"110","endLine":257,"endColumn":27,"suggestions":"115"},{"ruleId":"104","severity":1,"message":"116","line":18,"column":13,"nodeType":"106","messageId":"107","endLine":18,"endColumn":20},{"ruleId":"104","severity":1,"message":"117","line":1,"column":17,"nodeType":"106","messageId":"107","endLine":1,"endColumn":25},{"ruleId":"104","severity":1,"message":"118","line":3,"column":18,"nodeType":"106","messageId":"107","endLine":3,"endColumn":24},{"ruleId":"104","severity":1,"message":"119","line":57,"column":7,"nodeType":"106","messageId":"107","endLine":57,"endColumn":17},{"ruleId":"104","severity":1,"message":"120","line":1,"column":17,"nodeType":"106","messageId":"107","endLine":1,"endColumn":26},{"ruleId":"104","severity":1,"message":"117","line":1,"column":28,"nodeType":"106","messageId":"107","endLine":1,"endColumn":36},{"ruleId":"104","severity":1,"message":"118","line":3,"column":18,"nodeType":"106","messageId":"107","endLine":3,"endColumn":24},{"ruleId":"121","severity":1,"message":"122","line":63,"column":25,"nodeType":"123","endLine":67,"endColumn":26},{"ruleId":"121","severity":1,"message":"122","line":25,"column":11,"nodeType":"123","endLine":25,"endColumn":50},{"ruleId":"121","severity":1,"message":"122","line":33,"column":13,"nodeType":"123","endLine":33,"endColumn":16},{"ruleId":"104","severity":1,"message":"124","line":1,"column":17,"nodeType":"106","messageId":"107","endLine":1,"endColumn":23},{"ruleId":"104","severity":1,"message":"118","line":4,"column":18,"nodeType":"106","messageId":"107","endLine":4,"endColumn":24},{"ruleId":"104","severity":1,"message":"125","line":4,"column":26,"nodeType":"106","messageId":"107","endLine":4,"endColumn":29},{"ruleId":"104","severity":1,"message":"126","line":4,"column":31,"nodeType":"106","messageId":"107","endLine":4,"endColumn":34},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"no-unused-vars","'NetworkDrawer' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback has an unnecessary dependency: 'graphUseRef'. Either exclude it or remove the dependency array.","ArrayExpression",["129"],"React Hook useCallback has missing dependencies: 'nodeDeviceType' and 'selectedNodeDeviceType'. Either include them or remove the dependency array.",["130"],"React Hook useEffect has a missing dependency: 'zoomInNode'. Either include it or remove the dependency array.",["131"],"'current' is assigned a value but never used.","'useState' is defined but never used.","'Button' is defined but never used.","'dataSource' is assigned a value but never used.","'useEffect' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useRef' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},"Update the dependencies array to be: []",{"range":"138","text":"139"},"Update the dependencies array to be: [hoverNode, nodeDeviceType, selectedNodeDeviceType]",{"range":"140","text":"141"},"Update the dependencies array to be: [popoverSelectedNode, zoomInNode]",{"range":"142","text":"143"},[5803,5816],"[]",[9393,9404],"[hoverNode, nodeDeviceType, selectedNodeDeviceType]",[9828,9849],"[popoverSelectedNode, zoomInNode]"]