{"version":3,"sources":["Components/Card.js","Components/CardEmergingThreats.js","Components/Statistics.js","Components/TableThreats.js","Components/DrawerNetwork.js","Components/MenuNavigation.js","Components/Card_Device.js","Components/StatisticsDevice.js","Components/DrawerDevice.js","NetworkTopology.js","Components/FormDeviceManage.js","Components/DrawerManage.js","ManageDevices.js","App.js","reportWebVitals.js","index.js"],"names":["TestCard","networkDetails","alertData","headStyle","color","background","title","style","width","overflow","margin","bodyStyle","height","size","ssid","default_gateway","volume_in","volume_out","length","status","textAlign","EmergingThreatsCard","sortByFrequency","Object","entries","threat_counter","i","groupByThreatCategory","sort","b","splice","dataSource","data","result","k","push","threat_category","frequency","dataToTable","rowKey","columns","dataIndex","key","sorter","a","localeCompare","pagination","id","StatisticsBoxes","networkDeviceCounter","networkStatisticsObject","className","gutter","span","value","valueStyle","fontWeight","fontSize","JSON","stringify","timestamp","render","text","record","threat_name","filters","onFilter","includes","filterMode","filterSearch","ThreatsTable","date","deviceDetails","month_array","undefined","filter","destination","keys","forEach","Date","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","defaultPageSize","NetworkDrawer","networkDrawerStatus","closeNetworkDrawer","groupByDevice","deviceCounter","thisIsTest","relation_data","maskStyle","headerStyle","backgroundColor","borderBottomWidth","placement","closable","mask","keyboard","visible","onClose","Statistics","NavigationMenu","state","current","handleClick","e","console","log","setState","this","Sider","Layout","position","zIndex","hasSider","left","top","bottom","onClick","defaultSelectedKeys","mode","Item","icon","DesktopOutlined","to","React","Component","DeviceCard","deviceConnected","name","type","os","mac_addr","whiteSpace","content","map","item","trigger","subnet","gateway","moment","connected_since","fromNow","DeviceDrawer","deviceDrawerStatus","closeDeviceDrawer","borderBlockColor","AppNetworkTopology","useState","setDeviceDrawerStatus","setNetworkDrawerStatus","setNetworkDetails","setGroupByDevice","setDeviceCounter","hoverNode","setHoverNode","setDeviceConnected","setAlertData","useEffect","groupByDeviceType","device_data","networkData","getData","fetch","then","response","json","catch","err","graphUseRef","useRef","zoomInNode","useCallback","node","connectedDeviceArray","d","source","target","connectedDeviceCounter","distRatio","Math","hypot","x","y","z","cameraPosition","updateNodeIcons","imgTexture","THREE","load","material","sprite","scale","set","window","innerWidth","innerHeight","ref","graphData","nodes","links","nodeLabel","linkWidth","onNodeRightClick","nodeThreeObject","Option","Select","layout","labelCol","wrapperCol","DeviceManageForm","manageDeviceDetails","deviceForm","updatedFormValues","form","onFinish","values","localStorage","setItem","storedData","getItem","parse","initialValues","hostname","device_type","os_version","mac_address","ownership","label","rules","required","min","max","offset","htmlType","setFieldsValue","ManageDrawer","manageDrawerStatus","closeMangeDeviceDrawer","AppManageDevice","setManageDrawerStatus","setManageDeviceDetails","thisDeviceData","updateDeviceTableData","Form","useForm","onEditClick","okText","cancelText","onConfirm","recordToDelete","tester_delete","openManageDrawerStatus","setFormValues","updated","updateTableValues","marginLeft","App","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5014e6c.chunk.js","sourcesContent":["import { Card, Space } from \"antd\";\r\n\r\nfunction TestCard({ networkDetails, alertData }) {\r\n  return (\r\n    <div>\r\n      <Card\r\n        headStyle={{\r\n          color: \"white\",\r\n          background: \"#3E3D40\",\r\n        }}\r\n        title={<p>Network Details</p>}\r\n        style={{\r\n          width: \"100%\",\r\n          overflow: \"hidden\",\r\n          color: \"white\",\r\n          margin: \"0 auto\",\r\n        }}\r\n        bodyStyle={{ background: \"#1F1E26\", height: \"176px\" }}\r\n      >\r\n        <Space size={21}>\r\n          <p>Network SSID</p>{\" \"}\r\n          <p>\r\n            <b>{networkDetails.ssid}</b>\r\n          </p>\r\n        </Space>\r\n        <Space size={14}>\r\n          <p>Default Gateway</p>{\" \"}\r\n          <p>\r\n            <b>{networkDetails.default_gateway}</b>\r\n          </p>\r\n        </Space>\r\n        <Space size={16}>\r\n          <p>Total Volume In</p>{\" \"}\r\n          <p>\r\n            <b>{networkDetails.volume_in}</b>\r\n          </p>\r\n        </Space>\r\n        <Space size={11}>\r\n          <p>Total Volume Out</p>{\" \"}\r\n          <p>\r\n            <b>{networkDetails.volume_out}</b>\r\n          </p>\r\n        </Space>\r\n        <Space size={6}>\r\n          <p>Total Threat Alert(s)</p>{\" \"}\r\n          <p>\r\n            <b>{alertData.length}</b>\r\n          </p>\r\n        </Space>\r\n      </Card>\r\n      <Card\r\n        headStyle={{\r\n          color: networkDetails.status !== \"Offline\" ? \"#16151b\" : \"#ffffff\",\r\n          textAlign: \"center\",\r\n          background:\r\n            networkDetails.status === \"Online\" ? \"#63D196\" : \"#F1544D\",\r\n        }}\r\n        title={\r\n          <div>\r\n            {networkDetails.status === \"Online\" ? (\r\n              <b>ACTIVE NETWORK</b>\r\n            ) : (\r\n              <b>OFFLINE NETWORK</b>\r\n            )}\r\n          </div>\r\n        }\r\n        style={{\r\n          width: \"100%\",\r\n          overflow: \"hidden\",\r\n          color: \"white\",\r\n          margin: \"0 auto\",\r\n        }}\r\n        bodyStyle={{ background: \"#16151b\" }}\r\n      ></Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TestCard;\r\n","import { Card, Table } from \"antd\";\r\n// import alerts from \"./Data/alert.json\";\r\n\r\n// var counter = alerts.reduce(function (prev, cur) {\r\n//   if (prev.hasOwnProperty(cur.type)) prev[cur.type] += 1;\r\n//   else prev[cur.type] = 1;\r\n\r\n//   return prev;\r\n// }, {});\r\n\r\n// alert(JSON.stringify(groupByThreatCategory));\r\n\r\n// for (const [key, value] of Object.entries(groupByThreatCategory)) {\r\n//   console.log(`${key}: ${value}`);\r\n// }\r\n\r\nfunction EmergingThreatsCard({ alertData }) {\r\n  // Group the alerts by their Threat Category (store in threat_counter)\r\n  const groupByThreatCategory = () => {\r\n    var threat_counter = {};\r\n    for (var i = 0; i < alertData.length; i++) {\r\n      if (!threat_counter[alertData[i][\"threat_category\"]]) {\r\n        threat_counter[alertData[i][\"threat_category\"]] = 0;\r\n      }\r\n      threat_counter[alertData[i][\"threat_category\"]]++;\r\n    }\r\n    return threat_counter;\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Threat Category\",\r\n      dataIndex: \"threat_category\",\r\n      key: \"threat_category\",\r\n      sorter: (a, b) => a.threat_category.localeCompare(b.threat_category),\r\n    },\r\n    {\r\n      title: \"Frequency\",\r\n      dataIndex: \"frequency\",\r\n      key: \"frequency\",\r\n      sorter: (a, b) => a.frequency - b.frequency,\r\n    },\r\n  ];\r\n\r\n  // Sort the groups (of Threat Category) by highest to lowest frequency (no. of occurances)\r\n  const sortByFrequency = Object.entries(groupByThreatCategory())\r\n    .sort(([, b], [, a]) => a - b) // Sort from highest to lowest\r\n    .splice(0, 4); // Select the top four (frequency)\r\n\r\n  // Add the key values using the result ofsortByFrequency for the dataSource in the table\r\n  const dataToTable = (data) => {\r\n    var result = [];\r\n    for (var k in data)\r\n      result.push({ threat_category: data[k][0], frequency: data[k][1] });\r\n    return result;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Card\r\n        headStyle={{\r\n          color: \"white\",\r\n          background: \"#3E3D40\",\r\n        }}\r\n        title=\"Emerging Threats\"\r\n        style={{\r\n          width: \"100%\",\r\n          overflow: \"hidden\",\r\n          color: \"white\",\r\n          margin: \"0 auto\",\r\n        }}\r\n        bodyStyle={{ background: \"#1F1E26\" }}\r\n      >\r\n        <Table\r\n          dataSource={dataToTable(sortByFrequency)}\r\n          rowKey={\"123\"}\r\n          columns={columns}\r\n          size=\"small\"\r\n          pagination={false}\r\n        />\r\n        <ul id=\"abcd\"></ul>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmergingThreatsCard;\r\n\r\n// <div>\r\n//   {alerts.map((threats, key) => {\r\n//     return <p key={key}>{threats.threat_category}</p>;\r\n//   })}\r\n// </div>;\r\n\r\n// const groupByThreatCategory1 = alerts.reduce((alertData, alertCounter) => {\r\n//   alertData[alertCounter.threat_category] =\r\n//     alertData[alertCounter.threat_category] + 1 || 1;\r\n//   return alertData;\r\n// }, {});\r\n\r\n// {\r\n//   Object.entries(sortByFrequency).map((entry) => {\r\n//     return (\r\n//       <p>\r\n//         <span key={entry[0]}>{`${entry[1][0]}`}</span>{\" \"}\r\n//         <span\r\n//           style={{ position: \"absolute\", right: 30 }}\r\n//         >{`${entry[1][1]}`}</span>\r\n//         <br />\r\n//       </p>\r\n//     );\r\n//   });\r\n// }\r\n\r\n// {\r\n//   Object.entries(sortByFrequency).map((entry) => {\r\n//     return (\r\n//       <p>\r\n//         <span>{`${entry[1][0]}`}</span>{\" \"}\r\n//         <span\r\n//           style={{ position: \"absolute\", right: 30 }}\r\n//         >{`${entry[1][1]}`}</span>\r\n//         <br />\r\n//       </p>\r\n//     );\r\n//   });\r\n// }\r\n","import { Statistic, Card, Row, Col } from \"antd\";\r\nimport \"../CustomCSS.css\";\r\nfunction StatisticsBoxes({ networkDeviceCounter, networkStatisticsObject }) {\r\n  return (\r\n    <div className=\"site-statistic-demo-card\">\r\n      <Row gutter={25}>\r\n        <Col span={6}>\r\n          <Card bodyStyle={{ background: \"#1F1E26\" }}>\r\n            <Statistic\r\n              title=\"Total Devices\"\r\n              value={networkDeviceCounter}\r\n              valueStyle={{\r\n                color: \"white\",\r\n                fontWeight: \"bolder\",\r\n                fontSize: \"18px\",\r\n              }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col span={6}>\r\n          <Card bodyStyle={{ background: \"#1F1E26\" }}>\r\n            <Statistic\r\n              title=\"Active Devices\"\r\n              value={JSON.stringify(networkStatisticsObject[\"Active\"])}\r\n              valueStyle={{\r\n                color: \"#45D5C9\",\r\n                fontWeight: \"bolder\",\r\n                fontSize: \"18px\",\r\n              }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col span={6}>\r\n          <Card bodyStyle={{ background: \"#1F1E26\" }}>\r\n            <Statistic\r\n              title=\"Inactive Devices\"\r\n              value={JSON.stringify(networkStatisticsObject[\"Inactive\"])}\r\n              valueStyle={{\r\n                color: \"#FFC130\",\r\n                fontWeight: \"bolder\",\r\n                fontSize: \"18px\",\r\n              }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col span={6}>\r\n          <Card bodyStyle={{ background: \"#1F1E26\" }}>\r\n            <Statistic\r\n              title=\"Offline Devices\"\r\n              value={JSON.stringify(networkStatisticsObject[\"Offline\"])}\r\n              valueStyle={{\r\n                color: \"#FA816E\",\r\n                fontWeight: \"bolder\",\r\n                fontSize: \"18px\",\r\n              }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StatisticsBoxes;\r\n","import { Table } from \"antd\";\r\n\r\nfunction ThreatsTable({ alertData, deviceDetails }) {\r\n  var date;\r\n\r\n  const month_array = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"Aug\",\r\n    \"Sept\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ];\r\n\r\n  if (deviceDetails !== undefined) {\r\n    alertData = alertData.filter((record) =>\r\n      record.destination.includes(deviceDetails.id)\r\n    );\r\n  }\r\n\r\n  Object.keys(alertData).forEach((key) => {\r\n    date = new Date(alertData[key][\"timestamp\"]);\r\n    alertData[key][\"timestamp\"] =\r\n      date.getDate() +\r\n      \" \" +\r\n      month_array[date.getMonth()] +\r\n      \" \" +\r\n      date.getFullYear() +\r\n      \" \" +\r\n      (date.getHours() < 10 ? \"0\" + date.getHours() : date.getHours()) +\r\n      \":\" +\r\n      (date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes()) +\r\n      \":\" +\r\n      (date.getSeconds() < 10 ? \"0\" + date.getSeconds() : date.getSeconds());\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <h3 style={{ color: \"white\" }}>Detected Cyber Security Threats</h3>\r\n      <Table\r\n        dataSource={alertData}\r\n        columns={columns}\r\n        pagination={{\r\n          defaultPageSize: 10,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst dataSource = [];\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Timestamp\",\r\n    dataIndex: \"timestamp\",\r\n    key: \"timestamp\",\r\n    sorter: (a, b) => a.timestamp - b.timestamp,\r\n  },\r\n  {\r\n    title: \"Source\",\r\n    dataIndex: \"source\",\r\n    key: \"source\",\r\n  },\r\n  {\r\n    title: \"Destination\",\r\n    dataIndex: \"destination\",\r\n    key: \"destination\",\r\n  },\r\n  {\r\n    title: \"Threat Info\",\r\n    dataIndex: \"threatinfo\",\r\n    render: (text, record) => (\r\n      <span>\r\n        <b>Threat Category: </b>\r\n        {record.threat_category} <br />\r\n        <b>Threat Name: </b>\r\n        {record.threat_name} <br />\r\n      </span>\r\n    ),\r\n    key: \"threat\",\r\n    filters: [\r\n      {\r\n        text: \"Policy Violation\",\r\n        value: \"Policy Violation\",\r\n      },\r\n      {\r\n        text: \"Suspicious\",\r\n        value: \"Suspicious\",\r\n      },\r\n    ],\r\n    onFilter: (value, record) => record.threat_category.includes(value),\r\n    filterMode: \"tree\",\r\n    filterSearch: true,\r\n  },\r\n  // {\r\n  //   title: \"Threat Type\",\r\n  //   dataIndex: \"threat\",\r\n  //   key: \"threat\",\r\n  //   filters: [\r\n  //     {\r\n  //       text: \"Trojan\",\r\n  //       value: \"Trojan\",\r\n  //     },\r\n  //     {\r\n  //       text: \"Rootkit\",\r\n  //       value: \"Rootkit\",\r\n  //     },\r\n  //   ],\r\n  //   onFilter: (value, record) => record.threat.includes(value),\r\n  //   filterMode: \"tree\",\r\n  //   filterSearch: true,\r\n  // },\r\n];\r\n\r\nexport default ThreatsTable;\r\n","import React, { useState } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Drawer, Button, Col, Row } from \"antd\";\nimport TestCard from \"./Card\";\nimport EmergingThreatsCard from \"./CardEmergingThreats\";\nimport StatisticsBoxes from \"./Statistics\";\nimport ThreatsTable from \"./TableThreats\";\nimport relation_data from \"./Data/relation_data.json\";\n\nfunction NetworkDrawer({\n  networkDetails,\n  networkDrawerStatus,\n  closeNetworkDrawer,\n  groupByDevice,\n  deviceCounter,\n  alertData,\n}) {\n  let thisIsTest = [];\n  for (let a = 0; a < relation_data.length; a++) {\n    thisIsTest.push(relation_data[a][\"source\"]);\n  }\n\n  return (\n    <div>\n      <Drawer\n        title={\n          <div>\n            Home / <b>Network Statistics</b>\n          </div>\n        }\n        style={{ color: \"white\" }}\n        maskStyle={{\n          color: \"white\",\n        }}\n        headerStyle={{\n          backgroundColor: \"#16151B\",\n          borderBottomWidth: 0,\n        }}\n        bodyStyle={{\n          backgroundColor: \"#16151B\",\n          color: \"white\",\n        }}\n        width={\"650px\"}\n        placement=\"right\"\n        closable={true}\n        mask={false}\n        keyboard={true}\n        visible={networkDrawerStatus}\n        onClose={closeNetworkDrawer}\n      >\n        <div>\n          <Row gutter={25}>\n            <Col span={12}>\n              <TestCard networkDetails={networkDetails} alertData={alertData} />\n            </Col>\n            <Col span={12}>\n              <EmergingThreatsCard alertData={alertData} />\n            </Col>\n          </Row>\n        </div>\n        <br />\n        <StatisticsBoxes\n          networkDeviceCounter={deviceCounter}\n          networkStatisticsObject={groupByDevice}\n        />\n        <br />\n        <ThreatsTable alertData={alertData} />\n      </Drawer>\n    </div>\n  );\n}\n\nexport default NetworkDrawer;\n\n// <div\n//       style={{\n//         display: \"block\",\n//         width: 700,\n//         padding: 30,\n//       }}\n//     >\n//       <h4>Test Drawer</h4>\n//       <Button\n//         type=\"primary\"\n//         onClick={() => {\n//           setVisible(true);\n//         }}\n//       >\n//         Open Drawer\n//       </Button>\n//       <br />\n//       <br />\n//       <Button\n//         type=\"primary\"\n//         onClick={() => {\n//           setVisible(false);\n//         }}\n//       >\n//         Close Drawer\n//       </Button>\n","import React from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Layout, Menu } from \"antd\";\r\nimport { DesktopOutlined } from \"@ant-design/icons\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass NavigationMenu extends React.Component {\r\n  state = {\r\n    current: \"Home\",\r\n  };\r\n\r\n  handleClick = (e) => {\r\n    console.log(\"click \", e);\r\n    this.setState({ current: e.key });\r\n  };\r\n\r\n  render() {\r\n    const { current } = this.state;\r\n    const { Sider } = Layout;\r\n    return (\r\n      <div style={{ position: \"absolute\", zIndex: 1 }}>\r\n        <Layout hasSider>\r\n          <Sider\r\n            style={{\r\n              overflow: \"none\",\r\n              height: \"100vh\",\r\n              position: \"fixed\",\r\n              left: 0,\r\n              top: 0,\r\n              bottom: 0,\r\n            }}\r\n          >\r\n            <Menu\r\n              onClick={this.handleClick}\r\n              defaultSelectedKeys={[\"network\"]}\r\n              // selectedKeys={[current]}\r\n              mode=\"inline\"\r\n            >\r\n              <Menu.Item key=\"network\" icon={<DesktopOutlined />}>\r\n                <Link to=\"/\">\r\n                  <span>Network Topology</span>\r\n                </Link>\r\n              </Menu.Item>\r\n              <Menu.Item key=\"manage\" icon={<DesktopOutlined />}>\r\n                <Link to=\"/manage\">\r\n                  <span>Manage Devices</span>\r\n                </Link>\r\n              </Menu.Item>\r\n            </Menu>\r\n          </Sider>\r\n        </Layout>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavigationMenu;\r\n","import { Card, Space, Popover, Button } from \"antd\";\r\nimport react, { useState } from \"react\";\r\n\r\n// Function to display the statistical data of devices\r\n// deviceDetails - Contains the device statistical data\r\n// deviceConnected - Contains the number of devices the node is connected to\r\nfunction DeviceCard({ deviceDetails, deviceConnected }) {\r\n  return (\r\n    <div>\r\n      <Card\r\n        headStyle={{\r\n          color: \"white\",\r\n          background: \"#3E3D40\",\r\n        }}\r\n        title={<div>Device Details</div>}\r\n        style={{\r\n          width: \"100%\",\r\n          overflow: \"hidden\",\r\n          color: \"white\",\r\n          margin: \"0 auto\",\r\n        }}\r\n        bodyStyle={{ background: \"#1F1E26\" }}\r\n      >\r\n        <Space size={28}>\r\n          <p>Device Name</p>{\" \"}\r\n          <p>\r\n            <b>{deviceDetails.name}</b>\r\n          </p>\r\n        </Space>\r\n        <Space size={32}>\r\n          <p>Device Type</p>{\" \"}\r\n          <p>\r\n            <b>{deviceDetails.type}</b>\r\n          </p>\r\n        </Space>\r\n        <Space size={35}>\r\n          <p>OS Version</p>{\" \"}\r\n          <p>\r\n            <b>{deviceDetails.os}</b>\r\n          </p>\r\n        </Space>\r\n        <Space size={29}>\r\n          <p>Mac Address</p>{\" \"}\r\n          <p>\r\n            <b>{deviceDetails.mac_addr}</b>\r\n          </p>\r\n        </Space>\r\n        <Space size={18}>\r\n          <p id=\"abc\" style={{ whiteSpace: \"nowrap\" }}>\r\n            Connected Device(s)\r\n          </p>\r\n          <Space size={9}>\r\n            <Popover\r\n              title={\"List of Devices\"}\r\n              placement={\"bottomLeft\"}\r\n              content={deviceConnected.map((item) => (\r\n                <p>{item}</p>\r\n              ))}\r\n              trigger=\"hover\"\r\n            >\r\n              <p>\r\n                <b>\r\n                  {deviceConnected.length > 0 ? deviceConnected.length : 0}{\" \"}\r\n                  device(s)\r\n                </b>\r\n              </p>\r\n            </Popover>\r\n          </Space>\r\n        </Space>\r\n      </Card>\r\n      <Card\r\n        headStyle={{\r\n          color: deviceDetails.status !== \"Offline\" ? \"#16151b\" : \"white\",\r\n          textAlign: \"center\",\r\n          background:\r\n            deviceDetails.status === \"Active\"\r\n              ? \"#63D196\"\r\n              : deviceDetails.status === \"Inactive\"\r\n              ? \"#F9D14D\"\r\n              : \"#F1544D\",\r\n        }}\r\n        title={\r\n          <div>\r\n            {deviceDetails.status === \"Active\" ? (\r\n              <b>CONNECTED DEVICE</b>\r\n            ) : deviceDetails.status === \"Inactive\" ? (\r\n              <b>INACTIVE DEVICE</b>\r\n            ) : (\r\n              <b>DEVICE IS OFFLINE</b>\r\n            )}\r\n          </div>\r\n        }\r\n        style={{\r\n          width: \"100%\",\r\n          overflow: \"hidden\",\r\n          color: \"white\",\r\n          margin: \"0 auto\",\r\n        }}\r\n        bodyStyle={{ background: \"#16151b\" }}\r\n      ></Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeviceCard;\r\n","import { Statistic, Card, Row, Col } from \"antd\";\r\nimport \"../CustomCSS.css\";\r\nimport moment from \"moment\";\r\nfunction StatisticsBoxes({ deviceDetails }) {\r\n  return (\r\n    <div className=\"site-statistic-demo-card\">\r\n      <Row gutter={25}>\r\n        <Col span={6}>\r\n          <Card bodyStyle={{ background: \"#1F1E26\" }}>\r\n            <Statistic\r\n              title=\"IP Address\"\r\n              value={deviceDetails.id}\r\n              valueStyle={{ color: \"white\", fontWeight: \"bold\" }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col span={6}>\r\n          <Card bodyStyle={{ background: \"#1F1E26\" }}>\r\n            <Statistic\r\n              title=\"Subnet Mask\"\r\n              value={deviceDetails.subnet}\r\n              valueStyle={{ fontWeight: \"bold\" }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col span={6}>\r\n          <Card bodyStyle={{ background: \"#1F1E26\" }}>\r\n            <Statistic\r\n              title=\"Default Gateway\"\r\n              value={deviceDetails.gateway}\r\n              valueStyle={{ fontWeight: \"bold\" }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n        <Col span={6}>\r\n          <Card bodyStyle={{ background: \"#1F1E26\" }}>\r\n            <Statistic\r\n              title=\"Connected Since\"\r\n              value={moment(\r\n                deviceDetails.connected_since,\r\n                \"HH:MM:SS\"\r\n              ).fromNow()}\r\n              valueStyle={{ fontWeight: \"bold\" }}\r\n            />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StatisticsBoxes;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"antd/dist/antd.css\";\nimport { Drawer, Button, Col, Row } from \"antd\";\nimport DeviceCard from \"./Card_Device\";\nimport EmergingThreatsCard from \"./CardEmergingThreats\";\nimport StatsDevice from \"./StatisticsDevice\";\nimport ThreatsTable from \"./TableThreats\";\n\n// Function to render the Drawer component to display the device information\nfunction DeviceDrawer({\n  deviceDetails,\n  deviceDrawerStatus,\n  closeDeviceDrawer,\n  alertData,\n  deviceConnected,\n}) {\n  return (\n    <div>\n      <Drawer\n        title={\n          <div>\n            Home / <b>Device Statistics</b>\n          </div>\n        }\n        style={{ color: \"white\" }}\n        headerStyle={{\n          backgroundColor: \"#16151B\",\n          borderBlockColor: \"#16151B\",\n        }}\n        bodyStyle={{\n          backgroundColor: \"#16151B\",\n          color: \"white\",\n        }}\n        width={\"650px\"}\n        placement=\"right\"\n        closable={true}\n        mask={false}\n        keyboard={true}\n        visible={deviceDrawerStatus}\n        onClose={closeDeviceDrawer}\n      >\n        <div>\n          <Row gutter={25}>\n            <Col span={12}>\n              <DeviceCard\n                deviceDetails={deviceDetails}\n                deviceConnected={deviceConnected}\n              />\n            </Col>\n            <Col span={12}>\n              <EmergingThreatsCard alertData={alertData} />\n            </Col>\n          </Row>\n        </div>\n        <br />\n        <StatsDevice deviceDetails={deviceDetails} />\n        <br />\n        <ThreatsTable alertData={alertData} deviceDetails={deviceDetails} />\n      </Drawer>\n    </div>\n  );\n}\n\nexport default DeviceDrawer;\n\n// <h4>Test Drawer</h4>\n//       <Button\n//         type=\"primary\"\n//         onClick={() => {\n//           setVisible(true);\n//         }}\n//       >\n//         Open Drawer\n//       </Button>\n//       <br />\n//       <br />\n//       <Button\n//         type=\"primary\"\n//         onClick={() => {\n//           setVisible(false);\n//         }}\n//       >\n//         Close Drawer\n//       </Button>\n\n// By default, useState is false as no network nodes has been selected on first load\n// const [visible, setVisible] = useState(false);\n// Check if drawerStatus has been updated\n// When user clicks on a node, drawerStatus will be passed to this component as \"true\"\n// When drawerStatus is \"true\", run setVisible(true) to open the drawer component\n// console.log(deviceDetails);\n// useEffect(() => {\n//   if (drawerStatus == true) {\n//     setVisible(true);\n//     console.log(\"Here1\");\n//   } else if (drawerStatus == false) {\n//     setVisible(false);\n//     console.log(\"Here2\");\n//   }\n// });\n// console.log(\"Value passed:\", drawerStatus);\n","import \"antd/dist/antd.css\";\r\nimport { Layout, Button, Affix } from \"antd\";\r\n\r\nimport React, { useState, useRef, useCallback, useEffect } from \"react\";\r\n\r\nimport { ForceGraph3D } from \"react-force-graph\";\r\nimport * as THREE from \"three\";\r\n\r\nimport networkData from \"./Components/Data/network.json\";\r\nimport device_data from \"./Components/Data/device_data.json\";\r\nimport relation_data from \"./Components/Data/relation_data.json\";\r\n\r\nimport DeviceDrawer from \"./Components/DrawerDevice\";\r\nimport NetworkDrawer from \"./Components/DrawerNetwork\";\r\n\r\n// Functional Component for Network Topology Graph Page UI\r\nfunction AppNetworkTopology() {\r\n  // UseState() functions for maintaining the states\r\n  const [deviceDrawerStatus, setDeviceDrawerStatus] = useState(false); // To open / close the Device Drawer component\r\n  const [networkDrawerStatus, setNetworkDrawerStatus] = useState(false); // To open / close the Network Drawer component\r\n  const [networkDetails, setNetworkDetails] = useState({}); // To store / set the network details for rendering\r\n  const [groupByDevice, setGroupByDevice] = useState(); // To store the number of devices by device type (for statistical boxes)\r\n  const [deviceCounter, setDeviceCounter] = useState(); // To store the total number devices (for statistical boxes)\r\n  const [hoverNode, setHoverNode] = useState(); // To store the details of the selected network node (Network Topology Graph)\r\n  const [deviceConnected, setDeviceConnected] = useState({}); // To store the adjacent devices (after user click on the network node)\r\n  const [alertData, setAlertData] = useState([]); // To store the information\r\n\r\n  // Run functions onload (similar to componentDidMount)\r\n  useEffect(() => {\r\n    setGroupByDevice(groupByDeviceType()); // Counts the number of devices (sort by statuses). Stores output into groupByDevice (via setGroupByDevice)\r\n    setDeviceCounter(device_data.length); // Store the number of devices (determined by length of device_data) into deviceCounter (via setDeviceCounter)\r\n    setNetworkDetails(networkData[0]); // Store the network details (determined by networkData[0]) into networkDetails (via setNetworkDetails)\r\n    getData(); // Retrieves alerts data from JSON Server and stores output into alertData (via setAlertData())\r\n  }, []);\r\n\r\n  // getData() function that utilises the fetch API to retrieve data from the JSON Server\r\n  // After data is retrieved, data is stored in alertData (via setAlertData)\r\n  const getData = async () => {\r\n    await fetch(\"http://localhost:3001/alerts\")\r\n      .then((response) => response.json())\r\n      .then((data) => setAlertData(data))\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  // Function to set the Device Drawer's \"visible\" state to \"true\"\r\n  const openDeviceDrawer = () => {\r\n    setDeviceDrawerStatus(true);\r\n  };\r\n\r\n  // Function to set the Device Drawer's \"visible\" state to \"false\"\r\n  const closeDeviceDrawer = () => {\r\n    setDeviceDrawerStatus(false);\r\n  };\r\n\r\n  // Function to set the Network Drawer's \"visible\" state to \"true\"\r\n  const openNetworkDrawer = () => {\r\n    setNetworkDrawerStatus(true);\r\n  };\r\n\r\n  // Function to set the Network Drawer's \"visible\" state to \"false\"\r\n  const closeNetworkDrawer = () => {\r\n    setNetworkDrawerStatus(false);\r\n  };\r\n\r\n  // Function to open the Network Drawer Component and closes the Device Drawer Component\r\n  // closeDeviceDrawer() - Closes the Device Drawer component\r\n  // openNetworkDrawer() - Opens the Network Drawer Component\r\n  const handleNetworkStatisticsButton = () => {\r\n    closeDeviceDrawer();\r\n    openNetworkDrawer();\r\n  };\r\n\r\n  // Function to sort the devices by statuses\r\n  // Returns array containing the number of devices by statuses\r\n  const groupByDeviceType = () => {\r\n    let result = {};\r\n    for (let i = 0; i < device_data.length; i++) {\r\n      if (!result[device_data[i][\"status\"]]) {\r\n        result[device_data[i][\"status\"]] = 0;\r\n      }\r\n      result[device_data[i][\"status\"]]++;\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // Function that counts the number of adjacent devices connected to the selected network node\r\n  const connectedDeviceCounter = (hoverNode) => {\r\n    let connectedDeviceArray = [];\r\n\r\n    for (let d = 0; d < relation_data.length; d++) {\r\n      if (relation_data[d].source.id === hoverNode.id) {\r\n        connectedDeviceArray.push(relation_data[d].target.id);\r\n      }\r\n      // else if (relation_data[d].target.id === hoverNode.id) {\r\n      //   connectedDeviceArray.push(relation_data[d].source.id);\r\n      // }\r\n    }\r\n    return connectedDeviceArray;\r\n  };\r\n\r\n  // graphUseRef hook to allow data persistence\r\n  const graphUseRef = useRef();\r\n\r\n  // Function to zoom towards the selected network node and opens Device Drawer Component\r\n  // setHoverNode() - Store the selected node's details into the hoverNode (via setHoverNode())\r\n  // openDeviceDrawer() - Opens the Device Drawer Component\r\n  // closeNetworkDrawer() - Closes the Network Drawer Component\r\n  const zoomInNode = useCallback(\r\n    (node) => {\r\n      setHoverNode(node);\r\n      openDeviceDrawer();\r\n      closeNetworkDrawer();\r\n      setDeviceConnected(connectedDeviceCounter(node));\r\n\r\n      // Camera distance of node\r\n      const distance = 150;\r\n      const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\r\n\r\n      graphUseRef.current.cameraPosition(\r\n        {\r\n          x: node.x * distRatio,\r\n          y: node.y * distRatio,\r\n          z: node.z * distRatio,\r\n        }, // new position\r\n        node, // lookAt ({ x, y, z })\r\n        1500 // ms transition duration\r\n      );\r\n    },\r\n    [graphUseRef]\r\n  );\r\n\r\n  function determineNodeIcon(hoverNode) {\r\n    const iconList = {\r\n      Active: \"assets/online_db_selected.png\",\r\n      Inactive: \"assets/inactive_db_selected.png\",\r\n      Offline: \"assets/offline_db_selected.png\",\r\n    };\r\n\r\n    return iconList[hoverNode.status] ?? \"NA\";\r\n  }\r\n\r\n  // Function that updates all the icons in the Network Topology Graph Component\r\n  const updateNodeIcons = useCallback(\r\n    (node) => {\r\n      let imgTexture = null; // Resets the imgTexture (image used for icon design)\r\n\r\n      // Update selected node icon\r\n      if (node === hoverNode) {\r\n        // If the node is a \"Database\"\r\n        if (node.type === \"DB\") {\r\n          // If the \"Database\" node is \"Active\"\r\n          if (node.status === \"Active\") {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/online_db_selected.png\"\r\n            );\r\n            // If the \"Database\" node is \"Inactive\"\r\n          } else if (node.status === \"Inactive\") {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/inactive_db_selected.png\"\r\n            );\r\n            // If the \"Database\" node is \"Offline\"\r\n          } else {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/offline_db_selected.png\"\r\n            );\r\n          }\r\n          // If the node is a \"PC\"\r\n        } else if (node.type === \"PC\") {\r\n          // If the \"PC\" node is \"Active\"\r\n          if (node.status === \"Active\") {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/online_pc_selected.png\"\r\n            );\r\n            // If the \"PC\" node is \"Inactive\"\r\n          } else if (node.status === \"Inactive\") {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/inactive_pc_selected.png\"\r\n            );\r\n            // If the \"PC\" node is \"Offline\"\r\n          } else {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/offline_pc_selected.png\"\r\n            );\r\n          }\r\n          // If the node is a \"Router\"\r\n        } else if (node.type === \"Router\") {\r\n          // If the \"Router\" node is a \"Active\"\r\n          if (node.status === \"Active\") {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/online_router_selected.png\"\r\n            );\r\n            // If the \"Router\" node is a \"Inactive\"\r\n          } else if (node.status === \"Inactive\") {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/inactive_router_selected.png\"\r\n            );\r\n            // If the \"Router\" node is a \"Offline\"\r\n          } else {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/offline_router_selected.png\"\r\n            );\r\n          }\r\n        }\r\n\r\n        // For nodes that are not selected\r\n      } else {\r\n        if (node.type === \"DB\") {\r\n          if (node.status === \"Active\") {\r\n            imgTexture = new THREE.TextureLoader().load(\"assets/online_db.png\");\r\n          } else if (node.status === \"Inactive\") {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/inactive_db.png\"\r\n            );\r\n          } else {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/offline_db.png\"\r\n            );\r\n          }\r\n        } else if (node.type === \"PC\") {\r\n          if (node.status === \"Active\") {\r\n            imgTexture = new THREE.TextureLoader().load(\"assets/online_pc.png\");\r\n          } else if (node.status === \"Inactive\") {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/inactive_pc.png\"\r\n            );\r\n          } else {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/offline_pc.png\"\r\n            );\r\n          }\r\n        } else if (node.type === \"Router\") {\r\n          if (node.status === \"Active\") {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/online_router.png\"\r\n            );\r\n          } else if (node.status === \"Inactive\") {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/inactive_router.png\"\r\n            );\r\n          } else {\r\n            imgTexture = new THREE.TextureLoader().load(\r\n              \"assets/offline_router.png\"\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      const material = new THREE.SpriteMaterial({ map: imgTexture });\r\n      const sprite = new THREE.Sprite(material);\r\n      sprite.scale.set(12, 12);\r\n\r\n      return sprite;\r\n    },\r\n    [hoverNode]\r\n  );\r\n\r\n  // <Layout style={{ marginLeft: 199, zIndex: -1 }}>\r\n\r\n  return (\r\n    <div>\r\n      <Layout>\r\n        <ForceGraph3D\r\n          width={window.innerWidth}\r\n          height={window.innerHeight - 1}\r\n          ref={graphUseRef}\r\n          graphData={{\r\n            nodes: device_data,\r\n            links: relation_data,\r\n          }}\r\n          nodeLabel={(node) =>\r\n            `<div style=\"background: #1F1E26; padding: 5px 10px 8px 10px; border-radius: 10px; user-select: none\">\r\n            <span>Name: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>${node.name}</b></span><br/>\r\n            <span>IP Addr: &nbsp;&nbsp;&nbsp;&nbsp;<b>${node.id}</b></span><br/>\r\n            <span>Mac Addr: &nbsp;<b>${node.mac_addr}</b></span>\r\n            </div>`\r\n          }\r\n          linkWidth={1}\r\n          onNodeRightClick={zoomInNode}\r\n          // onNodeHover={handleNodeHover}\r\n          // linkDirectionalParticles={1}\r\n          // linkDirectionalParticleSpeed={0.01}\r\n          // onNodeHover={handleHover}\r\n          // onNodeDragEnd={(node) => {\r\n          //   node.fx = node.x;\r\n          //   node.fy = node.y;\r\n          //   node.fz = node.z;\r\n          // }}\r\n          nodeThreeObject={updateNodeIcons}\r\n        />\r\n      </Layout>\r\n      <Affix style={{ position: \"absolute\", top: 120, left: 10, zIndex: 1 }}>\r\n        <Button type=\"primary\" onClick={handleNetworkStatisticsButton}>\r\n          Show Network Statistics\r\n        </Button>\r\n      </Affix>\r\n\r\n      <DeviceDrawer\r\n        deviceDrawerStatus={deviceDrawerStatus}\r\n        deviceDetails={hoverNode}\r\n        closeDeviceDrawer={closeDeviceDrawer}\r\n        alertData={alertData}\r\n        deviceConnected={deviceConnected}\r\n      />\r\n      <NetworkDrawer\r\n        networkDrawerStatus={networkDrawerStatus}\r\n        networkDetails={networkDetails}\r\n        groupByDevice={groupByDevice}\r\n        deviceCounter={deviceCounter}\r\n        closeNetworkDrawer={closeNetworkDrawer}\r\n        alertData={alertData}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppNetworkTopology;\r\n","import React, { useEffect } from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Form, Input, Button, Select } from \"antd\";\r\nconst { Option } = Select;\r\n\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 16,\r\n  },\r\n};\r\n\r\nexport default function DeviceManageForm({\r\n  manageDeviceDetails,\r\n  deviceForm,\r\n  updatedFormValues,\r\n}) {\r\n  // When user save changes, run onFinish()\r\n  const onFinish = (values) => {\r\n    // console.log(values);\r\n    localStorage.setItem(\"newUpdate\", JSON.stringify(values));\r\n\r\n    let storedData = localStorage.getItem(\"newUpdate\");\r\n    storedData = JSON.parse(storedData);\r\n    console.log(storedData);\r\n\r\n    // updatedFormValues passed the updated data back to the parent (ManageDevices)\r\n    updatedFormValues(storedData);\r\n  };\r\n\r\n  // Function that will reset the values in the Form\r\n  const resetFields = () => {\r\n    deviceForm.setFieldsValue({\r\n      hostname: manageDeviceDetails.name,\r\n      device_type: manageDeviceDetails.type,\r\n      os_version: manageDeviceDetails.os,\r\n      mac_address: manageDeviceDetails.mac_addr,\r\n      ownership: manageDeviceDetails.ownership,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Form\r\n        form={deviceForm}\r\n        {...layout}\r\n        name=\"nest-messages\"\r\n        onFinish={onFinish}\r\n        initialValues={{\r\n          hostname: manageDeviceDetails.name,\r\n          device_type: manageDeviceDetails.type,\r\n          os_version: manageDeviceDetails.os,\r\n          mac_address: manageDeviceDetails.mac_addr,\r\n          ownership: manageDeviceDetails.ownership,\r\n        }}\r\n      >\r\n        {/* Form Item for Device IP*/}\r\n        <Form.Item\r\n          name=\"hostname\"\r\n          label=\"Hostname\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n            },\r\n          ]}\r\n        >\r\n          <Input></Input>\r\n        </Form.Item>\r\n\r\n        {/* Form Item for Device Type */}\r\n        <Form.Item\r\n          name=\"device_type\"\r\n          label=\"Device Type\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n            },\r\n          ]}\r\n        >\r\n          <Select>\r\n            <Option value=\"PC\">PC</Option>\r\n            <Option value=\"Router\">Router</Option>\r\n            <Option value=\"Server\">Server</Option>\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        {/* Form Item for OS Version*/}\r\n        <Form.Item\r\n          name=\"os_version\"\r\n          label=\"OS Version\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n            },\r\n          ]}\r\n        >\r\n          <Select>\r\n            <Option value=\"Windows 11\">Windows 11</Option>\r\n            <Option value=\"Windows 10\">Windows 10</Option>\r\n            <Option value=\"Windows 7\">Windows 7</Option>\r\n            <Option value=\"MacOS\">MacOS</Option>\r\n            <Option value=\"Linux\">Linux</Option>\r\n            <Option value=\"Others\">Others</Option>\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        {/* Form Item for Mac Address*/}\r\n        <Form.Item\r\n          name=\"mac_address\"\r\n          label=\"Mac Address\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              min: 17,\r\n              max: 17,\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        {/* Form Item for device ownership*/}\r\n        <Form.Item\r\n          name=\"ownership\"\r\n          label=\"Device Ownership\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n            },\r\n          ]}\r\n        >\r\n          <Select>\r\n            <Option value=\"Corporate\">Corporate</Option>\r\n            <Option value=\"Personal\">Personal</Option>\r\n          </Select>\r\n        </Form.Item>\r\n\r\n        {/* Form Item for device ownership*/}\r\n        <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Save Changes\r\n          </Button>\r\n          <Button\r\n            htmlType=\"button\"\r\n            style={{\r\n              margin: \"0 8px\",\r\n            }}\r\n            onClick={resetFields}\r\n          >\r\n            Revert\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Function to update the values in the Form\r\n// const handleButton = () => {\r\n//   deviceForm.setFieldsValue({\r\n//     hostname: manageDeviceDetails.name,\r\n//     device_type: manageDeviceDetails.type,\r\n//     os_version: manageDeviceDetails.os,\r\n//     mac_address: manageDeviceDetails.mac_addr,\r\n//     ownership: manageDeviceDetails.ownership,\r\n//   });\r\n// };\r\n","import React, { useRef } from \"react\";\nimport \"antd/dist/antd.css\";\nimport \"../CustomCSS.css\";\nimport { Drawer, Button, Col, Row } from \"antd\";\nimport DeviceManageForm from \"./FormDeviceManage\";\n\nfunction ManageDrawer({\n  manageDrawerStatus,\n  manageDeviceDetails,\n  closeMangeDeviceDrawer,\n  deviceForm,\n  updatedFormValues,\n}) {\n  return (\n    <div>\n      <Drawer\n        title={\n          <div>\n            Home / <b>Manage Devices</b>\n          </div>\n        }\n        style={{ color: \"white\" }}\n        maskStyle={{\n          color: \"white\",\n        }}\n        headerStyle={{\n          backgroundColor: \"#16151B\",\n          borderBottomWidth: 0,\n        }}\n        bodyStyle={{\n          backgroundColor: \"#16151B\",\n          color: \"white\",\n        }}\n        width={\"500px\"}\n        placement=\"right\"\n        closable={true}\n        mask={false}\n        keyboard={true}\n        visible={manageDrawerStatus}\n        onClose={closeMangeDeviceDrawer}\n      >\n        <div>\n          <h2 className=\"manage-device-drawer-title\">\n            Edit Device Information ({manageDeviceDetails.id})\n          </h2>\n          <br />\n          <DeviceManageForm\n            manageDeviceDetails={manageDeviceDetails}\n            deviceForm={deviceForm}\n            updatedFormValues={updatedFormValues}\n          />\n        </div>\n      </Drawer>\n    </div>\n  );\n}\n\nexport default ManageDrawer;\n","import React, { useState, memo } from \"react\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport { Form, Layout, Table, Space, Popconfirm } from \"antd\";\nimport ManageDrawer from \"./Components/DrawerManage\";\nimport device_data from \"./Components/Data/device_data.json\";\n\nfunction AppManageDevice() {\n  const [manageDrawerStatus, setManageDrawerStatus] = useState(false);\n  const [manageDeviceDetails, setManageDeviceDetails] = useState({});\n  const [thisDeviceData, updateDeviceTableData] = useState(device_data);\n\n  const [deviceForm] = Form.useForm();\n\n  const columns = [\n    {\n      title: \"Action\",\n      key: \"action\",\n      width: 150,\n      render: (record) => (\n        <Space size=\"middle\">\n          <a onClick={() => onEditClick(record)}>Edit</a>\n          <Popconfirm\n            title=\"Are you sure?\"\n            okText=\"Yes\"\n            cancelText=\"No\"\n            placement=\"bottom\"\n            onConfirm={() => tester_delete(record)}\n          >\n            <a>Remove</a>\n          </Popconfirm>\n        </Space>\n      ),\n    },\n    {\n      title: \"IP Address\",\n      dataIndex: \"id\",\n      key: \"id\",\n      width: 150,\n    },\n    {\n      title: \"Hostname\",\n      dataIndex: \"name\",\n      key: \"name\",\n      width: 150,\n    },\n    {\n      title: \"Device Type\",\n      dataIndex: \"type\",\n      key: \"type\",\n      width: 150,\n    },\n    {\n      title: \"OS Version\",\n      dataIndex: \"os\",\n      key: \"os\",\n      width: 150,\n    },\n    {\n      title: \"Mac Address\",\n      dataIndex: \"mac_addr\",\n      key: \"mac_addr\",\n      width: 150,\n    },\n    {\n      title: \"Ownership\",\n      dataIndex: \"ownership\",\n      key: \"ownership\",\n      width: 150,\n    },\n  ];\n\n  // When user clicks on \"Edit\", two functions will run:\n  // - openManageDrawerStatus - To open device drawer\n  // - setManageDeviceDetails - Pass the record to FormDeviceMange page (for the Revert button)\n  // - setFormValue - Directly update the values in the Form component\n  const onEditClick = (record) => {\n    openManageDrawerStatus();\n    setManageDeviceDetails(record);\n    setFormValues(record);\n  };\n\n  const openManageDrawerStatus = () => {\n    setManageDrawerStatus(true);\n  };\n\n  const closeMangeDeviceDrawer = () => {\n    setManageDrawerStatus(false);\n  };\n\n  const setFormValues = (record) => {\n    deviceForm.setFieldsValue({\n      hostname: record.name,\n      device_type: record.type,\n      os_version: record.os,\n      mac_address: record.mac_addr,\n      ownership: record.ownership,\n    });\n  };\n\n  // To update the values in the table based on the new\n  const updatedFormValues = (updated) => {\n    // Sample console log for verification only\n    console.log(\n      \"Updated hostname to\",\n      updated.hostname,\n      \"where IP Address is\",\n      manageDeviceDetails.id\n    );\n\n    updateTableValues(updated);\n  };\n\n  // Function to update the table with the updated values from the user\n  function updateTableValues(updated) {\n    for (var i = 0; i < thisDeviceData.length; i++) {\n      if (thisDeviceData[i].id === manageDeviceDetails.id) {\n        thisDeviceData[i].name = updated.hostname;\n        thisDeviceData[i].type = updated.device_type;\n        thisDeviceData[i].os = updated.os_version;\n        thisDeviceData[i].mac_addr = updated.mac_address;\n        thisDeviceData[i].ownership = updated.ownership;\n        break;\n      }\n    }\n    updateDeviceTableData([...thisDeviceData]);\n    console.log(\"Table Updated:\", thisDeviceData[i].name);\n    console.log(thisDeviceData);\n  }\n\n  function tester_delete(recordToDelete) {\n    for (var i = 0; i < thisDeviceData.length; i++) {\n      if (thisDeviceData[i].id === recordToDelete.id) {\n        thisDeviceData.splice(i, 1);\n        break;\n      }\n    }\n    console.log(recordToDelete.id, \"has been deleted\");\n    console.log(thisDeviceData);\n    updateDeviceTableData([...thisDeviceData]);\n  }\n\n  return (\n    <div>\n      <ManageDrawer\n        manageDrawerStatus={manageDrawerStatus}\n        manageDeviceDetails={manageDeviceDetails}\n        closeMangeDeviceDrawer={closeMangeDeviceDrawer}\n        deviceForm={deviceForm}\n        updatedFormValues={updatedFormValues}\n      />\n      <Layout style={{ marginLeft: 199 }}>\n        <Table dataSource={[...thisDeviceData]} columns={columns} />\n      </Layout>\n    </div>\n  );\n}\n\nexport default AppManageDevice;\n","import \"antd/dist/antd.css\";\nimport NetworkDrawer from \"./Components/DrawerNetwork\";\nimport NavigationMenu from \"./Components/MenuNavigation\";\nimport AppNetworkTopology from \"./NetworkTopology\";\nimport AppDeviceManager from \"./ManageDevices\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <div>\n          <NavigationMenu />\n          <Routes>\n            {/* <Route path=\"/\" element={<NetworkDrawer />} /> */}\n            <Route path=\"/\" element={<AppNetworkTopology />} />\n            <Route path=\"/manage\" element={<AppDeviceManager />} />\n          </Routes>\n        </div>\n      </Router>\n      {/* <AppNetworkTopology /> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}